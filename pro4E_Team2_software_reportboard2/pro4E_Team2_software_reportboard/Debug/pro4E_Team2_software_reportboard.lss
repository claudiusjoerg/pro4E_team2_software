
pro4E_Team2_software_reportboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000152  00800100  00000b8a  00000c1e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b8a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800252  00800252  00000d70  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000d70  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000dcc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  00000e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001739  00000000  00000000  00000f74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000083b  00000000  00000000  000026ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007c0  00000000  00000000  00002ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000314  00000000  00000000  000036a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f0  00000000  00000000  000039bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007a5  00000000  00000000  00003eac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00004651  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e8       	ldi	r30, 0x8A	; 138
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 35       	cpi	r26, 0x52	; 82
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a2 e5       	ldi	r26, 0x52	; 82
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 36       	cpi	r26, 0x66	; 102
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <main>
  9e:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_encoder>:
		{
			PORTD |= (1<<EncPIN_LED2);      // auf beide seite leuchtet LED2, go to case 2
		}
		if((enc_delta-1)%3==0)
		{
			if(enc_delta>0)    //im uhrzeigersinn
  a6:	8a b1       	in	r24, 0x0a	; 10
			{
				PORTD |= (1<<EncPIN_LED1);   //alle mit leuchtendem LED1, go to case 1
  a8:	8f 60       	ori	r24, 0x0F	; 15
  aa:	8a b9       	out	0x0a, r24	; 10
			}
			else               // im gegenuhrzeigersinn
			{
				PORTD |= (1<<EncPIN_LED3); // go to case -1
  ac:	08 95       	ret

000000ae <check_button>:
  ae:	89 b1       	in	r24, 0x09	; 9
void check_button(void)//entpreller
{
	static char old_button;
	//static int autorepeat;
	char current_button = ~PIND; //liest invertierte PINS ein, weil Pull-Up
	button |= ~old_button & current_button & BUTTONMASK;//falls zustand gewechselt: button == 1 	
  b0:	20 91 54 02 	lds	r18, 0x0254
  b4:	30 91 55 02 	lds	r19, 0x0255

void check_button(void)//entpreller
{
	static char old_button;
	//static int autorepeat;
	char current_button = ~PIND; //liest invertierte PINS ein, weil Pull-Up
  b8:	80 95       	com	r24
	button |= ~old_button & current_button & BUTTONMASK;//falls zustand gewechselt: button == 1 	
  ba:	80 71       	andi	r24, 0x10	; 16
  bc:	a9 01       	movw	r20, r18
  be:	48 2b       	or	r20, r24
  c0:	ca 01       	movw	r24, r20
  c2:	90 93 55 02 	sts	0x0255, r25
  c6:	80 93 54 02 	sts	0x0254, r24
  ca:	08 95       	ret

000000cc <erz_enc_delta>:

void erz_enc_delta(){
		int8_t new, diff;
		
		new = 0;
		if( PHASE_A )
  cc:	5e 9b       	sbis	0x0b, 6	; 11
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <erz_enc_delta+0x8>
		new = 3;
  d0:	93 e0       	ldi	r25, 0x03	; 3
  d2:	01 c0       	rjmp	.+2      	; 0xd6 <erz_enc_delta+0xa>
}

void erz_enc_delta(){
		int8_t new, diff;
		
		new = 0;
  d4:	90 e0       	ldi	r25, 0x00	; 0
		if( PHASE_A )
		new = 3;
		if( PHASE_B )
  d6:	5d 9b       	sbis	0x0b, 5	; 11
  d8:	02 c0       	rjmp	.+4      	; 0xde <erz_enc_delta+0x12>
		new ^= 1;                   // convert gray to binary
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	98 27       	eor	r25, r24
		diff = last - new;                // difference last - new
  de:	80 91 52 02 	lds	r24, 0x0252
  e2:	89 1b       	sub	r24, r25
		if( diff & 1 ){               // bit 0 = value (1)
  e4:	80 ff       	sbrs	r24, 0
  e6:	09 c0       	rjmp	.+18     	; 0xfa <erz_enc_delta+0x2e>
			last = new;                 // store new as next last
  e8:	90 93 52 02 	sts	0x0252, r25
			enc_delta += (diff & 2) - 1;        // bit 1 = direction (+/-)
  ec:	90 91 53 02 	lds	r25, 0x0253
  f0:	91 50       	subi	r25, 0x01	; 1
  f2:	82 70       	andi	r24, 0x02	; 2
  f4:	89 0f       	add	r24, r25
  f6:	80 93 53 02 	sts	0x0253, r24
  fa:	08 95       	ret

000000fc <encode_read2>:

int8_t encode_read2( void )         // read two step encoders
{
	int8_t val;
	
	cli();
  fc:	f8 94       	cli
	val = enc_delta;
  fe:	80 91 53 02 	lds	r24, 0x0253
	enc_delta = val & 1;
 102:	98 2f       	mov	r25, r24
 104:	91 70       	andi	r25, 0x01	; 1
 106:	90 93 53 02 	sts	0x0253, r25
	sei();
 10a:	78 94       	sei
	return val >> 1;
}
 10c:	85 95       	asr	r24
 10e:	08 95       	ret

00000110 <init_ISR>:
}

void init_ISR()
{
	//Initialisierung time interrupt
	TCCR0B = 0b100; // Prescaler: (Bits|Prescaler) ; (001|0) ; (010|8) ; (011|64) ; (100|256) ; (101|1024)
 110:	84 e0       	ldi	r24, 0x04	; 4
 112:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1 << TOIE0);	//enable timer interrupt
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	80 93 6e 00 	sts	0x006E, r24
	sei();
 11a:	78 94       	sei
 11c:	08 95       	ret

0000011e <__vector_16>:
}

ISR( TIMER0_OVF_vect )             // 1ms for manual movement
{
 11e:	1f 92       	push	r1
 120:	0f 92       	push	r0
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	0f 92       	push	r0
 126:	11 24       	eor	r1, r1
 128:	2f 93       	push	r18
 12a:	3f 93       	push	r19
 12c:	4f 93       	push	r20
 12e:	5f 93       	push	r21
 130:	6f 93       	push	r22
 132:	7f 93       	push	r23
 134:	8f 93       	push	r24
 136:	9f 93       	push	r25
 138:	af 93       	push	r26
 13a:	bf 93       	push	r27
 13c:	ef 93       	push	r30
 13e:	ff 93       	push	r31
	erz_enc_delta();
 140:	0e 94 66 00 	call	0xcc	; 0xcc <erz_enc_delta>
	check_button();					//schaut ob button gedrückt
 144:	0e 94 57 00 	call	0xae	; 0xae <check_button>
	//timercounter++;
 148:	ff 91       	pop	r31
 14a:	ef 91       	pop	r30
 14c:	bf 91       	pop	r27
 14e:	af 91       	pop	r26
 150:	9f 91       	pop	r25
 152:	8f 91       	pop	r24
 154:	7f 91       	pop	r23
 156:	6f 91       	pop	r22
 158:	5f 91       	pop	r21
 15a:	4f 91       	pop	r20
 15c:	3f 91       	pop	r19
 15e:	2f 91       	pop	r18
 160:	0f 90       	pop	r0
 162:	0f be       	out	0x3f, r0	; 63
 164:	0f 90       	pop	r0
 166:	1f 90       	pop	r1
 168:	18 95       	reti

0000016a <pushNibble>:
}

//push a nibble of data through the the LCD's DB4~7 pins, clocking with the Enable pin.
static void pushNibble(int value){
  int val_nibble= value & 0x0F;  //clean the value.  (unnecessary)
  digitalWrite(DB0_PORT, DB0_BIT,val_nibble & 1);
 16a:	80 ff       	sbrs	r24, 0
 16c:	02 c0       	rjmp	.+4      	; 0x172 <pushNibble+0x8>
 16e:	42 9a       	sbi	0x08, 2	; 8
 170:	01 c0       	rjmp	.+2      	; 0x174 <pushNibble+0xa>
 172:	42 98       	cbi	0x08, 2	; 8
  digitalWrite(DB1_PORT, DB1_BIT,val_nibble>>1 & 1);
 174:	81 ff       	sbrs	r24, 1
 176:	02 c0       	rjmp	.+4      	; 0x17c <pushNibble+0x12>
 178:	43 9a       	sbi	0x08, 3	; 8
 17a:	01 c0       	rjmp	.+2      	; 0x17e <pushNibble+0x14>
 17c:	43 98       	cbi	0x08, 3	; 8
  digitalWrite(DB2_PORT, DB2_BIT,val_nibble>>2 & 1);
 17e:	82 ff       	sbrs	r24, 2
 180:	02 c0       	rjmp	.+4      	; 0x186 <pushNibble+0x1c>
 182:	44 9a       	sbi	0x08, 4	; 8
 184:	01 c0       	rjmp	.+2      	; 0x188 <pushNibble+0x1e>
 186:	44 98       	cbi	0x08, 4	; 8
  digitalWrite(DB3_PORT, DB3_BIT,val_nibble>>3 & 1);
 188:	83 ff       	sbrs	r24, 3
 18a:	02 c0       	rjmp	.+4      	; 0x190 <pushNibble+0x26>
 18c:	45 9a       	sbi	0x08, 5	; 8
 18e:	01 c0       	rjmp	.+2      	; 0x192 <pushNibble+0x28>
 190:	45 98       	cbi	0x08, 5	; 8

/************ Main Program Code **********************************************************/

//pulse the Enable pin high (for a microsecond).
static void pulseEnablePin(){
  digitalWrite(EN_PORT, EN_BIT, 1);
 192:	41 9a       	sbi	0x08, 1	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 194:	85 e0       	ldi	r24, 0x05	; 5
 196:	8a 95       	dec	r24
 198:	f1 f7       	brne	.-4      	; 0x196 <pushNibble+0x2c>
 19a:	00 00       	nop
  _delay_us(1);
  digitalWrite(EN_PORT, EN_BIT, 0);
 19c:	41 98       	cbi	0x08, 1	; 8
 19e:	08 95       	ret

000001a0 <pushByte>:
  digitalWrite(DB3_PORT, DB3_BIT,val_nibble>>3 & 1);
  pulseEnablePin();
}

//push a byte of data through the LCD's DB4~7 pins, in two steps, clocking each with the enable pin.
static void pushByte(int value){
 1a0:	cf 93       	push	r28
 1a2:	df 93       	push	r29
 1a4:	ec 01       	movw	r28, r24
  int val_lower = value & 0x0F;
  int val_upper = value >> 4;
  pushNibble(val_upper);
 1a6:	95 95       	asr	r25
 1a8:	87 95       	ror	r24
 1aa:	95 95       	asr	r25
 1ac:	87 95       	ror	r24
 1ae:	95 95       	asr	r25
 1b0:	87 95       	ror	r24
 1b2:	95 95       	asr	r25
 1b4:	87 95       	ror	r24
 1b6:	0e 94 b5 00 	call	0x16a	; 0x16a <pushNibble>
  pushNibble(val_lower);
 1ba:	ce 01       	movw	r24, r28
 1bc:	8f 70       	andi	r24, 0x0F	; 15
 1be:	99 27       	eor	r25, r25
 1c0:	0e 94 b5 00 	call	0x16a	; 0x16a <pushNibble>
 1c4:	80 e9       	ldi	r24, 0x90	; 144
 1c6:	8a 95       	dec	r24
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <pushByte+0x26>
 1ca:	80 e9       	ldi	r24, 0x90	; 144
 1cc:	8a 95       	dec	r24
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <pushByte+0x2c>
  _delay_us(27);
  _delay_us(27);
}
 1d0:	df 91       	pop	r29
 1d2:	cf 91       	pop	r28
 1d4:	08 95       	ret

000001d6 <commandWrite>:
  pushNibble(nibble);
  _delay_us(27);
}

static void commandWrite(int value) {
  digitalWrite(RS_PORT, RS_BIT, 0);
 1d6:	40 98       	cbi	0x08, 0	; 8
#if USING_RW != 0
  if (USING_RW) { digitalWrite(RW_PORT, RW_BIT, 0); }
#endif
  pushByte(value);
 1d8:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <pushByte>
 1dc:	08 95       	ret

000001de <commandWriteNibble>:
  _delay_us(27);
  _delay_us(27);
}

static void commandWriteNibble(int nibble) {
  digitalWrite(RS_PORT, RS_BIT, 0);
 1de:	40 98       	cbi	0x08, 0	; 8
#if USING_RW != 0
  if (USING_RW) { digitalWrite(RW_PORT, RW_BIT, 0); }
#endif
  pushNibble(nibble);
 1e0:	0e 94 b5 00 	call	0x16a	; 0x16a <pushNibble>
 1e4:	80 e9       	ldi	r24, 0x90	; 144
 1e6:	8a 95       	dec	r24
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <commandWriteNibble+0x8>
 1ea:	08 95       	ret

000001ec <lcd_cursor_addr>:
  //Remark: some commands needs additional delay!
}


extern void lcd_cursor_addr(int pos){
  commandWrite(CMD_DDADDR(pos));
 1ec:	8f 77       	andi	r24, 0x7F	; 127
 1ee:	99 27       	eor	r25, r25
 1f0:	80 68       	ori	r24, 0x80	; 128
 1f2:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <commandWrite>
 1f6:	8f e9       	ldi	r24, 0x9F	; 159
 1f8:	9f e0       	ldi	r25, 0x0F	; 15
 1fa:	01 97       	sbiw	r24, 0x01	; 1
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <lcd_cursor_addr+0xe>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <lcd_cursor_addr+0x14>
 200:	00 00       	nop
 202:	08 95       	ret

00000204 <lcd_putchar>:
 * Sends a character to the LCD display.
 * '\n' clears the display after the *next* character
 * '\r' sets the cursor address to begin of 2nd line
 */
int lcd_putchar(char c, FILE *unused)
{
 204:	cf 93       	push	r28
 206:	c8 2f       	mov	r28, r24
  static char nl_seen;
  if (nl_seen && c != '\n') {
 208:	80 91 56 02 	lds	r24, 0x0256
 20c:	88 23       	and	r24, r24
 20e:	79 f0       	breq	.+30     	; 0x22e <lcd_putchar+0x2a>
 210:	ca 30       	cpi	r28, 0x0A	; 10
 212:	79 f0       	breq	.+30     	; 0x232 <lcd_putchar+0x2e>
  pushByte(value);
}

//send the clear screen command to the LCD
static void clear(){
  commandWrite(lcd_Clear);
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <commandWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21c:	8f e3       	ldi	r24, 0x3F	; 63
 21e:	9c e9       	ldi	r25, 0x9C	; 156
 220:	01 97       	sbiw	r24, 0x01	; 1
 222:	f1 f7       	brne	.-4      	; 0x220 <lcd_putchar+0x1c>
 224:	00 c0       	rjmp	.+0      	; 0x226 <lcd_putchar+0x22>
 226:	00 00       	nop
{
  static char nl_seen;
  if (nl_seen && c != '\n') {
      // first character after newline, clear display and home cursor.
      clear();
      nl_seen = 0;
 228:	10 92 56 02 	sts	0x0256, r1
 22c:	06 c0       	rjmp	.+12     	; 0x23a <lcd_putchar+0x36>
  }
  if (c == '\n') {
 22e:	ca 30       	cpi	r28, 0x0A	; 10
 230:	21 f4       	brne	.+8      	; 0x23a <lcd_putchar+0x36>
      nl_seen = 1;
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	80 93 56 02 	sts	0x0256, r24
 238:	0c c0       	rjmp	.+24     	; 0x252 <lcd_putchar+0x4e>
  }
  else if (c != '\r') {
 23a:	cd 30       	cpi	r28, 0x0D	; 13
 23c:	31 f0       	breq	.+12     	; 0x24a <lcd_putchar+0x46>
  _delay_us(1000);
}


static void dataWrite(int value) {
  digitalWrite(RS_PORT, RS_BIT, 1);
 23e:	40 9a       	sbi	0x08, 0	; 8
#if USING_RW != 0
  if (USING_RW) { digitalWrite(RW_PORT, RW_BIT, 0); }
#endif
  pushByte(value);
 240:	8c 2f       	mov	r24, r28
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <pushByte>
 248:	04 c0       	rjmp	.+8      	; 0x252 <lcd_putchar+0x4e>
      nl_seen = 1;
  }
  else if (c != '\r') {
      dataWrite(c);
  } else {	
      commandWrite(CMD_DDADDR(64));
 24a:	80 ec       	ldi	r24, 0xC0	; 192
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <commandWrite>
  }
  return 0;
}
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	cf 91       	pop	r28
 258:	08 95       	ret

0000025a <init_lcd>:
 25a:	2f ef       	ldi	r18, 0xFF	; 255
 25c:	81 ee       	ldi	r24, 0xE1	; 225
 25e:	94 e0       	ldi	r25, 0x04	; 4
 260:	21 50       	subi	r18, 0x01	; 1
 262:	80 40       	sbci	r24, 0x00	; 0
 264:	90 40       	sbci	r25, 0x00	; 0
 266:	e1 f7       	brne	.-8      	; 0x260 <init_lcd+0x6>
 268:	00 c0       	rjmp	.+0      	; 0x26a <init_lcd+0x10>
 26a:	00 00       	nop
// initiatize lcd - cursor and blink settings could be overriden after initializing
void init_lcd() {
//Power-up delay
	_delay_ms(100);
	
  pinMode(EN_PORT, EN_BIT, OUTPUT);
 26c:	39 9a       	sbi	0x07, 1	; 7
  pinMode(RS_PORT, RS_BIT, OUTPUT);
 26e:	38 9a       	sbi	0x07, 0	; 7
#if USING_RW != 0
  if (USING_RW) { pinMode(RW_PORT, RW_BIT, OUTPUT); }
#endif
  pinMode(DB0_PORT, DB0_BIT,OUTPUT);
 270:	3a 9a       	sbi	0x07, 2	; 7
  pinMode(DB1_PORT, DB1_BIT,OUTPUT);
 272:	3b 9a       	sbi	0x07, 3	; 7
  pinMode(DB2_PORT, DB2_BIT,OUTPUT);
 274:	3c 9a       	sbi	0x07, 4	; 7
  pinMode(DB3_PORT, DB3_BIT,OUTPUT);
 276:	3d 9a       	sbi	0x07, 5	; 7
  digitalWrite(EN_PORT, EN_BIT, 1);
 278:	41 9a       	sbi	0x08, 1	; 8
	
  commandWriteNibble(lcd_FunctionReset);	// first part of reset sequence
 27a:	80 e3       	ldi	r24, 0x30	; 48
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	0e 94 ef 00 	call	0x1de	; 0x1de <commandWriteNibble>
 282:	8f e3       	ldi	r24, 0x3F	; 63
 284:	9c e9       	ldi	r25, 0x9C	; 156
 286:	01 97       	sbiw	r24, 0x01	; 1
 288:	f1 f7       	brne	.-4      	; 0x286 <init_lcd+0x2c>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <init_lcd+0x32>
 28c:	00 00       	nop
  _delay_ms(10);
  commandWriteNibble(lcd_FunctionReset);	// second part of reset sequence
 28e:	80 e3       	ldi	r24, 0x30	; 48
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	0e 94 ef 00 	call	0x1de	; 0x1de <commandWriteNibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 296:	8f e1       	ldi	r24, 0x1F	; 31
 298:	93 e0       	ldi	r25, 0x03	; 3
 29a:	01 97       	sbiw	r24, 0x01	; 1
 29c:	f1 f7       	brne	.-4      	; 0x29a <init_lcd+0x40>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <init_lcd+0x46>
 2a0:	00 00       	nop
  _delay_us(200);
  commandWriteNibble(lcd_FunctionReset);	// third part of reset sequence
 2a2:	80 e3       	ldi	r24, 0x30	; 48
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	0e 94 ef 00 	call	0x1de	; 0x1de <commandWriteNibble>
 2aa:	8f e1       	ldi	r24, 0x1F	; 31
 2ac:	93 e0       	ldi	r25, 0x03	; 3
 2ae:	01 97       	sbiw	r24, 0x01	; 1
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <init_lcd+0x54>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <init_lcd+0x5a>
 2b4:	00 00       	nop
  _delay_us(200);							// this delay is omitted in the data sheet
	
	commandWriteNibble(lcd_Home);
 2b6:	82 e0       	ldi	r24, 0x02	; 2
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	0e 94 ef 00 	call	0x1de	; 0x1de <commandWriteNibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2be:	8f e9       	ldi	r24, 0x9F	; 159
 2c0:	9f e0       	ldi	r25, 0x0F	; 15
 2c2:	01 97       	sbiw	r24, 0x01	; 1
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <init_lcd+0x68>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <init_lcd+0x6e>
 2c8:	00 00       	nop
	_delay_ms(1);
	commandWriteNibble(lcd_Home);
 2ca:	82 e0       	ldi	r24, 0x02	; 2
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	0e 94 ef 00 	call	0x1de	; 0x1de <commandWriteNibble>
 2d2:	8f e9       	ldi	r24, 0x9F	; 159
 2d4:	9f e0       	ldi	r25, 0x0F	; 15
 2d6:	01 97       	sbiw	r24, 0x01	; 1
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <init_lcd+0x7c>
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <init_lcd+0x82>
 2dc:	00 00       	nop
	_delay_ms(1);
	commandWriteNibble(lcd_DisplayOn);
 2de:	8c e0       	ldi	r24, 0x0C	; 12
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	0e 94 ef 00 	call	0x1de	; 0x1de <commandWriteNibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2e6:	8f e3       	ldi	r24, 0x3F	; 63
 2e8:	91 e0       	ldi	r25, 0x01	; 1
 2ea:	01 97       	sbiw	r24, 0x01	; 1
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <init_lcd+0x90>
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <init_lcd+0x96>
 2f0:	00 00       	nop
	_delay_us(80);
	commandWriteNibble(lcd_DisplayOff);
 2f2:	88 e0       	ldi	r24, 0x08	; 8
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	0e 94 ef 00 	call	0x1de	; 0x1de <commandWriteNibble>
 2fa:	8f e3       	ldi	r24, 0x3F	; 63
 2fc:	91 e0       	ldi	r25, 0x01	; 1
 2fe:	01 97       	sbiw	r24, 0x01	; 1
 300:	f1 f7       	brne	.-4      	; 0x2fe <init_lcd+0xa4>
 302:	00 c0       	rjmp	.+0      	; 0x304 <init_lcd+0xaa>
 304:	00 00       	nop
	_delay_us(80);
	commandWriteNibble(0x00);
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	0e 94 ef 00 	call	0x1de	; 0x1de <commandWriteNibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 30e:	8f e9       	ldi	r24, 0x9F	; 159
 310:	9f e0       	ldi	r25, 0x0F	; 15
 312:	01 97       	sbiw	r24, 0x01	; 1
 314:	f1 f7       	brne	.-4      	; 0x312 <init_lcd+0xb8>
 316:	00 c0       	rjmp	.+0      	; 0x318 <init_lcd+0xbe>
 318:	00 00       	nop
	_delay_ms(1);
	commandWriteNibble(lcd_Clear);
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	0e 94 ef 00 	call	0x1de	; 0x1de <commandWriteNibble>
 322:	8f e7       	ldi	r24, 0x7F	; 127
 324:	9e e3       	ldi	r25, 0x3E	; 62
 326:	01 97       	sbiw	r24, 0x01	; 1
 328:	f1 f7       	brne	.-4      	; 0x326 <init_lcd+0xcc>
 32a:	00 c0       	rjmp	.+0      	; 0x32c <init_lcd+0xd2>
 32c:	00 00       	nop
	_delay_ms(4);
	commandWriteNibble(0x00);
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	0e 94 ef 00 	call	0x1de	; 0x1de <commandWriteNibble>
 336:	8f e9       	ldi	r24, 0x9F	; 159
 338:	9f e0       	ldi	r25, 0x0F	; 15
 33a:	01 97       	sbiw	r24, 0x01	; 1
 33c:	f1 f7       	brne	.-4      	; 0x33a <init_lcd+0xe0>
 33e:	00 c0       	rjmp	.+0      	; 0x340 <init_lcd+0xe6>
 340:	00 00       	nop
	_delay_ms(1);
	commandWriteNibble(lcd_EntryMode);
 342:	86 e0       	ldi	r24, 0x06	; 6
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	0e 94 ef 00 	call	0x1de	; 0x1de <commandWriteNibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 34a:	8f e3       	ldi	r24, 0x3F	; 63
 34c:	91 e0       	ldi	r25, 0x01	; 1
 34e:	01 97       	sbiw	r24, 0x01	; 1
 350:	f1 f7       	brne	.-4      	; 0x34e <init_lcd+0xf4>
 352:	00 c0       	rjmp	.+0      	; 0x354 <init_lcd+0xfa>
 354:	00 00       	nop
	_delay_us(80);

  // needed by the LCDs controller
  //this being 2 sets up 4-bit mode.
  commandWriteNibble(lcd_Home);
 356:	82 e0       	ldi	r24, 0x02	; 2
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	0e 94 ef 00 	call	0x1de	; 0x1de <commandWriteNibble>
  commandWriteNibble(lcd_Home);
 35e:	82 e0       	ldi	r24, 0x02	; 2
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	0e 94 ef 00 	call	0x1de	; 0x1de <commandWriteNibble>
  //X=don't care

  int num_lines_ptn = (g_num_lines - 1) << 3;
  int dot_format_ptn = 0x00;      //5x7 dots.  0x04 is 5x10

  commandWrite(num_lines_ptn | dot_format_ptn | 0x20);
 366:	88 e2       	ldi	r24, 0x28	; 40
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <commandWrite>
 36e:	8f ee       	ldi	r24, 0xEF	; 239
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	01 97       	sbiw	r24, 0x01	; 1
 374:	f1 f7       	brne	.-4      	; 0x372 <init_lcd+0x118>
 376:	00 c0       	rjmp	.+0      	; 0x378 <init_lcd+0x11e>
 378:	00 00       	nop
  //The rest of the init is not specific to 4-bit mode.
  //NOTE: we're writing full bytes now, not nibbles.

  // display control:
  // turn display on, cursor off, no blinking
  commandWrite(lcd_DisplayOn);
 37a:	8c e0       	ldi	r24, 0x0C	; 12
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <commandWrite>
 382:	8f ee       	ldi	r24, 0xEF	; 239
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	01 97       	sbiw	r24, 0x01	; 1
 388:	f1 f7       	brne	.-4      	; 0x386 <init_lcd+0x12c>
 38a:	00 c0       	rjmp	.+0      	; 0x38c <init_lcd+0x132>
 38c:	00 00       	nop
  _delay_us(60);

  //clear display
  commandWrite(lcd_Clear);
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <commandWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 396:	8f ed       	ldi	r24, 0xDF	; 223
 398:	9e e2       	ldi	r25, 0x2E	; 46
 39a:	01 97       	sbiw	r24, 0x01	; 1
 39c:	f1 f7       	brne	.-4      	; 0x39a <init_lcd+0x140>
 39e:	00 c0       	rjmp	.+0      	; 0x3a0 <init_lcd+0x146>
 3a0:	00 00       	nop
  _delay_ms(3);

  // entry mode set: 06
  // increment automatically, display shift, entire shift off
  commandWrite(lcd_EntryMode);
 3a2:	86 e0       	ldi	r24, 0x06	; 6
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <commandWrite>
 3aa:	8f e9       	ldi	r24, 0x9F	; 159
 3ac:	9f e0       	ldi	r25, 0x0F	; 15
 3ae:	01 97       	sbiw	r24, 0x01	; 1
 3b0:	f1 f7       	brne	.-4      	; 0x3ae <init_lcd+0x154>
 3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <init_lcd+0x15a>
 3b4:	00 00       	nop
 3b6:	08 95       	ret

000003b8 <main>:
 3b8:	2f ef       	ldi	r18, 0xFF	; 255
 3ba:	89 e6       	ldi	r24, 0x69	; 105
 3bc:	98 e1       	ldi	r25, 0x18	; 24
 3be:	21 50       	subi	r18, 0x01	; 1
 3c0:	80 40       	sbci	r24, 0x00	; 0
 3c2:	90 40       	sbci	r25, 0x00	; 0
 3c4:	e1 f7       	brne	.-8      	; 0x3be <main+0x6>
 3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <main+0x10>
 3c8:	00 00       	nop
	// Ladezeit für das Aufstarten der Spannungsversorguung
	_delay_ms(500);

	// Einstellung für Bildschirm
	static FILE fd_lcd = FDEV_SETUP_STREAM(lcd_putchar, NULL, _FDEV_SETUP_WRITE);
	stdout = &fd_lcd;
 3ca:	80 e0       	ldi	r24, 0x00	; 0
 3cc:	91 e0       	ldi	r25, 0x01	; 1
 3ce:	90 93 63 02 	sts	0x0263, r25
 3d2:	80 93 62 02 	sts	0x0262, r24
	
	// Peripheriegeräte und Funktionen laden
	init_lcd();
 3d6:	0e 94 2d 01 	call	0x25a	; 0x25a <init_lcd>
	init_encoder();
 3da:	0e 94 53 00 	call	0xa6	; 0xa6 <init_encoder>
	init_ISR();
 3de:	0e 94 88 00 	call	0x110	; 0x110 <init_ISR>
	
	// Lädt das Hauptmenu
	//while (!read_buttons());
	LoadMenu(MainMenu);
 3e2:	64 e0       	ldi	r22, 0x04	; 4
 3e4:	70 e0       	ldi	r23, 0x00	; 0
 3e6:	82 e3       	ldi	r24, 0x32	; 50
 3e8:	91 e0       	ldi	r25, 0x01	; 1
 3ea:	0e 94 8e 02 	call	0x51c	; 0x51c <_LoadMenu>
 3ee:	2f ef       	ldi	r18, 0xFF	; 255
 3f0:	81 ee       	ldi	r24, 0xE1	; 225
 3f2:	94 e0       	ldi	r25, 0x04	; 4
 3f4:	21 50       	subi	r18, 0x01	; 1
 3f6:	80 40       	sbci	r24, 0x00	; 0
 3f8:	90 40       	sbci	r25, 0x00	; 0
 3fa:	e1 f7       	brne	.-8      	; 0x3f4 <main+0x3c>
 3fc:	00 c0       	rjmp	.+0      	; 0x3fe <main+0x46>
 3fe:	00 00       	nop
		lcd_cursor_addr(LINE1);
		printf("Timer:%i",d++);
		lcd_cursor_addr(LINE2);
		printf("Counter:%i",timercounter);
		*/
		enc_delta = encode_read2();
 400:	0e 94 7e 00 	call	0xfc	; 0xfc <encode_read2>
 404:	80 93 57 02 	sts	0x0257, r24
 408:	2f ef       	ldi	r18, 0xFF	; 255
 40a:	83 ed       	ldi	r24, 0xD3	; 211
 40c:	90 e3       	ldi	r25, 0x30	; 48
 40e:	21 50       	subi	r18, 0x01	; 1
 410:	80 40       	sbci	r24, 0x00	; 0
 412:	90 40       	sbci	r25, 0x00	; 0
 414:	e1 f7       	brne	.-8      	; 0x40e <main+0x56>
 416:	00 c0       	rjmp	.+0      	; 0x418 <main+0x60>
 418:	00 00       	nop
 41a:	f2 cf       	rjmp	.-28     	; 0x400 <main+0x48>

0000041c <ProcessMenu>:
/**
  * ProcessMenu() - change to next or execute current menu item, then display menu text
 */
void ProcessMenu(char button)
{
	switch (button){
 41c:	80 31       	cpi	r24, 0x10	; 16
 41e:	21 f0       	breq	.+8      	; 0x428 <ProcessMenu+0xc>
 420:	80 32       	cpi	r24, 0x20	; 32
 422:	09 f4       	brne	.+2      	; 0x426 <ProcessMenu+0xa>
 424:	4a c0       	rjmp	.+148    	; 0x4ba <ProcessMenu+0x9e>
 426:	5d c0       	rjmp	.+186    	; 0x4e2 <ProcessMenu+0xc6>
		
	case ENC_MENU:
		if (enc_delta < 0)
 428:	80 91 5a 02 	lds	r24, 0x025A
 42c:	88 23       	and	r24, r24
 42e:	ec f4       	brge	.+58     	; 0x46a <ProcessMenu+0x4e>
		{
			if (-enc_delta > activeMenuItem)
 430:	80 91 5a 02 	lds	r24, 0x025A
 434:	20 91 5b 02 	lds	r18, 0x025B
 438:	30 91 5c 02 	lds	r19, 0x025C
 43c:	99 27       	eor	r25, r25
 43e:	81 95       	neg	r24
 440:	0c f4       	brge	.+2      	; 0x444 <ProcessMenu+0x28>
 442:	90 95       	com	r25
 444:	28 17       	cp	r18, r24
 446:	39 07       	cpc	r19, r25
 448:	2c f4       	brge	.+10     	; 0x454 <ProcessMenu+0x38>
			{
				activeMenuItem = 0;
 44a:	10 92 5c 02 	sts	0x025C, r1
 44e:	10 92 5b 02 	sts	0x025B, r1
 452:	47 c0       	rjmp	.+142    	; 0x4e2 <ProcessMenu+0xc6>
			}else activeMenuItem +=enc_delta;
 454:	80 91 5a 02 	lds	r24, 0x025A
 458:	28 0f       	add	r18, r24
 45a:	31 1d       	adc	r19, r1
 45c:	87 fd       	sbrc	r24, 7
 45e:	3a 95       	dec	r19
 460:	30 93 5c 02 	sts	0x025C, r19
 464:	20 93 5b 02 	sts	0x025B, r18
 468:	3c c0       	rjmp	.+120    	; 0x4e2 <ProcessMenu+0xc6>
		}
		else{
			if (enc_delta >(menu_Max-activeMenuItem))
 46a:	20 91 5a 02 	lds	r18, 0x025A
 46e:	80 91 5f 02 	lds	r24, 0x025F
 472:	40 91 5b 02 	lds	r20, 0x025B
 476:	50 91 5c 02 	lds	r21, 0x025C
 47a:	02 2e       	mov	r0, r18
 47c:	00 0c       	add	r0, r0
 47e:	33 0b       	sbc	r19, r19
 480:	08 2e       	mov	r0, r24
 482:	00 0c       	add	r0, r0
 484:	99 0b       	sbc	r25, r25
 486:	84 1b       	sub	r24, r20
 488:	95 0b       	sbc	r25, r21
 48a:	82 17       	cp	r24, r18
 48c:	93 07       	cpc	r25, r19
 48e:	54 f4       	brge	.+20     	; 0x4a4 <ProcessMenu+0x88>
			{activeMenuItem = menu_Max;
 490:	80 91 5f 02 	lds	r24, 0x025F
 494:	08 2e       	mov	r0, r24
 496:	00 0c       	add	r0, r0
 498:	99 0b       	sbc	r25, r25
 49a:	90 93 5c 02 	sts	0x025C, r25
 49e:	80 93 5b 02 	sts	0x025B, r24
 4a2:	1f c0       	rjmp	.+62     	; 0x4e2 <ProcessMenu+0xc6>
			}
			 else activeMenuItem +=enc_delta;
 4a4:	80 91 5a 02 	lds	r24, 0x025A
 4a8:	48 0f       	add	r20, r24
 4aa:	51 1d       	adc	r21, r1
 4ac:	87 fd       	sbrc	r24, 7
 4ae:	5a 95       	dec	r21
 4b0:	50 93 5c 02 	sts	0x025C, r21
 4b4:	40 93 5b 02 	sts	0x025B, r20
 4b8:	14 c0       	rjmp	.+40     	; 0x4e2 <ProcessMenu+0xc6>
		}
		//activeMenuItem = (activeMenuItem + 1) % nrMenuItems;	//proceed to next menu item
		break;

	case BUTTON_EXECUTE:
		if (activeMenu[activeMenuItem].func!=NULL)  
 4ba:	e0 91 5b 02 	lds	r30, 0x025B
 4be:	f0 91 5c 02 	lds	r31, 0x025C
 4c2:	ee 0f       	add	r30, r30
 4c4:	ff 1f       	adc	r31, r31
 4c6:	ee 0f       	add	r30, r30
 4c8:	ff 1f       	adc	r31, r31
 4ca:	80 91 5d 02 	lds	r24, 0x025D
 4ce:	90 91 5e 02 	lds	r25, 0x025E
 4d2:	e8 0f       	add	r30, r24
 4d4:	f9 1f       	adc	r31, r25
 4d6:	02 80       	ldd	r0, Z+2	; 0x02
 4d8:	f3 81       	ldd	r31, Z+3	; 0x03
 4da:	e0 2d       	mov	r30, r0
 4dc:	30 97       	sbiw	r30, 0x00	; 0
 4de:	09 f0       	breq	.+2      	; 0x4e2 <ProcessMenu+0xc6>
			activeMenu[activeMenuItem].func();					//execute the selected menufunction
 4e0:	09 95       	icall
	}
	printf("\n%s",activeMenu[activeMenuItem].text);				//display current selected menu text
 4e2:	e0 91 5b 02 	lds	r30, 0x025B
 4e6:	f0 91 5c 02 	lds	r31, 0x025C
 4ea:	ee 0f       	add	r30, r30
 4ec:	ff 1f       	adc	r31, r31
 4ee:	ee 0f       	add	r30, r30
 4f0:	ff 1f       	adc	r31, r31
 4f2:	80 91 5d 02 	lds	r24, 0x025D
 4f6:	90 91 5e 02 	lds	r25, 0x025E
 4fa:	e8 0f       	add	r30, r24
 4fc:	f9 1f       	adc	r31, r25
 4fe:	81 81       	ldd	r24, Z+1	; 0x01
 500:	8f 93       	push	r24
 502:	80 81       	ld	r24, Z
 504:	8f 93       	push	r24
 506:	82 e4       	ldi	r24, 0x42	; 66
 508:	91 e0       	ldi	r25, 0x01	; 1
 50a:	9f 93       	push	r25
 50c:	8f 93       	push	r24
 50e:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <printf>
 512:	0f 90       	pop	r0
 514:	0f 90       	pop	r0
 516:	0f 90       	pop	r0
 518:	0f 90       	pop	r0
 51a:	08 95       	ret

0000051c <_LoadMenu>:
/**
  * _LoadMenu() - load another menu tree (main- or submenu)
 */
void _LoadMenu(struct MenuItem_T menu[], int nrItems)
{
		activeMenu = menu;
 51c:	90 93 5e 02 	sts	0x025E, r25
 520:	80 93 5d 02 	sts	0x025D, r24
		nrMenuItems = nrItems;
 524:	70 93 59 02 	sts	0x0259, r23
 528:	60 93 58 02 	sts	0x0258, r22
		activeMenuItem = 0;
 52c:	10 92 5c 02 	sts	0x025C, r1
 530:	10 92 5b 02 	sts	0x025B, r1
		ProcessMenu(0);											// Display first menuitem (on first display line)
 534:	80 e0       	ldi	r24, 0x00	; 0
 536:	0e 94 0e 02 	call	0x41c	; 0x41c <ProcessMenu>
 53a:	08 95       	ret

0000053c <notesSys>:
	printf("power of the plant :");
}
	
// Shows last notifications
void notesSys(void)
{}
 53c:	08 95       	ret

0000053e <nameFunc>:
//Rem: in a real application, implement this and function prototypes in different module(s)

// Menu for naming power plant
void nameFunc(void)
{
	LoadMenu(SubMenuName);
 53e:	62 e0       	ldi	r22, 0x02	; 2
 540:	70 e0       	ldi	r23, 0x00	; 0
 542:	8a e2       	ldi	r24, 0x2A	; 42
 544:	91 e0       	ldi	r25, 0x01	; 1
 546:	0e 94 8e 02 	call	0x51c	; 0x51c <_LoadMenu>
 54a:	08 95       	ret

0000054c <numberModules>:
}

// Edit number of modules
void numberModules(void)
{
	LoadMenu(SubMenuNumber);
 54c:	62 e0       	ldi	r22, 0x02	; 2
 54e:	70 e0       	ldi	r23, 0x00	; 0
 550:	82 e2       	ldi	r24, 0x22	; 34
 552:	91 e0       	ldi	r25, 0x01	; 1
 554:	0e 94 8e 02 	call	0x51c	; 0x51c <_LoadMenu>
 558:	08 95       	ret

0000055a <statusFunc>:
} 

// Watch status about specifications
void statusFunc(void)
{
	LoadMenu(SubMenuStatus);
 55a:	64 e0       	ldi	r22, 0x04	; 4
 55c:	70 e0       	ldi	r23, 0x00	; 0
 55e:	82 e1       	ldi	r24, 0x12	; 18
 560:	91 e0       	ldi	r25, 0x01	; 1
 562:	0e 94 8e 02 	call	0x51c	; 0x51c <_LoadMenu>
 566:	08 95       	ret

00000568 <aboutFunc>:
}
	
// Infos about product
void aboutFunc(void)
{
	LoadMenu(SubMenuAbout);
 568:	61 e0       	ldi	r22, 0x01	; 1
 56a:	70 e0       	ldi	r23, 0x00	; 0
 56c:	8e e0       	ldi	r24, 0x0E	; 14
 56e:	91 e0       	ldi	r25, 0x01	; 1
 570:	0e 94 8e 02 	call	0x51c	; 0x51c <_LoadMenu>
 574:	08 95       	ret

00000576 <backMain>:
{}

// Return to main menu
void backMain(void)
{
	LoadMenu(MainMenu);
 576:	64 e0       	ldi	r22, 0x04	; 4
 578:	70 e0       	ldi	r23, 0x00	; 0
 57a:	82 e3       	ldi	r24, 0x32	; 50
 57c:	91 e0       	ldi	r25, 0x01	; 1
 57e:	0e 94 8e 02 	call	0x51c	; 0x51c <_LoadMenu>
 582:	08 95       	ret

00000584 <editName>:
}

// Edit name of power plant
void editName(void)
{
	lcd_cursor_addr(LINE1);
 584:	80 e0       	ldi	r24, 0x00	; 0
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_cursor_addr>
	printf("Edit the name");
 58c:	86 e4       	ldi	r24, 0x46	; 70
 58e:	91 e0       	ldi	r25, 0x01	; 1
 590:	9f 93       	push	r25
 592:	8f 93       	push	r24
 594:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <printf>
	lcd_cursor_addr(LINE2);
 598:	80 e4       	ldi	r24, 0x40	; 64
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_cursor_addr>
	// printf("Tool zum eingeben des Namens"); - durch drücken weiter zum nächsten Buchstaben, 8 Zeichen - nach 8x drücken bei "Save and back to mainmenu"
	lcd_cursor_addr(LINE4);
 5a0:	84 e5       	ldi	r24, 0x54	; 84
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_cursor_addr>
	LoadMenu(MainMenu);
 5a8:	64 e0       	ldi	r22, 0x04	; 4
 5aa:	70 e0       	ldi	r23, 0x00	; 0
 5ac:	82 e3       	ldi	r24, 0x32	; 50
 5ae:	91 e0       	ldi	r25, 0x01	; 1
 5b0:	0e 94 8e 02 	call	0x51c	; 0x51c <_LoadMenu>
 5b4:	0f 90       	pop	r0
 5b6:	0f 90       	pop	r0
 5b8:	08 95       	ret

000005ba <editModule>:
}

// Changes numbers of modules
void editModule(void)
{
	printf("Number of Modules : ");
 5ba:	84 e5       	ldi	r24, 0x54	; 84
 5bc:	91 e0       	ldi	r25, 0x01	; 1
 5be:	9f 93       	push	r25
 5c0:	8f 93       	push	r24
 5c2:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <printf>
 5c6:	0f 90       	pop	r0
 5c8:	0f 90       	pop	r0
 5ca:	08 95       	ret

000005cc <voltageSys>:

// Shows average voltage of power plant
void voltageSys(void)

{
	printf("Voltage of the system :");
 5cc:	89 e6       	ldi	r24, 0x69	; 105
 5ce:	91 e0       	ldi	r25, 0x01	; 1
 5d0:	9f 93       	push	r25
 5d2:	8f 93       	push	r24
 5d4:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <printf>
 5d8:	0f 90       	pop	r0
 5da:	0f 90       	pop	r0
 5dc:	08 95       	ret

000005de <powerSys>:

// Shows average power of power plant
void powerSys(void)

{
	printf("power of the plant :");
 5de:	81 e8       	ldi	r24, 0x81	; 129
 5e0:	91 e0       	ldi	r25, 0x01	; 1
 5e2:	9f 93       	push	r25
 5e4:	8f 93       	push	r24
 5e6:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <printf>
 5ea:	0f 90       	pop	r0
 5ec:	0f 90       	pop	r0
 5ee:	08 95       	ret

000005f0 <printf>:
 5f0:	a0 e0       	ldi	r26, 0x00	; 0
 5f2:	b0 e0       	ldi	r27, 0x00	; 0
 5f4:	ee ef       	ldi	r30, 0xFE	; 254
 5f6:	f2 e0       	ldi	r31, 0x02	; 2
 5f8:	0c 94 9c 05 	jmp	0xb38	; 0xb38 <__prologue_saves__+0x20>
 5fc:	ae 01       	movw	r20, r28
 5fe:	4b 5f       	subi	r20, 0xFB	; 251
 600:	5f 4f       	sbci	r21, 0xFF	; 255
 602:	fa 01       	movw	r30, r20
 604:	61 91       	ld	r22, Z+
 606:	71 91       	ld	r23, Z+
 608:	af 01       	movw	r20, r30
 60a:	80 91 62 02 	lds	r24, 0x0262
 60e:	90 91 63 02 	lds	r25, 0x0263
 612:	0e 94 0e 03 	call	0x61c	; 0x61c <vfprintf>
 616:	e2 e0       	ldi	r30, 0x02	; 2
 618:	0c 94 b8 05 	jmp	0xb70	; 0xb70 <__epilogue_restores__+0x20>

0000061c <vfprintf>:
 61c:	ac e0       	ldi	r26, 0x0C	; 12
 61e:	b0 e0       	ldi	r27, 0x00	; 0
 620:	e4 e1       	ldi	r30, 0x14	; 20
 622:	f3 e0       	ldi	r31, 0x03	; 3
 624:	0c 94 8c 05 	jmp	0xb18	; 0xb18 <__prologue_saves__>
 628:	7c 01       	movw	r14, r24
 62a:	6b 01       	movw	r12, r22
 62c:	8a 01       	movw	r16, r20
 62e:	fc 01       	movw	r30, r24
 630:	17 82       	std	Z+7, r1	; 0x07
 632:	16 82       	std	Z+6, r1	; 0x06
 634:	83 81       	ldd	r24, Z+3	; 0x03
 636:	81 ff       	sbrs	r24, 1
 638:	bd c1       	rjmp	.+890    	; 0x9b4 <__stack+0xb5>
 63a:	ce 01       	movw	r24, r28
 63c:	01 96       	adiw	r24, 0x01	; 1
 63e:	4c 01       	movw	r8, r24
 640:	f7 01       	movw	r30, r14
 642:	93 81       	ldd	r25, Z+3	; 0x03
 644:	f6 01       	movw	r30, r12
 646:	93 fd       	sbrc	r25, 3
 648:	85 91       	lpm	r24, Z+
 64a:	93 ff       	sbrs	r25, 3
 64c:	81 91       	ld	r24, Z+
 64e:	6f 01       	movw	r12, r30
 650:	88 23       	and	r24, r24
 652:	09 f4       	brne	.+2      	; 0x656 <vfprintf+0x3a>
 654:	ab c1       	rjmp	.+854    	; 0x9ac <__stack+0xad>
 656:	85 32       	cpi	r24, 0x25	; 37
 658:	39 f4       	brne	.+14     	; 0x668 <vfprintf+0x4c>
 65a:	93 fd       	sbrc	r25, 3
 65c:	85 91       	lpm	r24, Z+
 65e:	93 ff       	sbrs	r25, 3
 660:	81 91       	ld	r24, Z+
 662:	6f 01       	movw	r12, r30
 664:	85 32       	cpi	r24, 0x25	; 37
 666:	29 f4       	brne	.+10     	; 0x672 <vfprintf+0x56>
 668:	b7 01       	movw	r22, r14
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	0e 94 f6 04 	call	0x9ec	; 0x9ec <fputc>
 670:	e7 cf       	rjmp	.-50     	; 0x640 <vfprintf+0x24>
 672:	51 2c       	mov	r5, r1
 674:	31 2c       	mov	r3, r1
 676:	20 e0       	ldi	r18, 0x00	; 0
 678:	20 32       	cpi	r18, 0x20	; 32
 67a:	a0 f4       	brcc	.+40     	; 0x6a4 <vfprintf+0x88>
 67c:	8b 32       	cpi	r24, 0x2B	; 43
 67e:	69 f0       	breq	.+26     	; 0x69a <vfprintf+0x7e>
 680:	30 f4       	brcc	.+12     	; 0x68e <vfprintf+0x72>
 682:	80 32       	cpi	r24, 0x20	; 32
 684:	59 f0       	breq	.+22     	; 0x69c <vfprintf+0x80>
 686:	83 32       	cpi	r24, 0x23	; 35
 688:	69 f4       	brne	.+26     	; 0x6a4 <vfprintf+0x88>
 68a:	20 61       	ori	r18, 0x10	; 16
 68c:	2c c0       	rjmp	.+88     	; 0x6e6 <vfprintf+0xca>
 68e:	8d 32       	cpi	r24, 0x2D	; 45
 690:	39 f0       	breq	.+14     	; 0x6a0 <vfprintf+0x84>
 692:	80 33       	cpi	r24, 0x30	; 48
 694:	39 f4       	brne	.+14     	; 0x6a4 <vfprintf+0x88>
 696:	21 60       	ori	r18, 0x01	; 1
 698:	26 c0       	rjmp	.+76     	; 0x6e6 <vfprintf+0xca>
 69a:	22 60       	ori	r18, 0x02	; 2
 69c:	24 60       	ori	r18, 0x04	; 4
 69e:	23 c0       	rjmp	.+70     	; 0x6e6 <vfprintf+0xca>
 6a0:	28 60       	ori	r18, 0x08	; 8
 6a2:	21 c0       	rjmp	.+66     	; 0x6e6 <vfprintf+0xca>
 6a4:	27 fd       	sbrc	r18, 7
 6a6:	27 c0       	rjmp	.+78     	; 0x6f6 <vfprintf+0xda>
 6a8:	30 ed       	ldi	r19, 0xD0	; 208
 6aa:	38 0f       	add	r19, r24
 6ac:	3a 30       	cpi	r19, 0x0A	; 10
 6ae:	78 f4       	brcc	.+30     	; 0x6ce <vfprintf+0xb2>
 6b0:	26 ff       	sbrs	r18, 6
 6b2:	06 c0       	rjmp	.+12     	; 0x6c0 <vfprintf+0xa4>
 6b4:	fa e0       	ldi	r31, 0x0A	; 10
 6b6:	5f 9e       	mul	r5, r31
 6b8:	30 0d       	add	r19, r0
 6ba:	11 24       	eor	r1, r1
 6bc:	53 2e       	mov	r5, r19
 6be:	13 c0       	rjmp	.+38     	; 0x6e6 <vfprintf+0xca>
 6c0:	8a e0       	ldi	r24, 0x0A	; 10
 6c2:	38 9e       	mul	r3, r24
 6c4:	30 0d       	add	r19, r0
 6c6:	11 24       	eor	r1, r1
 6c8:	33 2e       	mov	r3, r19
 6ca:	20 62       	ori	r18, 0x20	; 32
 6cc:	0c c0       	rjmp	.+24     	; 0x6e6 <vfprintf+0xca>
 6ce:	8e 32       	cpi	r24, 0x2E	; 46
 6d0:	21 f4       	brne	.+8      	; 0x6da <vfprintf+0xbe>
 6d2:	26 fd       	sbrc	r18, 6
 6d4:	6b c1       	rjmp	.+726    	; 0x9ac <__stack+0xad>
 6d6:	20 64       	ori	r18, 0x40	; 64
 6d8:	06 c0       	rjmp	.+12     	; 0x6e6 <vfprintf+0xca>
 6da:	8c 36       	cpi	r24, 0x6C	; 108
 6dc:	11 f4       	brne	.+4      	; 0x6e2 <vfprintf+0xc6>
 6de:	20 68       	ori	r18, 0x80	; 128
 6e0:	02 c0       	rjmp	.+4      	; 0x6e6 <vfprintf+0xca>
 6e2:	88 36       	cpi	r24, 0x68	; 104
 6e4:	41 f4       	brne	.+16     	; 0x6f6 <vfprintf+0xda>
 6e6:	f6 01       	movw	r30, r12
 6e8:	93 fd       	sbrc	r25, 3
 6ea:	85 91       	lpm	r24, Z+
 6ec:	93 ff       	sbrs	r25, 3
 6ee:	81 91       	ld	r24, Z+
 6f0:	6f 01       	movw	r12, r30
 6f2:	81 11       	cpse	r24, r1
 6f4:	c1 cf       	rjmp	.-126    	; 0x678 <vfprintf+0x5c>
 6f6:	98 2f       	mov	r25, r24
 6f8:	9f 7d       	andi	r25, 0xDF	; 223
 6fa:	95 54       	subi	r25, 0x45	; 69
 6fc:	93 30       	cpi	r25, 0x03	; 3
 6fe:	28 f4       	brcc	.+10     	; 0x70a <vfprintf+0xee>
 700:	0c 5f       	subi	r16, 0xFC	; 252
 702:	1f 4f       	sbci	r17, 0xFF	; 255
 704:	ff e3       	ldi	r31, 0x3F	; 63
 706:	f9 83       	std	Y+1, r31	; 0x01
 708:	0d c0       	rjmp	.+26     	; 0x724 <vfprintf+0x108>
 70a:	83 36       	cpi	r24, 0x63	; 99
 70c:	31 f0       	breq	.+12     	; 0x71a <vfprintf+0xfe>
 70e:	83 37       	cpi	r24, 0x73	; 115
 710:	71 f0       	breq	.+28     	; 0x72e <vfprintf+0x112>
 712:	83 35       	cpi	r24, 0x53	; 83
 714:	09 f0       	breq	.+2      	; 0x718 <vfprintf+0xfc>
 716:	5b c0       	rjmp	.+182    	; 0x7ce <vfprintf+0x1b2>
 718:	22 c0       	rjmp	.+68     	; 0x75e <vfprintf+0x142>
 71a:	f8 01       	movw	r30, r16
 71c:	80 81       	ld	r24, Z
 71e:	89 83       	std	Y+1, r24	; 0x01
 720:	0e 5f       	subi	r16, 0xFE	; 254
 722:	1f 4f       	sbci	r17, 0xFF	; 255
 724:	44 24       	eor	r4, r4
 726:	43 94       	inc	r4
 728:	51 2c       	mov	r5, r1
 72a:	54 01       	movw	r10, r8
 72c:	15 c0       	rjmp	.+42     	; 0x758 <vfprintf+0x13c>
 72e:	38 01       	movw	r6, r16
 730:	f2 e0       	ldi	r31, 0x02	; 2
 732:	6f 0e       	add	r6, r31
 734:	71 1c       	adc	r7, r1
 736:	f8 01       	movw	r30, r16
 738:	a0 80       	ld	r10, Z
 73a:	b1 80       	ldd	r11, Z+1	; 0x01
 73c:	26 ff       	sbrs	r18, 6
 73e:	03 c0       	rjmp	.+6      	; 0x746 <vfprintf+0x12a>
 740:	65 2d       	mov	r22, r5
 742:	70 e0       	ldi	r23, 0x00	; 0
 744:	02 c0       	rjmp	.+4      	; 0x74a <vfprintf+0x12e>
 746:	6f ef       	ldi	r22, 0xFF	; 255
 748:	7f ef       	ldi	r23, 0xFF	; 255
 74a:	c5 01       	movw	r24, r10
 74c:	2c 87       	std	Y+12, r18	; 0x0c
 74e:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <strnlen>
 752:	2c 01       	movw	r4, r24
 754:	83 01       	movw	r16, r6
 756:	2c 85       	ldd	r18, Y+12	; 0x0c
 758:	2f 77       	andi	r18, 0x7F	; 127
 75a:	22 2e       	mov	r2, r18
 75c:	17 c0       	rjmp	.+46     	; 0x78c <vfprintf+0x170>
 75e:	38 01       	movw	r6, r16
 760:	f2 e0       	ldi	r31, 0x02	; 2
 762:	6f 0e       	add	r6, r31
 764:	71 1c       	adc	r7, r1
 766:	f8 01       	movw	r30, r16
 768:	a0 80       	ld	r10, Z
 76a:	b1 80       	ldd	r11, Z+1	; 0x01
 76c:	26 ff       	sbrs	r18, 6
 76e:	03 c0       	rjmp	.+6      	; 0x776 <vfprintf+0x15a>
 770:	65 2d       	mov	r22, r5
 772:	70 e0       	ldi	r23, 0x00	; 0
 774:	02 c0       	rjmp	.+4      	; 0x77a <vfprintf+0x15e>
 776:	6f ef       	ldi	r22, 0xFF	; 255
 778:	7f ef       	ldi	r23, 0xFF	; 255
 77a:	c5 01       	movw	r24, r10
 77c:	2c 87       	std	Y+12, r18	; 0x0c
 77e:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <strnlen_P>
 782:	2c 01       	movw	r4, r24
 784:	2c 85       	ldd	r18, Y+12	; 0x0c
 786:	20 68       	ori	r18, 0x80	; 128
 788:	22 2e       	mov	r2, r18
 78a:	83 01       	movw	r16, r6
 78c:	23 fc       	sbrc	r2, 3
 78e:	1b c0       	rjmp	.+54     	; 0x7c6 <vfprintf+0x1aa>
 790:	83 2d       	mov	r24, r3
 792:	90 e0       	ldi	r25, 0x00	; 0
 794:	48 16       	cp	r4, r24
 796:	59 06       	cpc	r5, r25
 798:	b0 f4       	brcc	.+44     	; 0x7c6 <vfprintf+0x1aa>
 79a:	b7 01       	movw	r22, r14
 79c:	80 e2       	ldi	r24, 0x20	; 32
 79e:	90 e0       	ldi	r25, 0x00	; 0
 7a0:	0e 94 f6 04 	call	0x9ec	; 0x9ec <fputc>
 7a4:	3a 94       	dec	r3
 7a6:	f4 cf       	rjmp	.-24     	; 0x790 <vfprintf+0x174>
 7a8:	f5 01       	movw	r30, r10
 7aa:	27 fc       	sbrc	r2, 7
 7ac:	85 91       	lpm	r24, Z+
 7ae:	27 fe       	sbrs	r2, 7
 7b0:	81 91       	ld	r24, Z+
 7b2:	5f 01       	movw	r10, r30
 7b4:	b7 01       	movw	r22, r14
 7b6:	90 e0       	ldi	r25, 0x00	; 0
 7b8:	0e 94 f6 04 	call	0x9ec	; 0x9ec <fputc>
 7bc:	31 10       	cpse	r3, r1
 7be:	3a 94       	dec	r3
 7c0:	f1 e0       	ldi	r31, 0x01	; 1
 7c2:	4f 1a       	sub	r4, r31
 7c4:	51 08       	sbc	r5, r1
 7c6:	41 14       	cp	r4, r1
 7c8:	51 04       	cpc	r5, r1
 7ca:	71 f7       	brne	.-36     	; 0x7a8 <vfprintf+0x18c>
 7cc:	e5 c0       	rjmp	.+458    	; 0x998 <__stack+0x99>
 7ce:	84 36       	cpi	r24, 0x64	; 100
 7d0:	11 f0       	breq	.+4      	; 0x7d6 <vfprintf+0x1ba>
 7d2:	89 36       	cpi	r24, 0x69	; 105
 7d4:	39 f5       	brne	.+78     	; 0x824 <vfprintf+0x208>
 7d6:	f8 01       	movw	r30, r16
 7d8:	27 ff       	sbrs	r18, 7
 7da:	07 c0       	rjmp	.+14     	; 0x7ea <vfprintf+0x1ce>
 7dc:	60 81       	ld	r22, Z
 7de:	71 81       	ldd	r23, Z+1	; 0x01
 7e0:	82 81       	ldd	r24, Z+2	; 0x02
 7e2:	93 81       	ldd	r25, Z+3	; 0x03
 7e4:	0c 5f       	subi	r16, 0xFC	; 252
 7e6:	1f 4f       	sbci	r17, 0xFF	; 255
 7e8:	08 c0       	rjmp	.+16     	; 0x7fa <vfprintf+0x1de>
 7ea:	60 81       	ld	r22, Z
 7ec:	71 81       	ldd	r23, Z+1	; 0x01
 7ee:	07 2e       	mov	r0, r23
 7f0:	00 0c       	add	r0, r0
 7f2:	88 0b       	sbc	r24, r24
 7f4:	99 0b       	sbc	r25, r25
 7f6:	0e 5f       	subi	r16, 0xFE	; 254
 7f8:	1f 4f       	sbci	r17, 0xFF	; 255
 7fa:	2f 76       	andi	r18, 0x6F	; 111
 7fc:	72 2e       	mov	r7, r18
 7fe:	97 ff       	sbrs	r25, 7
 800:	09 c0       	rjmp	.+18     	; 0x814 <vfprintf+0x1f8>
 802:	90 95       	com	r25
 804:	80 95       	com	r24
 806:	70 95       	com	r23
 808:	61 95       	neg	r22
 80a:	7f 4f       	sbci	r23, 0xFF	; 255
 80c:	8f 4f       	sbci	r24, 0xFF	; 255
 80e:	9f 4f       	sbci	r25, 0xFF	; 255
 810:	20 68       	ori	r18, 0x80	; 128
 812:	72 2e       	mov	r7, r18
 814:	2a e0       	ldi	r18, 0x0A	; 10
 816:	30 e0       	ldi	r19, 0x00	; 0
 818:	a4 01       	movw	r20, r8
 81a:	0e 94 2e 05 	call	0xa5c	; 0xa5c <__ultoa_invert>
 81e:	a8 2e       	mov	r10, r24
 820:	a8 18       	sub	r10, r8
 822:	44 c0       	rjmp	.+136    	; 0x8ac <vfprintf+0x290>
 824:	85 37       	cpi	r24, 0x75	; 117
 826:	29 f4       	brne	.+10     	; 0x832 <vfprintf+0x216>
 828:	2f 7e       	andi	r18, 0xEF	; 239
 82a:	b2 2e       	mov	r11, r18
 82c:	2a e0       	ldi	r18, 0x0A	; 10
 82e:	30 e0       	ldi	r19, 0x00	; 0
 830:	25 c0       	rjmp	.+74     	; 0x87c <vfprintf+0x260>
 832:	f2 2f       	mov	r31, r18
 834:	f9 7f       	andi	r31, 0xF9	; 249
 836:	bf 2e       	mov	r11, r31
 838:	8f 36       	cpi	r24, 0x6F	; 111
 83a:	c1 f0       	breq	.+48     	; 0x86c <vfprintf+0x250>
 83c:	18 f4       	brcc	.+6      	; 0x844 <vfprintf+0x228>
 83e:	88 35       	cpi	r24, 0x58	; 88
 840:	79 f0       	breq	.+30     	; 0x860 <vfprintf+0x244>
 842:	b4 c0       	rjmp	.+360    	; 0x9ac <__stack+0xad>
 844:	80 37       	cpi	r24, 0x70	; 112
 846:	19 f0       	breq	.+6      	; 0x84e <vfprintf+0x232>
 848:	88 37       	cpi	r24, 0x78	; 120
 84a:	21 f0       	breq	.+8      	; 0x854 <vfprintf+0x238>
 84c:	af c0       	rjmp	.+350    	; 0x9ac <__stack+0xad>
 84e:	2f 2f       	mov	r18, r31
 850:	20 61       	ori	r18, 0x10	; 16
 852:	b2 2e       	mov	r11, r18
 854:	b4 fe       	sbrs	r11, 4
 856:	0d c0       	rjmp	.+26     	; 0x872 <vfprintf+0x256>
 858:	8b 2d       	mov	r24, r11
 85a:	84 60       	ori	r24, 0x04	; 4
 85c:	b8 2e       	mov	r11, r24
 85e:	09 c0       	rjmp	.+18     	; 0x872 <vfprintf+0x256>
 860:	24 ff       	sbrs	r18, 4
 862:	0a c0       	rjmp	.+20     	; 0x878 <vfprintf+0x25c>
 864:	9f 2f       	mov	r25, r31
 866:	96 60       	ori	r25, 0x06	; 6
 868:	b9 2e       	mov	r11, r25
 86a:	06 c0       	rjmp	.+12     	; 0x878 <vfprintf+0x25c>
 86c:	28 e0       	ldi	r18, 0x08	; 8
 86e:	30 e0       	ldi	r19, 0x00	; 0
 870:	05 c0       	rjmp	.+10     	; 0x87c <vfprintf+0x260>
 872:	20 e1       	ldi	r18, 0x10	; 16
 874:	30 e0       	ldi	r19, 0x00	; 0
 876:	02 c0       	rjmp	.+4      	; 0x87c <vfprintf+0x260>
 878:	20 e1       	ldi	r18, 0x10	; 16
 87a:	32 e0       	ldi	r19, 0x02	; 2
 87c:	f8 01       	movw	r30, r16
 87e:	b7 fe       	sbrs	r11, 7
 880:	07 c0       	rjmp	.+14     	; 0x890 <vfprintf+0x274>
 882:	60 81       	ld	r22, Z
 884:	71 81       	ldd	r23, Z+1	; 0x01
 886:	82 81       	ldd	r24, Z+2	; 0x02
 888:	93 81       	ldd	r25, Z+3	; 0x03
 88a:	0c 5f       	subi	r16, 0xFC	; 252
 88c:	1f 4f       	sbci	r17, 0xFF	; 255
 88e:	06 c0       	rjmp	.+12     	; 0x89c <vfprintf+0x280>
 890:	60 81       	ld	r22, Z
 892:	71 81       	ldd	r23, Z+1	; 0x01
 894:	80 e0       	ldi	r24, 0x00	; 0
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	0e 5f       	subi	r16, 0xFE	; 254
 89a:	1f 4f       	sbci	r17, 0xFF	; 255
 89c:	a4 01       	movw	r20, r8
 89e:	0e 94 2e 05 	call	0xa5c	; 0xa5c <__ultoa_invert>
 8a2:	a8 2e       	mov	r10, r24
 8a4:	a8 18       	sub	r10, r8
 8a6:	fb 2d       	mov	r31, r11
 8a8:	ff 77       	andi	r31, 0x7F	; 127
 8aa:	7f 2e       	mov	r7, r31
 8ac:	76 fe       	sbrs	r7, 6
 8ae:	0b c0       	rjmp	.+22     	; 0x8c6 <vfprintf+0x2aa>
 8b0:	37 2d       	mov	r19, r7
 8b2:	3e 7f       	andi	r19, 0xFE	; 254
 8b4:	a5 14       	cp	r10, r5
 8b6:	50 f4       	brcc	.+20     	; 0x8cc <vfprintf+0x2b0>
 8b8:	74 fe       	sbrs	r7, 4
 8ba:	0a c0       	rjmp	.+20     	; 0x8d0 <vfprintf+0x2b4>
 8bc:	72 fc       	sbrc	r7, 2
 8be:	08 c0       	rjmp	.+16     	; 0x8d0 <vfprintf+0x2b4>
 8c0:	37 2d       	mov	r19, r7
 8c2:	3e 7e       	andi	r19, 0xEE	; 238
 8c4:	05 c0       	rjmp	.+10     	; 0x8d0 <vfprintf+0x2b4>
 8c6:	ba 2c       	mov	r11, r10
 8c8:	37 2d       	mov	r19, r7
 8ca:	03 c0       	rjmp	.+6      	; 0x8d2 <vfprintf+0x2b6>
 8cc:	ba 2c       	mov	r11, r10
 8ce:	01 c0       	rjmp	.+2      	; 0x8d2 <vfprintf+0x2b6>
 8d0:	b5 2c       	mov	r11, r5
 8d2:	34 ff       	sbrs	r19, 4
 8d4:	0d c0       	rjmp	.+26     	; 0x8f0 <vfprintf+0x2d4>
 8d6:	fe 01       	movw	r30, r28
 8d8:	ea 0d       	add	r30, r10
 8da:	f1 1d       	adc	r31, r1
 8dc:	80 81       	ld	r24, Z
 8de:	80 33       	cpi	r24, 0x30	; 48
 8e0:	11 f4       	brne	.+4      	; 0x8e6 <vfprintf+0x2ca>
 8e2:	39 7e       	andi	r19, 0xE9	; 233
 8e4:	09 c0       	rjmp	.+18     	; 0x8f8 <vfprintf+0x2dc>
 8e6:	32 ff       	sbrs	r19, 2
 8e8:	06 c0       	rjmp	.+12     	; 0x8f6 <vfprintf+0x2da>
 8ea:	b3 94       	inc	r11
 8ec:	b3 94       	inc	r11
 8ee:	04 c0       	rjmp	.+8      	; 0x8f8 <vfprintf+0x2dc>
 8f0:	83 2f       	mov	r24, r19
 8f2:	86 78       	andi	r24, 0x86	; 134
 8f4:	09 f0       	breq	.+2      	; 0x8f8 <vfprintf+0x2dc>
 8f6:	b3 94       	inc	r11
 8f8:	33 fd       	sbrc	r19, 3
 8fa:	13 c0       	rjmp	.+38     	; 0x922 <__stack+0x23>
 8fc:	30 ff       	sbrs	r19, 0
 8fe:	06 c0       	rjmp	.+12     	; 0x90c <__stack+0xd>
 900:	5a 2c       	mov	r5, r10
 902:	b3 14       	cp	r11, r3
 904:	18 f4       	brcc	.+6      	; 0x90c <__stack+0xd>
 906:	53 0c       	add	r5, r3
 908:	5b 18       	sub	r5, r11
 90a:	b3 2c       	mov	r11, r3
 90c:	b3 14       	cp	r11, r3
 90e:	68 f4       	brcc	.+26     	; 0x92a <__stack+0x2b>
 910:	b7 01       	movw	r22, r14
 912:	80 e2       	ldi	r24, 0x20	; 32
 914:	90 e0       	ldi	r25, 0x00	; 0
 916:	3c 87       	std	Y+12, r19	; 0x0c
 918:	0e 94 f6 04 	call	0x9ec	; 0x9ec <fputc>
 91c:	b3 94       	inc	r11
 91e:	3c 85       	ldd	r19, Y+12	; 0x0c
 920:	f5 cf       	rjmp	.-22     	; 0x90c <__stack+0xd>
 922:	b3 14       	cp	r11, r3
 924:	10 f4       	brcc	.+4      	; 0x92a <__stack+0x2b>
 926:	3b 18       	sub	r3, r11
 928:	01 c0       	rjmp	.+2      	; 0x92c <__stack+0x2d>
 92a:	31 2c       	mov	r3, r1
 92c:	34 ff       	sbrs	r19, 4
 92e:	12 c0       	rjmp	.+36     	; 0x954 <__stack+0x55>
 930:	b7 01       	movw	r22, r14
 932:	80 e3       	ldi	r24, 0x30	; 48
 934:	90 e0       	ldi	r25, 0x00	; 0
 936:	3c 87       	std	Y+12, r19	; 0x0c
 938:	0e 94 f6 04 	call	0x9ec	; 0x9ec <fputc>
 93c:	3c 85       	ldd	r19, Y+12	; 0x0c
 93e:	32 ff       	sbrs	r19, 2
 940:	17 c0       	rjmp	.+46     	; 0x970 <__stack+0x71>
 942:	31 fd       	sbrc	r19, 1
 944:	03 c0       	rjmp	.+6      	; 0x94c <__stack+0x4d>
 946:	88 e7       	ldi	r24, 0x78	; 120
 948:	90 e0       	ldi	r25, 0x00	; 0
 94a:	02 c0       	rjmp	.+4      	; 0x950 <__stack+0x51>
 94c:	88 e5       	ldi	r24, 0x58	; 88
 94e:	90 e0       	ldi	r25, 0x00	; 0
 950:	b7 01       	movw	r22, r14
 952:	0c c0       	rjmp	.+24     	; 0x96c <__stack+0x6d>
 954:	83 2f       	mov	r24, r19
 956:	86 78       	andi	r24, 0x86	; 134
 958:	59 f0       	breq	.+22     	; 0x970 <__stack+0x71>
 95a:	31 ff       	sbrs	r19, 1
 95c:	02 c0       	rjmp	.+4      	; 0x962 <__stack+0x63>
 95e:	8b e2       	ldi	r24, 0x2B	; 43
 960:	01 c0       	rjmp	.+2      	; 0x964 <__stack+0x65>
 962:	80 e2       	ldi	r24, 0x20	; 32
 964:	37 fd       	sbrc	r19, 7
 966:	8d e2       	ldi	r24, 0x2D	; 45
 968:	b7 01       	movw	r22, r14
 96a:	90 e0       	ldi	r25, 0x00	; 0
 96c:	0e 94 f6 04 	call	0x9ec	; 0x9ec <fputc>
 970:	a5 14       	cp	r10, r5
 972:	38 f4       	brcc	.+14     	; 0x982 <__stack+0x83>
 974:	b7 01       	movw	r22, r14
 976:	80 e3       	ldi	r24, 0x30	; 48
 978:	90 e0       	ldi	r25, 0x00	; 0
 97a:	0e 94 f6 04 	call	0x9ec	; 0x9ec <fputc>
 97e:	5a 94       	dec	r5
 980:	f7 cf       	rjmp	.-18     	; 0x970 <__stack+0x71>
 982:	aa 94       	dec	r10
 984:	f4 01       	movw	r30, r8
 986:	ea 0d       	add	r30, r10
 988:	f1 1d       	adc	r31, r1
 98a:	80 81       	ld	r24, Z
 98c:	b7 01       	movw	r22, r14
 98e:	90 e0       	ldi	r25, 0x00	; 0
 990:	0e 94 f6 04 	call	0x9ec	; 0x9ec <fputc>
 994:	a1 10       	cpse	r10, r1
 996:	f5 cf       	rjmp	.-22     	; 0x982 <__stack+0x83>
 998:	33 20       	and	r3, r3
 99a:	09 f4       	brne	.+2      	; 0x99e <__stack+0x9f>
 99c:	51 ce       	rjmp	.-862    	; 0x640 <vfprintf+0x24>
 99e:	b7 01       	movw	r22, r14
 9a0:	80 e2       	ldi	r24, 0x20	; 32
 9a2:	90 e0       	ldi	r25, 0x00	; 0
 9a4:	0e 94 f6 04 	call	0x9ec	; 0x9ec <fputc>
 9a8:	3a 94       	dec	r3
 9aa:	f6 cf       	rjmp	.-20     	; 0x998 <__stack+0x99>
 9ac:	f7 01       	movw	r30, r14
 9ae:	86 81       	ldd	r24, Z+6	; 0x06
 9b0:	97 81       	ldd	r25, Z+7	; 0x07
 9b2:	02 c0       	rjmp	.+4      	; 0x9b8 <__stack+0xb9>
 9b4:	8f ef       	ldi	r24, 0xFF	; 255
 9b6:	9f ef       	ldi	r25, 0xFF	; 255
 9b8:	2c 96       	adiw	r28, 0x0c	; 12
 9ba:	e2 e1       	ldi	r30, 0x12	; 18
 9bc:	0c 94 a8 05 	jmp	0xb50	; 0xb50 <__epilogue_restores__>

000009c0 <strnlen_P>:
 9c0:	fc 01       	movw	r30, r24
 9c2:	05 90       	lpm	r0, Z+
 9c4:	61 50       	subi	r22, 0x01	; 1
 9c6:	70 40       	sbci	r23, 0x00	; 0
 9c8:	01 10       	cpse	r0, r1
 9ca:	d8 f7       	brcc	.-10     	; 0x9c2 <strnlen_P+0x2>
 9cc:	80 95       	com	r24
 9ce:	90 95       	com	r25
 9d0:	8e 0f       	add	r24, r30
 9d2:	9f 1f       	adc	r25, r31
 9d4:	08 95       	ret

000009d6 <strnlen>:
 9d6:	fc 01       	movw	r30, r24
 9d8:	61 50       	subi	r22, 0x01	; 1
 9da:	70 40       	sbci	r23, 0x00	; 0
 9dc:	01 90       	ld	r0, Z+
 9de:	01 10       	cpse	r0, r1
 9e0:	d8 f7       	brcc	.-10     	; 0x9d8 <strnlen+0x2>
 9e2:	80 95       	com	r24
 9e4:	90 95       	com	r25
 9e6:	8e 0f       	add	r24, r30
 9e8:	9f 1f       	adc	r25, r31
 9ea:	08 95       	ret

000009ec <fputc>:
 9ec:	0f 93       	push	r16
 9ee:	1f 93       	push	r17
 9f0:	cf 93       	push	r28
 9f2:	df 93       	push	r29
 9f4:	fb 01       	movw	r30, r22
 9f6:	23 81       	ldd	r18, Z+3	; 0x03
 9f8:	21 fd       	sbrc	r18, 1
 9fa:	03 c0       	rjmp	.+6      	; 0xa02 <fputc+0x16>
 9fc:	8f ef       	ldi	r24, 0xFF	; 255
 9fe:	9f ef       	ldi	r25, 0xFF	; 255
 a00:	28 c0       	rjmp	.+80     	; 0xa52 <fputc+0x66>
 a02:	22 ff       	sbrs	r18, 2
 a04:	16 c0       	rjmp	.+44     	; 0xa32 <fputc+0x46>
 a06:	46 81       	ldd	r20, Z+6	; 0x06
 a08:	57 81       	ldd	r21, Z+7	; 0x07
 a0a:	24 81       	ldd	r18, Z+4	; 0x04
 a0c:	35 81       	ldd	r19, Z+5	; 0x05
 a0e:	42 17       	cp	r20, r18
 a10:	53 07       	cpc	r21, r19
 a12:	44 f4       	brge	.+16     	; 0xa24 <fputc+0x38>
 a14:	a0 81       	ld	r26, Z
 a16:	b1 81       	ldd	r27, Z+1	; 0x01
 a18:	9d 01       	movw	r18, r26
 a1a:	2f 5f       	subi	r18, 0xFF	; 255
 a1c:	3f 4f       	sbci	r19, 0xFF	; 255
 a1e:	31 83       	std	Z+1, r19	; 0x01
 a20:	20 83       	st	Z, r18
 a22:	8c 93       	st	X, r24
 a24:	26 81       	ldd	r18, Z+6	; 0x06
 a26:	37 81       	ldd	r19, Z+7	; 0x07
 a28:	2f 5f       	subi	r18, 0xFF	; 255
 a2a:	3f 4f       	sbci	r19, 0xFF	; 255
 a2c:	37 83       	std	Z+7, r19	; 0x07
 a2e:	26 83       	std	Z+6, r18	; 0x06
 a30:	10 c0       	rjmp	.+32     	; 0xa52 <fputc+0x66>
 a32:	eb 01       	movw	r28, r22
 a34:	09 2f       	mov	r16, r25
 a36:	18 2f       	mov	r17, r24
 a38:	00 84       	ldd	r0, Z+8	; 0x08
 a3a:	f1 85       	ldd	r31, Z+9	; 0x09
 a3c:	e0 2d       	mov	r30, r0
 a3e:	09 95       	icall
 a40:	89 2b       	or	r24, r25
 a42:	e1 f6       	brne	.-72     	; 0x9fc <fputc+0x10>
 a44:	8e 81       	ldd	r24, Y+6	; 0x06
 a46:	9f 81       	ldd	r25, Y+7	; 0x07
 a48:	01 96       	adiw	r24, 0x01	; 1
 a4a:	9f 83       	std	Y+7, r25	; 0x07
 a4c:	8e 83       	std	Y+6, r24	; 0x06
 a4e:	81 2f       	mov	r24, r17
 a50:	90 2f       	mov	r25, r16
 a52:	df 91       	pop	r29
 a54:	cf 91       	pop	r28
 a56:	1f 91       	pop	r17
 a58:	0f 91       	pop	r16
 a5a:	08 95       	ret

00000a5c <__ultoa_invert>:
 a5c:	fa 01       	movw	r30, r20
 a5e:	aa 27       	eor	r26, r26
 a60:	28 30       	cpi	r18, 0x08	; 8
 a62:	51 f1       	breq	.+84     	; 0xab8 <__ultoa_invert+0x5c>
 a64:	20 31       	cpi	r18, 0x10	; 16
 a66:	81 f1       	breq	.+96     	; 0xac8 <__ultoa_invert+0x6c>
 a68:	e8 94       	clt
 a6a:	6f 93       	push	r22
 a6c:	6e 7f       	andi	r22, 0xFE	; 254
 a6e:	6e 5f       	subi	r22, 0xFE	; 254
 a70:	7f 4f       	sbci	r23, 0xFF	; 255
 a72:	8f 4f       	sbci	r24, 0xFF	; 255
 a74:	9f 4f       	sbci	r25, 0xFF	; 255
 a76:	af 4f       	sbci	r26, 0xFF	; 255
 a78:	b1 e0       	ldi	r27, 0x01	; 1
 a7a:	3e d0       	rcall	.+124    	; 0xaf8 <__ultoa_invert+0x9c>
 a7c:	b4 e0       	ldi	r27, 0x04	; 4
 a7e:	3c d0       	rcall	.+120    	; 0xaf8 <__ultoa_invert+0x9c>
 a80:	67 0f       	add	r22, r23
 a82:	78 1f       	adc	r23, r24
 a84:	89 1f       	adc	r24, r25
 a86:	9a 1f       	adc	r25, r26
 a88:	a1 1d       	adc	r26, r1
 a8a:	68 0f       	add	r22, r24
 a8c:	79 1f       	adc	r23, r25
 a8e:	8a 1f       	adc	r24, r26
 a90:	91 1d       	adc	r25, r1
 a92:	a1 1d       	adc	r26, r1
 a94:	6a 0f       	add	r22, r26
 a96:	71 1d       	adc	r23, r1
 a98:	81 1d       	adc	r24, r1
 a9a:	91 1d       	adc	r25, r1
 a9c:	a1 1d       	adc	r26, r1
 a9e:	20 d0       	rcall	.+64     	; 0xae0 <__ultoa_invert+0x84>
 aa0:	09 f4       	brne	.+2      	; 0xaa4 <__ultoa_invert+0x48>
 aa2:	68 94       	set
 aa4:	3f 91       	pop	r19
 aa6:	2a e0       	ldi	r18, 0x0A	; 10
 aa8:	26 9f       	mul	r18, r22
 aaa:	11 24       	eor	r1, r1
 aac:	30 19       	sub	r19, r0
 aae:	30 5d       	subi	r19, 0xD0	; 208
 ab0:	31 93       	st	Z+, r19
 ab2:	de f6       	brtc	.-74     	; 0xa6a <__ultoa_invert+0xe>
 ab4:	cf 01       	movw	r24, r30
 ab6:	08 95       	ret
 ab8:	46 2f       	mov	r20, r22
 aba:	47 70       	andi	r20, 0x07	; 7
 abc:	40 5d       	subi	r20, 0xD0	; 208
 abe:	41 93       	st	Z+, r20
 ac0:	b3 e0       	ldi	r27, 0x03	; 3
 ac2:	0f d0       	rcall	.+30     	; 0xae2 <__ultoa_invert+0x86>
 ac4:	c9 f7       	brne	.-14     	; 0xab8 <__ultoa_invert+0x5c>
 ac6:	f6 cf       	rjmp	.-20     	; 0xab4 <__ultoa_invert+0x58>
 ac8:	46 2f       	mov	r20, r22
 aca:	4f 70       	andi	r20, 0x0F	; 15
 acc:	40 5d       	subi	r20, 0xD0	; 208
 ace:	4a 33       	cpi	r20, 0x3A	; 58
 ad0:	18 f0       	brcs	.+6      	; 0xad8 <__ultoa_invert+0x7c>
 ad2:	49 5d       	subi	r20, 0xD9	; 217
 ad4:	31 fd       	sbrc	r19, 1
 ad6:	40 52       	subi	r20, 0x20	; 32
 ad8:	41 93       	st	Z+, r20
 ada:	02 d0       	rcall	.+4      	; 0xae0 <__ultoa_invert+0x84>
 adc:	a9 f7       	brne	.-22     	; 0xac8 <__ultoa_invert+0x6c>
 ade:	ea cf       	rjmp	.-44     	; 0xab4 <__ultoa_invert+0x58>
 ae0:	b4 e0       	ldi	r27, 0x04	; 4
 ae2:	a6 95       	lsr	r26
 ae4:	97 95       	ror	r25
 ae6:	87 95       	ror	r24
 ae8:	77 95       	ror	r23
 aea:	67 95       	ror	r22
 aec:	ba 95       	dec	r27
 aee:	c9 f7       	brne	.-14     	; 0xae2 <__ultoa_invert+0x86>
 af0:	00 97       	sbiw	r24, 0x00	; 0
 af2:	61 05       	cpc	r22, r1
 af4:	71 05       	cpc	r23, r1
 af6:	08 95       	ret
 af8:	9b 01       	movw	r18, r22
 afa:	ac 01       	movw	r20, r24
 afc:	0a 2e       	mov	r0, r26
 afe:	06 94       	lsr	r0
 b00:	57 95       	ror	r21
 b02:	47 95       	ror	r20
 b04:	37 95       	ror	r19
 b06:	27 95       	ror	r18
 b08:	ba 95       	dec	r27
 b0a:	c9 f7       	brne	.-14     	; 0xafe <__ultoa_invert+0xa2>
 b0c:	62 0f       	add	r22, r18
 b0e:	73 1f       	adc	r23, r19
 b10:	84 1f       	adc	r24, r20
 b12:	95 1f       	adc	r25, r21
 b14:	a0 1d       	adc	r26, r0
 b16:	08 95       	ret

00000b18 <__prologue_saves__>:
 b18:	2f 92       	push	r2
 b1a:	3f 92       	push	r3
 b1c:	4f 92       	push	r4
 b1e:	5f 92       	push	r5
 b20:	6f 92       	push	r6
 b22:	7f 92       	push	r7
 b24:	8f 92       	push	r8
 b26:	9f 92       	push	r9
 b28:	af 92       	push	r10
 b2a:	bf 92       	push	r11
 b2c:	cf 92       	push	r12
 b2e:	df 92       	push	r13
 b30:	ef 92       	push	r14
 b32:	ff 92       	push	r15
 b34:	0f 93       	push	r16
 b36:	1f 93       	push	r17
 b38:	cf 93       	push	r28
 b3a:	df 93       	push	r29
 b3c:	cd b7       	in	r28, 0x3d	; 61
 b3e:	de b7       	in	r29, 0x3e	; 62
 b40:	ca 1b       	sub	r28, r26
 b42:	db 0b       	sbc	r29, r27
 b44:	0f b6       	in	r0, 0x3f	; 63
 b46:	f8 94       	cli
 b48:	de bf       	out	0x3e, r29	; 62
 b4a:	0f be       	out	0x3f, r0	; 63
 b4c:	cd bf       	out	0x3d, r28	; 61
 b4e:	09 94       	ijmp

00000b50 <__epilogue_restores__>:
 b50:	2a 88       	ldd	r2, Y+18	; 0x12
 b52:	39 88       	ldd	r3, Y+17	; 0x11
 b54:	48 88       	ldd	r4, Y+16	; 0x10
 b56:	5f 84       	ldd	r5, Y+15	; 0x0f
 b58:	6e 84       	ldd	r6, Y+14	; 0x0e
 b5a:	7d 84       	ldd	r7, Y+13	; 0x0d
 b5c:	8c 84       	ldd	r8, Y+12	; 0x0c
 b5e:	9b 84       	ldd	r9, Y+11	; 0x0b
 b60:	aa 84       	ldd	r10, Y+10	; 0x0a
 b62:	b9 84       	ldd	r11, Y+9	; 0x09
 b64:	c8 84       	ldd	r12, Y+8	; 0x08
 b66:	df 80       	ldd	r13, Y+7	; 0x07
 b68:	ee 80       	ldd	r14, Y+6	; 0x06
 b6a:	fd 80       	ldd	r15, Y+5	; 0x05
 b6c:	0c 81       	ldd	r16, Y+4	; 0x04
 b6e:	1b 81       	ldd	r17, Y+3	; 0x03
 b70:	aa 81       	ldd	r26, Y+2	; 0x02
 b72:	b9 81       	ldd	r27, Y+1	; 0x01
 b74:	ce 0f       	add	r28, r30
 b76:	d1 1d       	adc	r29, r1
 b78:	0f b6       	in	r0, 0x3f	; 63
 b7a:	f8 94       	cli
 b7c:	de bf       	out	0x3e, r29	; 62
 b7e:	0f be       	out	0x3f, r0	; 63
 b80:	cd bf       	out	0x3d, r28	; 61
 b82:	ed 01       	movw	r28, r26
 b84:	08 95       	ret

00000b86 <_exit>:
 b86:	f8 94       	cli

00000b88 <__stop_program>:
 b88:	ff cf       	rjmp	.-2      	; 0xb88 <__stop_program>
