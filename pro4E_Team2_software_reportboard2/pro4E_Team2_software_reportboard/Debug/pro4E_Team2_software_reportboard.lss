
pro4E_Team2_software_reportboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00000b16  00000baa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b16  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800122  00800122  00000bcc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000bcc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c28  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000c68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001035  00000000  00000000  00000d38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000536  00000000  00000000  00001d6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000056e  00000000  00000000  000022a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f8  00000000  00000000  00002814  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003da  00000000  00000000  00002a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000654  00000000  00000000  00002de6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  0000343a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e1       	ldi	r30, 0x16	; 22
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 32       	cpi	r26, 0x22	; 34
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e2       	ldi	r26, 0x22	; 34
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 33       	cpi	r26, 0x30	; 48
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 3d 02 	call	0x47a	; 0x47a <main>
  9e:	0c 94 89 05 	jmp	0xb12	; 0xb12 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_encoder>:

static int8_t last;

void init_encoder()
{
	EncDDR |= (0<<EncPIN_A)|(0<<EncPIN_B)|(0<<EncPIN_BT)|(1<<EncPIN_LED_BT)|(1<<EncPIN_LED3)|(1<<EncPIN_LED2)|(1<<EncPIN_LED1);   //intput 0, output 1
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	8f 60       	ori	r24, 0x0F	; 15
  aa:	8a b9       	out	0x0a, r24	; 10
  ac:	08 95       	ret

000000ae <check_button>:

void check_button(void)//entpreller
{
	static char old_button;
	//static int autorepeat;
	char current_button = ~PIND; //liest invertierte PINS ein, weil Pull-Up
  ae:	89 b1       	in	r24, 0x09	; 9
	button |= ~old_button & current_button & BUTTONMASK;//falls zustand gewechselt: button == 1 	
  b0:	20 91 26 01 	lds	r18, 0x0126
  b4:	30 91 27 01 	lds	r19, 0x0127

void check_button(void)//entpreller
{
	static char old_button;
	//static int autorepeat;
	char current_button = ~PIND; //liest invertierte PINS ein, weil Pull-Up
  b8:	80 95       	com	r24
	button |= ~old_button & current_button & BUTTONMASK;//falls zustand gewechselt: button == 1 	
  ba:	80 71       	andi	r24, 0x10	; 16
  bc:	a9 01       	movw	r20, r18
  be:	48 2b       	or	r20, r24
  c0:	ca 01       	movw	r24, r20
  c2:	90 93 27 01 	sts	0x0127, r25
  c6:	80 93 26 01 	sts	0x0126, r24
  ca:	08 95       	ret

000000cc <erz_enc_delta>:

void erz_enc_delta(){
		int8_t new, diff;
		
		new = 0;
		if( PHASE_A )
  cc:	5e 9b       	sbis	0x0b, 6	; 11
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <erz_enc_delta+0x8>
		new = 3;
  d0:	93 e0       	ldi	r25, 0x03	; 3
  d2:	01 c0       	rjmp	.+2      	; 0xd6 <erz_enc_delta+0xa>
}

void erz_enc_delta(){
		int8_t new, diff;
		
		new = 0;
  d4:	90 e0       	ldi	r25, 0x00	; 0
		if( PHASE_A )
		new = 3;
		if( PHASE_B )
  d6:	5d 9b       	sbis	0x0b, 5	; 11
  d8:	02 c0       	rjmp	.+4      	; 0xde <erz_enc_delta+0x12>
		new ^= 1;                   // convert gray to binary
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	98 27       	eor	r25, r24
		diff = last - new;                // difference last - new
  de:	80 91 22 01 	lds	r24, 0x0122
  e2:	89 1b       	sub	r24, r25
		if( diff & 1 ){               // bit 0 = value (1)
  e4:	80 ff       	sbrs	r24, 0
  e6:	09 c0       	rjmp	.+18     	; 0xfa <erz_enc_delta+0x2e>
			last = new;                 // store new as next last
  e8:	90 93 22 01 	sts	0x0122, r25
			enc_delta += (diff & 2) - 1;        // bit 1 = direction (+/-)
  ec:	90 91 25 01 	lds	r25, 0x0125
  f0:	91 50       	subi	r25, 0x01	; 1
  f2:	82 70       	andi	r24, 0x02	; 2
  f4:	89 0f       	add	r24, r25
  f6:	80 93 25 01 	sts	0x0125, r24
  fa:	08 95       	ret

000000fc <encode_read2>:

int8_t encode_read2( void )         // read two step encoders
{
	int8_t val;
	
	cli();
  fc:	f8 94       	cli
	val = enc_delta;
  fe:	80 91 25 01 	lds	r24, 0x0125
	enc_delta = val & 1;
 102:	98 2f       	mov	r25, r24
 104:	91 70       	andi	r25, 0x01	; 1
 106:	90 93 25 01 	sts	0x0125, r25
	sei();
 10a:	78 94       	sei
	return val >> 1;
}
 10c:	85 95       	asr	r24
 10e:	08 95       	ret

00000110 <controlLED>:

void controlLED()			//DREHGEBER
{
	/*Knopffunktion*/
			
	if(button==1)      //button gedrückt
 110:	80 91 26 01 	lds	r24, 0x0126
 114:	90 91 27 01 	lds	r25, 0x0127
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	09 f4       	brne	.+2      	; 0x11e <controlLED+0xe>
	{
		PORTD |= (1<<EncPIN_BT);  //button-LED leuchtet nun
 11c:	5c 9a       	sbi	0x0b, 4	; 11
	}
			
	/*Drehfunktion*/
	switch(enc_delta)
 11e:	80 91 25 01 	lds	r24, 0x0125
 122:	8f 3f       	cpi	r24, 0xFF	; 255
 124:	71 f0       	breq	.+28     	; 0x142 <controlLED+0x32>
 126:	2c f4       	brge	.+10     	; 0x132 <controlLED+0x22>
 128:	8d 3f       	cpi	r24, 0xFD	; 253
 12a:	99 f0       	breq	.+38     	; 0x152 <controlLED+0x42>
 12c:	8e 3f       	cpi	r24, 0xFE	; 254
 12e:	69 f0       	breq	.+26     	; 0x14a <controlLED+0x3a>
 130:	12 c0       	rjmp	.+36     	; 0x156 <controlLED+0x46>
 132:	82 30       	cpi	r24, 0x02	; 2
 134:	41 f0       	breq	.+16     	; 0x146 <controlLED+0x36>
 136:	83 30       	cpi	r24, 0x03	; 3
 138:	51 f0       	breq	.+20     	; 0x14e <controlLED+0x3e>
 13a:	81 30       	cpi	r24, 0x01	; 1
 13c:	61 f4       	brne	.+24     	; 0x156 <controlLED+0x46>
	{  //enc.Var. zw. -127...128 zeigt position an
		case 1:
		PORTD |= (1<<EncPIN_LED1);
 13e:	5b 9a       	sbi	0x0b, 3	; 11
		break;
 140:	08 95       	ret
		case -1:
		PORTD |= (1<<EncPIN_LED3);
 142:	59 9a       	sbi	0x0b, 1	; 11
		break;
 144:	08 95       	ret
		case 2:
		PORTD |= (1<<EncPIN_LED2);
 146:	5a 9a       	sbi	0x0b, 2	; 11
		break;
 148:	08 95       	ret
		case -2:
		PORTD |= (1<<EncPIN_LED2);
 14a:	5a 9a       	sbi	0x0b, 2	; 11
		break;
 14c:	08 95       	ret
		case 3:
		PORTD |= (1<<EncPIN_LED3);
 14e:	59 9a       	sbi	0x0b, 1	; 11
		break;
 150:	08 95       	ret
		case -3:
		PORTD |=  (1<<EncPIN_LED1);
 152:	5b 9a       	sbi	0x0b, 3	; 11
		break;
 154:	08 95       	ret
				
		default:
		if(enc_delta%3==0)
 156:	90 91 25 01 	lds	r25, 0x0125
 15a:	86 e5       	ldi	r24, 0x56	; 86
 15c:	98 02       	muls	r25, r24
 15e:	81 2d       	mov	r24, r1
 160:	11 24       	eor	r1, r1
 162:	97 fd       	sbrc	r25, 7
 164:	83 95       	inc	r24
 166:	28 2f       	mov	r18, r24
 168:	22 0f       	add	r18, r18
 16a:	82 0f       	add	r24, r18
 16c:	98 13       	cpse	r25, r24
 16e:	07 c0       	rjmp	.+14     	; 0x17e <controlLED+0x6e>
		{
			if(enc_delta>0)  // im uhrzeigersinn
 170:	80 91 25 01 	lds	r24, 0x0125
 174:	18 16       	cp	r1, r24
 176:	14 f4       	brge	.+4      	; 0x17c <controlLED+0x6c>
			{
				PORTD |= (1<<EncPIN_LED3);     //alle mit leuchtendem LED3, go to case 3
 178:	59 9a       	sbi	0x0b, 1	; 11
 17a:	01 c0       	rjmp	.+2      	; 0x17e <controlLED+0x6e>
			}
			else             // im gegenuhrzeigersinn
			{
				PORTD |= (1<<EncPIN_LED1);    //alle mit leuchtendem LED1, go to case-3
 17c:	5b 9a       	sbi	0x0b, 3	; 11
			}
		}
		if((enc_delta+1)%3==0)
 17e:	80 91 25 01 	lds	r24, 0x0125
 182:	08 2e       	mov	r0, r24
 184:	00 0c       	add	r0, r0
 186:	99 0b       	sbc	r25, r25
 188:	01 96       	adiw	r24, 0x01	; 1
 18a:	63 e0       	ldi	r22, 0x03	; 3
 18c:	70 e0       	ldi	r23, 0x00	; 0
 18e:	0e 94 96 02 	call	0x52c	; 0x52c <__divmodhi4>
 192:	89 2b       	or	r24, r25
 194:	09 f4       	brne	.+2      	; 0x198 <controlLED+0x88>
		{
			PORTD |= (1<<EncPIN_LED2);      // auf beide seite leuchtet LED2, go to case 2
 196:	5a 9a       	sbi	0x0b, 2	; 11
		}
		if((enc_delta-1)%3==0)
 198:	80 91 25 01 	lds	r24, 0x0125
 19c:	08 2e       	mov	r0, r24
 19e:	00 0c       	add	r0, r0
 1a0:	99 0b       	sbc	r25, r25
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	63 e0       	ldi	r22, 0x03	; 3
 1a6:	70 e0       	ldi	r23, 0x00	; 0
 1a8:	0e 94 96 02 	call	0x52c	; 0x52c <__divmodhi4>
 1ac:	89 2b       	or	r24, r25
 1ae:	39 f4       	brne	.+14     	; 0x1be <controlLED+0xae>
		{
			if(enc_delta>0)    //im uhrzeigersinn
 1b0:	80 91 25 01 	lds	r24, 0x0125
 1b4:	18 16       	cp	r1, r24
 1b6:	14 f4       	brge	.+4      	; 0x1bc <controlLED+0xac>
			{
				PORTD |= (1<<EncPIN_LED1);   //alle mit leuchtendem LED1, go to case 1
 1b8:	5b 9a       	sbi	0x0b, 3	; 11
 1ba:	08 95       	ret
			}
			else               // im gegenuhrzeigersinn
			{
				PORTD |= (1<<EncPIN_LED3); // go to case -1
 1bc:	59 9a       	sbi	0x0b, 1	; 11
 1be:	08 95       	ret

000001c0 <init_ISR>:
}

void init_ISR()
{
	//Initialisierung time interrupt
	TCCR0B = 0b100; // Prescaler: (Bits|Prescaler) ; (001|0) ; (010|8) ; (011|64) ; (100|256) ; (101|1024)
 1c0:	84 e0       	ldi	r24, 0x04	; 4
 1c2:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1 << TOIE0);	//enable timer interrupt
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	80 93 6e 00 	sts	0x006E, r24
	sei();
 1ca:	78 94       	sei
 1cc:	08 95       	ret

000001ce <__vector_16>:
}

ISR( TIMER0_OVF_vect )             // 1ms for manual movement
{
 1ce:	1f 92       	push	r1
 1d0:	0f 92       	push	r0
 1d2:	0f b6       	in	r0, 0x3f	; 63
 1d4:	0f 92       	push	r0
 1d6:	11 24       	eor	r1, r1
 1d8:	2f 93       	push	r18
 1da:	3f 93       	push	r19
 1dc:	4f 93       	push	r20
 1de:	5f 93       	push	r21
 1e0:	6f 93       	push	r22
 1e2:	7f 93       	push	r23
 1e4:	8f 93       	push	r24
 1e6:	9f 93       	push	r25
 1e8:	af 93       	push	r26
 1ea:	bf 93       	push	r27
 1ec:	ef 93       	push	r30
 1ee:	ff 93       	push	r31
	erz_enc_delta();
 1f0:	0e 94 66 00 	call	0xcc	; 0xcc <erz_enc_delta>
	check_button();					//schaut ob button gedrückt
 1f4:	0e 94 57 00 	call	0xae	; 0xae <check_button>
	timercounter++;
 1f8:	80 91 23 01 	lds	r24, 0x0123
 1fc:	90 91 24 01 	lds	r25, 0x0124
 200:	01 96       	adiw	r24, 0x01	; 1
 202:	90 93 24 01 	sts	0x0124, r25
 206:	80 93 23 01 	sts	0x0123, r24
 20a:	ff 91       	pop	r31
 20c:	ef 91       	pop	r30
 20e:	bf 91       	pop	r27
 210:	af 91       	pop	r26
 212:	9f 91       	pop	r25
 214:	8f 91       	pop	r24
 216:	7f 91       	pop	r23
 218:	6f 91       	pop	r22
 21a:	5f 91       	pop	r21
 21c:	4f 91       	pop	r20
 21e:	3f 91       	pop	r19
 220:	2f 91       	pop	r18
 222:	0f 90       	pop	r0
 224:	0f be       	out	0x3f, r0	; 63
 226:	0f 90       	pop	r0
 228:	1f 90       	pop	r1
 22a:	18 95       	reti

0000022c <pushNibble>:
 22c:	80 ff       	sbrs	r24, 0
 22e:	02 c0       	rjmp	.+4      	; 0x234 <pushNibble+0x8>
 230:	42 9a       	sbi	0x08, 2	; 8
 232:	01 c0       	rjmp	.+2      	; 0x236 <pushNibble+0xa>
 234:	42 98       	cbi	0x08, 2	; 8
 236:	81 ff       	sbrs	r24, 1
 238:	02 c0       	rjmp	.+4      	; 0x23e <pushNibble+0x12>
 23a:	43 9a       	sbi	0x08, 3	; 8
 23c:	01 c0       	rjmp	.+2      	; 0x240 <pushNibble+0x14>
 23e:	43 98       	cbi	0x08, 3	; 8
 240:	82 ff       	sbrs	r24, 2
 242:	02 c0       	rjmp	.+4      	; 0x248 <pushNibble+0x1c>
 244:	44 9a       	sbi	0x08, 4	; 8
 246:	01 c0       	rjmp	.+2      	; 0x24a <pushNibble+0x1e>
 248:	44 98       	cbi	0x08, 4	; 8
 24a:	83 ff       	sbrs	r24, 3
 24c:	02 c0       	rjmp	.+4      	; 0x252 <pushNibble+0x26>
 24e:	45 9a       	sbi	0x08, 5	; 8
 250:	01 c0       	rjmp	.+2      	; 0x254 <pushNibble+0x28>
 252:	45 98       	cbi	0x08, 5	; 8
 254:	41 9a       	sbi	0x08, 1	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 256:	85 e0       	ldi	r24, 0x05	; 5
 258:	8a 95       	dec	r24
 25a:	f1 f7       	brne	.-4      	; 0x258 <pushNibble+0x2c>
 25c:	00 00       	nop
 25e:	41 98       	cbi	0x08, 1	; 8
 260:	08 95       	ret

00000262 <pushByte>:
 262:	cf 93       	push	r28
 264:	df 93       	push	r29
 266:	ec 01       	movw	r28, r24
 268:	95 95       	asr	r25
 26a:	87 95       	ror	r24
 26c:	95 95       	asr	r25
 26e:	87 95       	ror	r24
 270:	95 95       	asr	r25
 272:	87 95       	ror	r24
 274:	95 95       	asr	r25
 276:	87 95       	ror	r24
 278:	0e 94 16 01 	call	0x22c	; 0x22c <pushNibble>
 27c:	ce 01       	movw	r24, r28
 27e:	8f 70       	andi	r24, 0x0F	; 15
 280:	99 27       	eor	r25, r25
 282:	0e 94 16 01 	call	0x22c	; 0x22c <pushNibble>
 286:	80 e9       	ldi	r24, 0x90	; 144
 288:	8a 95       	dec	r24
 28a:	f1 f7       	brne	.-4      	; 0x288 <pushByte+0x26>
 28c:	80 e9       	ldi	r24, 0x90	; 144
 28e:	8a 95       	dec	r24
 290:	f1 f7       	brne	.-4      	; 0x28e <pushByte+0x2c>
 292:	df 91       	pop	r29
 294:	cf 91       	pop	r28
 296:	08 95       	ret

00000298 <commandWrite>:
 298:	40 98       	cbi	0x08, 0	; 8
 29a:	0e 94 31 01 	call	0x262	; 0x262 <pushByte>
 29e:	08 95       	ret

000002a0 <commandWriteNibble>:
 2a0:	40 98       	cbi	0x08, 0	; 8
 2a2:	0e 94 16 01 	call	0x22c	; 0x22c <pushNibble>
 2a6:	80 e9       	ldi	r24, 0x90	; 144
 2a8:	8a 95       	dec	r24
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <commandWriteNibble+0x8>
 2ac:	08 95       	ret

000002ae <lcd_cursor_addr>:
 2ae:	8f 77       	andi	r24, 0x7F	; 127
 2b0:	99 27       	eor	r25, r25
 2b2:	80 68       	ori	r24, 0x80	; 128
 2b4:	0e 94 4c 01 	call	0x298	; 0x298 <commandWrite>
 2b8:	8f e9       	ldi	r24, 0x9F	; 159
 2ba:	9f e0       	ldi	r25, 0x0F	; 15
 2bc:	01 97       	sbiw	r24, 0x01	; 1
 2be:	f1 f7       	brne	.-4      	; 0x2bc <lcd_cursor_addr+0xe>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <lcd_cursor_addr+0x14>
 2c2:	00 00       	nop
 2c4:	08 95       	ret

000002c6 <lcd_putchar>:
 2c6:	cf 93       	push	r28
 2c8:	c8 2f       	mov	r28, r24
 2ca:	80 91 28 01 	lds	r24, 0x0128
 2ce:	88 23       	and	r24, r24
 2d0:	79 f0       	breq	.+30     	; 0x2f0 <lcd_putchar+0x2a>
 2d2:	ca 30       	cpi	r28, 0x0A	; 10
 2d4:	79 f0       	breq	.+30     	; 0x2f4 <lcd_putchar+0x2e>
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	0e 94 4c 01 	call	0x298	; 0x298 <commandWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2de:	8f e3       	ldi	r24, 0x3F	; 63
 2e0:	9c e9       	ldi	r25, 0x9C	; 156
 2e2:	01 97       	sbiw	r24, 0x01	; 1
 2e4:	f1 f7       	brne	.-4      	; 0x2e2 <lcd_putchar+0x1c>
 2e6:	00 c0       	rjmp	.+0      	; 0x2e8 <lcd_putchar+0x22>
 2e8:	00 00       	nop
 2ea:	10 92 28 01 	sts	0x0128, r1
 2ee:	06 c0       	rjmp	.+12     	; 0x2fc <lcd_putchar+0x36>
 2f0:	ca 30       	cpi	r28, 0x0A	; 10
 2f2:	21 f4       	brne	.+8      	; 0x2fc <lcd_putchar+0x36>
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	80 93 28 01 	sts	0x0128, r24
 2fa:	0c c0       	rjmp	.+24     	; 0x314 <lcd_putchar+0x4e>
 2fc:	cd 30       	cpi	r28, 0x0D	; 13
 2fe:	31 f0       	breq	.+12     	; 0x30c <lcd_putchar+0x46>
 300:	40 9a       	sbi	0x08, 0	; 8
 302:	8c 2f       	mov	r24, r28
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	0e 94 31 01 	call	0x262	; 0x262 <pushByte>
 30a:	04 c0       	rjmp	.+8      	; 0x314 <lcd_putchar+0x4e>
 30c:	80 ec       	ldi	r24, 0xC0	; 192
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	0e 94 4c 01 	call	0x298	; 0x298 <commandWrite>
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	cf 91       	pop	r28
 31a:	08 95       	ret

0000031c <init_lcd>:
 31c:	2f ef       	ldi	r18, 0xFF	; 255
 31e:	81 ee       	ldi	r24, 0xE1	; 225
 320:	94 e0       	ldi	r25, 0x04	; 4
 322:	21 50       	subi	r18, 0x01	; 1
 324:	80 40       	sbci	r24, 0x00	; 0
 326:	90 40       	sbci	r25, 0x00	; 0
 328:	e1 f7       	brne	.-8      	; 0x322 <init_lcd+0x6>
 32a:	00 c0       	rjmp	.+0      	; 0x32c <init_lcd+0x10>
 32c:	00 00       	nop
 32e:	39 9a       	sbi	0x07, 1	; 7
 330:	38 9a       	sbi	0x07, 0	; 7
 332:	3a 9a       	sbi	0x07, 2	; 7
 334:	3b 9a       	sbi	0x07, 3	; 7
 336:	3c 9a       	sbi	0x07, 4	; 7
 338:	3d 9a       	sbi	0x07, 5	; 7
 33a:	41 9a       	sbi	0x08, 1	; 8
 33c:	80 e3       	ldi	r24, 0x30	; 48
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	0e 94 50 01 	call	0x2a0	; 0x2a0 <commandWriteNibble>
 344:	8f e3       	ldi	r24, 0x3F	; 63
 346:	9c e9       	ldi	r25, 0x9C	; 156
 348:	01 97       	sbiw	r24, 0x01	; 1
 34a:	f1 f7       	brne	.-4      	; 0x348 <init_lcd+0x2c>
 34c:	00 c0       	rjmp	.+0      	; 0x34e <init_lcd+0x32>
 34e:	00 00       	nop
 350:	80 e3       	ldi	r24, 0x30	; 48
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	0e 94 50 01 	call	0x2a0	; 0x2a0 <commandWriteNibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 358:	8f e1       	ldi	r24, 0x1F	; 31
 35a:	93 e0       	ldi	r25, 0x03	; 3
 35c:	01 97       	sbiw	r24, 0x01	; 1
 35e:	f1 f7       	brne	.-4      	; 0x35c <init_lcd+0x40>
 360:	00 c0       	rjmp	.+0      	; 0x362 <init_lcd+0x46>
 362:	00 00       	nop
 364:	80 e3       	ldi	r24, 0x30	; 48
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	0e 94 50 01 	call	0x2a0	; 0x2a0 <commandWriteNibble>
 36c:	8f e1       	ldi	r24, 0x1F	; 31
 36e:	93 e0       	ldi	r25, 0x03	; 3
 370:	01 97       	sbiw	r24, 0x01	; 1
 372:	f1 f7       	brne	.-4      	; 0x370 <init_lcd+0x54>
 374:	00 c0       	rjmp	.+0      	; 0x376 <init_lcd+0x5a>
 376:	00 00       	nop
 378:	82 e0       	ldi	r24, 0x02	; 2
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	0e 94 50 01 	call	0x2a0	; 0x2a0 <commandWriteNibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 380:	8f e9       	ldi	r24, 0x9F	; 159
 382:	9f e0       	ldi	r25, 0x0F	; 15
 384:	01 97       	sbiw	r24, 0x01	; 1
 386:	f1 f7       	brne	.-4      	; 0x384 <init_lcd+0x68>
 388:	00 c0       	rjmp	.+0      	; 0x38a <init_lcd+0x6e>
 38a:	00 00       	nop
 38c:	82 e0       	ldi	r24, 0x02	; 2
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	0e 94 50 01 	call	0x2a0	; 0x2a0 <commandWriteNibble>
 394:	8f e9       	ldi	r24, 0x9F	; 159
 396:	9f e0       	ldi	r25, 0x0F	; 15
 398:	01 97       	sbiw	r24, 0x01	; 1
 39a:	f1 f7       	brne	.-4      	; 0x398 <init_lcd+0x7c>
 39c:	00 c0       	rjmp	.+0      	; 0x39e <init_lcd+0x82>
 39e:	00 00       	nop
 3a0:	8c e0       	ldi	r24, 0x0C	; 12
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	0e 94 50 01 	call	0x2a0	; 0x2a0 <commandWriteNibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3a8:	8f e3       	ldi	r24, 0x3F	; 63
 3aa:	91 e0       	ldi	r25, 0x01	; 1
 3ac:	01 97       	sbiw	r24, 0x01	; 1
 3ae:	f1 f7       	brne	.-4      	; 0x3ac <init_lcd+0x90>
 3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <init_lcd+0x96>
 3b2:	00 00       	nop
 3b4:	88 e0       	ldi	r24, 0x08	; 8
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	0e 94 50 01 	call	0x2a0	; 0x2a0 <commandWriteNibble>
 3bc:	8f e3       	ldi	r24, 0x3F	; 63
 3be:	91 e0       	ldi	r25, 0x01	; 1
 3c0:	01 97       	sbiw	r24, 0x01	; 1
 3c2:	f1 f7       	brne	.-4      	; 0x3c0 <init_lcd+0xa4>
 3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <init_lcd+0xaa>
 3c6:	00 00       	nop
 3c8:	80 e0       	ldi	r24, 0x00	; 0
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	0e 94 50 01 	call	0x2a0	; 0x2a0 <commandWriteNibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3d0:	8f e9       	ldi	r24, 0x9F	; 159
 3d2:	9f e0       	ldi	r25, 0x0F	; 15
 3d4:	01 97       	sbiw	r24, 0x01	; 1
 3d6:	f1 f7       	brne	.-4      	; 0x3d4 <init_lcd+0xb8>
 3d8:	00 c0       	rjmp	.+0      	; 0x3da <init_lcd+0xbe>
 3da:	00 00       	nop
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	0e 94 50 01 	call	0x2a0	; 0x2a0 <commandWriteNibble>
 3e4:	8f e7       	ldi	r24, 0x7F	; 127
 3e6:	9e e3       	ldi	r25, 0x3E	; 62
 3e8:	01 97       	sbiw	r24, 0x01	; 1
 3ea:	f1 f7       	brne	.-4      	; 0x3e8 <init_lcd+0xcc>
 3ec:	00 c0       	rjmp	.+0      	; 0x3ee <init_lcd+0xd2>
 3ee:	00 00       	nop
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	0e 94 50 01 	call	0x2a0	; 0x2a0 <commandWriteNibble>
 3f8:	8f e9       	ldi	r24, 0x9F	; 159
 3fa:	9f e0       	ldi	r25, 0x0F	; 15
 3fc:	01 97       	sbiw	r24, 0x01	; 1
 3fe:	f1 f7       	brne	.-4      	; 0x3fc <init_lcd+0xe0>
 400:	00 c0       	rjmp	.+0      	; 0x402 <init_lcd+0xe6>
 402:	00 00       	nop
 404:	86 e0       	ldi	r24, 0x06	; 6
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	0e 94 50 01 	call	0x2a0	; 0x2a0 <commandWriteNibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 40c:	8f e3       	ldi	r24, 0x3F	; 63
 40e:	91 e0       	ldi	r25, 0x01	; 1
 410:	01 97       	sbiw	r24, 0x01	; 1
 412:	f1 f7       	brne	.-4      	; 0x410 <init_lcd+0xf4>
 414:	00 c0       	rjmp	.+0      	; 0x416 <init_lcd+0xfa>
 416:	00 00       	nop
 418:	82 e0       	ldi	r24, 0x02	; 2
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	0e 94 50 01 	call	0x2a0	; 0x2a0 <commandWriteNibble>
 420:	82 e0       	ldi	r24, 0x02	; 2
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	0e 94 50 01 	call	0x2a0	; 0x2a0 <commandWriteNibble>
 428:	88 e2       	ldi	r24, 0x28	; 40
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	0e 94 4c 01 	call	0x298	; 0x298 <commandWrite>
 430:	8f ee       	ldi	r24, 0xEF	; 239
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	01 97       	sbiw	r24, 0x01	; 1
 436:	f1 f7       	brne	.-4      	; 0x434 <init_lcd+0x118>
 438:	00 c0       	rjmp	.+0      	; 0x43a <init_lcd+0x11e>
 43a:	00 00       	nop
 43c:	8c e0       	ldi	r24, 0x0C	; 12
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	0e 94 4c 01 	call	0x298	; 0x298 <commandWrite>
 444:	8f ee       	ldi	r24, 0xEF	; 239
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	01 97       	sbiw	r24, 0x01	; 1
 44a:	f1 f7       	brne	.-4      	; 0x448 <init_lcd+0x12c>
 44c:	00 c0       	rjmp	.+0      	; 0x44e <init_lcd+0x132>
 44e:	00 00       	nop
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	0e 94 4c 01 	call	0x298	; 0x298 <commandWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 458:	8f ed       	ldi	r24, 0xDF	; 223
 45a:	9e e2       	ldi	r25, 0x2E	; 46
 45c:	01 97       	sbiw	r24, 0x01	; 1
 45e:	f1 f7       	brne	.-4      	; 0x45c <init_lcd+0x140>
 460:	00 c0       	rjmp	.+0      	; 0x462 <init_lcd+0x146>
 462:	00 00       	nop
 464:	86 e0       	ldi	r24, 0x06	; 6
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	0e 94 4c 01 	call	0x298	; 0x298 <commandWrite>
 46c:	8f e9       	ldi	r24, 0x9F	; 159
 46e:	9f e0       	ldi	r25, 0x0F	; 15
 470:	01 97       	sbiw	r24, 0x01	; 1
 472:	f1 f7       	brne	.-4      	; 0x470 <init_lcd+0x154>
 474:	00 c0       	rjmp	.+0      	; 0x476 <init_lcd+0x15a>
 476:	00 00       	nop
 478:	08 95       	ret

0000047a <main>:
 47a:	2f ef       	ldi	r18, 0xFF	; 255
 47c:	89 e6       	ldi	r24, 0x69	; 105
 47e:	98 e1       	ldi	r25, 0x18	; 24
 480:	21 50       	subi	r18, 0x01	; 1
 482:	80 40       	sbci	r24, 0x00	; 0
 484:	90 40       	sbci	r25, 0x00	; 0
 486:	e1 f7       	brne	.-8      	; 0x480 <main+0x6>
 488:	00 c0       	rjmp	.+0      	; 0x48a <main+0x10>
 48a:	00 00       	nop
	// Ladezeit für das Aufstarten der Spannungsversorguung
	_delay_ms(500);

	// Einstellung für Bildschirm
	static FILE fd_lcd = FDEV_SETUP_STREAM(lcd_putchar, NULL, _FDEV_SETUP_WRITE);
	stdout = &fd_lcd;
 48c:	80 e0       	ldi	r24, 0x00	; 0
 48e:	91 e0       	ldi	r25, 0x01	; 1
 490:	90 93 2d 01 	sts	0x012D, r25
 494:	80 93 2c 01 	sts	0x012C, r24
	
	// Peripheriegeräte und Funktionen laden
	init_lcd();
 498:	0e 94 8e 01 	call	0x31c	; 0x31c <init_lcd>
	init_encoder();
 49c:	0e 94 53 00 	call	0xa6	; 0xa6 <init_encoder>
	init_ISR();
 4a0:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <init_ISR>
 4a4:	2f ef       	ldi	r18, 0xFF	; 255
 4a6:	81 ee       	ldi	r24, 0xE1	; 225
 4a8:	94 e0       	ldi	r25, 0x04	; 4
 4aa:	21 50       	subi	r18, 0x01	; 1
 4ac:	80 40       	sbci	r24, 0x00	; 0
 4ae:	90 40       	sbci	r25, 0x00	; 0
 4b0:	e1 f7       	brne	.-8      	; 0x4aa <main+0x30>
 4b2:	00 c0       	rjmp	.+0      	; 0x4b4 <main+0x3a>
 4b4:	00 00       	nop
	//while (!read_buttons());
	//LoadMenu(MainMenu);
		
	_delay_ms(100);
	
	int d = 0;
 4b6:	c0 e0       	ldi	r28, 0x00	; 0
 4b8:	d0 e0       	ldi	r29, 0x00	; 0

	while(1)
	{
		lcd_cursor_addr(LINE1);
		printf("Timer:%i",d++);
 4ba:	0f 2e       	mov	r0, r31
 4bc:	fe e0       	ldi	r31, 0x0E	; 14
 4be:	ef 2e       	mov	r14, r31
 4c0:	f1 e0       	ldi	r31, 0x01	; 1
 4c2:	ff 2e       	mov	r15, r31
 4c4:	f0 2d       	mov	r31, r0
		lcd_cursor_addr(LINE2);
		printf("Counter:%i",timercounter);
 4c6:	07 e1       	ldi	r16, 0x17	; 23
 4c8:	11 e0       	ldi	r17, 0x01	; 1
	
	int d = 0;

	while(1)
	{
		lcd_cursor_addr(LINE1);
 4ca:	80 e0       	ldi	r24, 0x00	; 0
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	0e 94 57 01 	call	0x2ae	; 0x2ae <lcd_cursor_addr>
		printf("Timer:%i",d++);
 4d2:	6e 01       	movw	r12, r28
 4d4:	2f ef       	ldi	r18, 0xFF	; 255
 4d6:	c2 1a       	sub	r12, r18
 4d8:	d2 0a       	sbc	r13, r18
 4da:	df 93       	push	r29
 4dc:	cf 93       	push	r28
 4de:	ff 92       	push	r15
 4e0:	ef 92       	push	r14
 4e2:	0e 94 be 02 	call	0x57c	; 0x57c <printf>
		lcd_cursor_addr(LINE2);
 4e6:	80 e4       	ldi	r24, 0x40	; 64
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	0e 94 57 01 	call	0x2ae	; 0x2ae <lcd_cursor_addr>
		printf("Counter:%i",timercounter);
 4ee:	1f 92       	push	r1
 4f0:	1f 92       	push	r1
 4f2:	1f 93       	push	r17
 4f4:	0f 93       	push	r16
 4f6:	0e 94 be 02 	call	0x57c	; 0x57c <printf>
		
		enc_delta = encode_read2();
 4fa:	0e 94 7e 00 	call	0xfc	; 0xfc <encode_read2>
 4fe:	80 93 29 01 	sts	0x0129, r24
		controlLED();
 502:	0e 94 88 00 	call	0x110	; 0x110 <controlLED>
 506:	2f ef       	ldi	r18, 0xFF	; 255
 508:	83 ed       	ldi	r24, 0xD3	; 211
 50a:	90 e3       	ldi	r25, 0x30	; 48
 50c:	21 50       	subi	r18, 0x01	; 1
 50e:	80 40       	sbci	r24, 0x00	; 0
 510:	90 40       	sbci	r25, 0x00	; 0
 512:	e1 f7       	brne	.-8      	; 0x50c <main+0x92>
 514:	00 c0       	rjmp	.+0      	; 0x516 <main+0x9c>
 516:	00 00       	nop
	int d = 0;

	while(1)
	{
		lcd_cursor_addr(LINE1);
		printf("Timer:%i",d++);
 518:	8d b7       	in	r24, 0x3d	; 61
 51a:	9e b7       	in	r25, 0x3e	; 62
 51c:	08 96       	adiw	r24, 0x08	; 8
 51e:	0f b6       	in	r0, 0x3f	; 63
 520:	f8 94       	cli
 522:	9e bf       	out	0x3e, r25	; 62
 524:	0f be       	out	0x3f, r0	; 63
 526:	8d bf       	out	0x3d, r24	; 61
 528:	e6 01       	movw	r28, r12
 52a:	cf cf       	rjmp	.-98     	; 0x4ca <main+0x50>

0000052c <__divmodhi4>:
 52c:	97 fb       	bst	r25, 7
 52e:	07 2e       	mov	r0, r23
 530:	16 f4       	brtc	.+4      	; 0x536 <__divmodhi4+0xa>
 532:	00 94       	com	r0
 534:	07 d0       	rcall	.+14     	; 0x544 <__divmodhi4_neg1>
 536:	77 fd       	sbrc	r23, 7
 538:	09 d0       	rcall	.+18     	; 0x54c <__divmodhi4_neg2>
 53a:	0e 94 aa 02 	call	0x554	; 0x554 <__udivmodhi4>
 53e:	07 fc       	sbrc	r0, 7
 540:	05 d0       	rcall	.+10     	; 0x54c <__divmodhi4_neg2>
 542:	3e f4       	brtc	.+14     	; 0x552 <__divmodhi4_exit>

00000544 <__divmodhi4_neg1>:
 544:	90 95       	com	r25
 546:	81 95       	neg	r24
 548:	9f 4f       	sbci	r25, 0xFF	; 255
 54a:	08 95       	ret

0000054c <__divmodhi4_neg2>:
 54c:	70 95       	com	r23
 54e:	61 95       	neg	r22
 550:	7f 4f       	sbci	r23, 0xFF	; 255

00000552 <__divmodhi4_exit>:
 552:	08 95       	ret

00000554 <__udivmodhi4>:
 554:	aa 1b       	sub	r26, r26
 556:	bb 1b       	sub	r27, r27
 558:	51 e1       	ldi	r21, 0x11	; 17
 55a:	07 c0       	rjmp	.+14     	; 0x56a <__udivmodhi4_ep>

0000055c <__udivmodhi4_loop>:
 55c:	aa 1f       	adc	r26, r26
 55e:	bb 1f       	adc	r27, r27
 560:	a6 17       	cp	r26, r22
 562:	b7 07       	cpc	r27, r23
 564:	10 f0       	brcs	.+4      	; 0x56a <__udivmodhi4_ep>
 566:	a6 1b       	sub	r26, r22
 568:	b7 0b       	sbc	r27, r23

0000056a <__udivmodhi4_ep>:
 56a:	88 1f       	adc	r24, r24
 56c:	99 1f       	adc	r25, r25
 56e:	5a 95       	dec	r21
 570:	a9 f7       	brne	.-22     	; 0x55c <__udivmodhi4_loop>
 572:	80 95       	com	r24
 574:	90 95       	com	r25
 576:	bc 01       	movw	r22, r24
 578:	cd 01       	movw	r24, r26
 57a:	08 95       	ret

0000057c <printf>:
 57c:	a0 e0       	ldi	r26, 0x00	; 0
 57e:	b0 e0       	ldi	r27, 0x00	; 0
 580:	e4 ec       	ldi	r30, 0xC4	; 196
 582:	f2 e0       	ldi	r31, 0x02	; 2
 584:	0c 94 62 05 	jmp	0xac4	; 0xac4 <__prologue_saves__+0x20>
 588:	ae 01       	movw	r20, r28
 58a:	4b 5f       	subi	r20, 0xFB	; 251
 58c:	5f 4f       	sbci	r21, 0xFF	; 255
 58e:	fa 01       	movw	r30, r20
 590:	61 91       	ld	r22, Z+
 592:	71 91       	ld	r23, Z+
 594:	af 01       	movw	r20, r30
 596:	80 91 2c 01 	lds	r24, 0x012C
 59a:	90 91 2d 01 	lds	r25, 0x012D
 59e:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <vfprintf>
 5a2:	e2 e0       	ldi	r30, 0x02	; 2
 5a4:	0c 94 7e 05 	jmp	0xafc	; 0xafc <__epilogue_restores__+0x20>

000005a8 <vfprintf>:
 5a8:	ac e0       	ldi	r26, 0x0C	; 12
 5aa:	b0 e0       	ldi	r27, 0x00	; 0
 5ac:	ea ed       	ldi	r30, 0xDA	; 218
 5ae:	f2 e0       	ldi	r31, 0x02	; 2
 5b0:	0c 94 52 05 	jmp	0xaa4	; 0xaa4 <__prologue_saves__>
 5b4:	7c 01       	movw	r14, r24
 5b6:	6b 01       	movw	r12, r22
 5b8:	8a 01       	movw	r16, r20
 5ba:	fc 01       	movw	r30, r24
 5bc:	17 82       	std	Z+7, r1	; 0x07
 5be:	16 82       	std	Z+6, r1	; 0x06
 5c0:	83 81       	ldd	r24, Z+3	; 0x03
 5c2:	81 ff       	sbrs	r24, 1
 5c4:	bd c1       	rjmp	.+890    	; 0x940 <__stack+0x41>
 5c6:	ce 01       	movw	r24, r28
 5c8:	01 96       	adiw	r24, 0x01	; 1
 5ca:	4c 01       	movw	r8, r24
 5cc:	f7 01       	movw	r30, r14
 5ce:	93 81       	ldd	r25, Z+3	; 0x03
 5d0:	f6 01       	movw	r30, r12
 5d2:	93 fd       	sbrc	r25, 3
 5d4:	85 91       	lpm	r24, Z+
 5d6:	93 ff       	sbrs	r25, 3
 5d8:	81 91       	ld	r24, Z+
 5da:	6f 01       	movw	r12, r30
 5dc:	88 23       	and	r24, r24
 5de:	09 f4       	brne	.+2      	; 0x5e2 <vfprintf+0x3a>
 5e0:	ab c1       	rjmp	.+854    	; 0x938 <__stack+0x39>
 5e2:	85 32       	cpi	r24, 0x25	; 37
 5e4:	39 f4       	brne	.+14     	; 0x5f4 <vfprintf+0x4c>
 5e6:	93 fd       	sbrc	r25, 3
 5e8:	85 91       	lpm	r24, Z+
 5ea:	93 ff       	sbrs	r25, 3
 5ec:	81 91       	ld	r24, Z+
 5ee:	6f 01       	movw	r12, r30
 5f0:	85 32       	cpi	r24, 0x25	; 37
 5f2:	29 f4       	brne	.+10     	; 0x5fe <vfprintf+0x56>
 5f4:	b7 01       	movw	r22, r14
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	0e 94 bc 04 	call	0x978	; 0x978 <fputc>
 5fc:	e7 cf       	rjmp	.-50     	; 0x5cc <vfprintf+0x24>
 5fe:	51 2c       	mov	r5, r1
 600:	31 2c       	mov	r3, r1
 602:	20 e0       	ldi	r18, 0x00	; 0
 604:	20 32       	cpi	r18, 0x20	; 32
 606:	a0 f4       	brcc	.+40     	; 0x630 <vfprintf+0x88>
 608:	8b 32       	cpi	r24, 0x2B	; 43
 60a:	69 f0       	breq	.+26     	; 0x626 <vfprintf+0x7e>
 60c:	30 f4       	brcc	.+12     	; 0x61a <vfprintf+0x72>
 60e:	80 32       	cpi	r24, 0x20	; 32
 610:	59 f0       	breq	.+22     	; 0x628 <vfprintf+0x80>
 612:	83 32       	cpi	r24, 0x23	; 35
 614:	69 f4       	brne	.+26     	; 0x630 <vfprintf+0x88>
 616:	20 61       	ori	r18, 0x10	; 16
 618:	2c c0       	rjmp	.+88     	; 0x672 <vfprintf+0xca>
 61a:	8d 32       	cpi	r24, 0x2D	; 45
 61c:	39 f0       	breq	.+14     	; 0x62c <vfprintf+0x84>
 61e:	80 33       	cpi	r24, 0x30	; 48
 620:	39 f4       	brne	.+14     	; 0x630 <vfprintf+0x88>
 622:	21 60       	ori	r18, 0x01	; 1
 624:	26 c0       	rjmp	.+76     	; 0x672 <vfprintf+0xca>
 626:	22 60       	ori	r18, 0x02	; 2
 628:	24 60       	ori	r18, 0x04	; 4
 62a:	23 c0       	rjmp	.+70     	; 0x672 <vfprintf+0xca>
 62c:	28 60       	ori	r18, 0x08	; 8
 62e:	21 c0       	rjmp	.+66     	; 0x672 <vfprintf+0xca>
 630:	27 fd       	sbrc	r18, 7
 632:	27 c0       	rjmp	.+78     	; 0x682 <vfprintf+0xda>
 634:	30 ed       	ldi	r19, 0xD0	; 208
 636:	38 0f       	add	r19, r24
 638:	3a 30       	cpi	r19, 0x0A	; 10
 63a:	78 f4       	brcc	.+30     	; 0x65a <vfprintf+0xb2>
 63c:	26 ff       	sbrs	r18, 6
 63e:	06 c0       	rjmp	.+12     	; 0x64c <vfprintf+0xa4>
 640:	fa e0       	ldi	r31, 0x0A	; 10
 642:	5f 9e       	mul	r5, r31
 644:	30 0d       	add	r19, r0
 646:	11 24       	eor	r1, r1
 648:	53 2e       	mov	r5, r19
 64a:	13 c0       	rjmp	.+38     	; 0x672 <vfprintf+0xca>
 64c:	8a e0       	ldi	r24, 0x0A	; 10
 64e:	38 9e       	mul	r3, r24
 650:	30 0d       	add	r19, r0
 652:	11 24       	eor	r1, r1
 654:	33 2e       	mov	r3, r19
 656:	20 62       	ori	r18, 0x20	; 32
 658:	0c c0       	rjmp	.+24     	; 0x672 <vfprintf+0xca>
 65a:	8e 32       	cpi	r24, 0x2E	; 46
 65c:	21 f4       	brne	.+8      	; 0x666 <vfprintf+0xbe>
 65e:	26 fd       	sbrc	r18, 6
 660:	6b c1       	rjmp	.+726    	; 0x938 <__stack+0x39>
 662:	20 64       	ori	r18, 0x40	; 64
 664:	06 c0       	rjmp	.+12     	; 0x672 <vfprintf+0xca>
 666:	8c 36       	cpi	r24, 0x6C	; 108
 668:	11 f4       	brne	.+4      	; 0x66e <vfprintf+0xc6>
 66a:	20 68       	ori	r18, 0x80	; 128
 66c:	02 c0       	rjmp	.+4      	; 0x672 <vfprintf+0xca>
 66e:	88 36       	cpi	r24, 0x68	; 104
 670:	41 f4       	brne	.+16     	; 0x682 <vfprintf+0xda>
 672:	f6 01       	movw	r30, r12
 674:	93 fd       	sbrc	r25, 3
 676:	85 91       	lpm	r24, Z+
 678:	93 ff       	sbrs	r25, 3
 67a:	81 91       	ld	r24, Z+
 67c:	6f 01       	movw	r12, r30
 67e:	81 11       	cpse	r24, r1
 680:	c1 cf       	rjmp	.-126    	; 0x604 <vfprintf+0x5c>
 682:	98 2f       	mov	r25, r24
 684:	9f 7d       	andi	r25, 0xDF	; 223
 686:	95 54       	subi	r25, 0x45	; 69
 688:	93 30       	cpi	r25, 0x03	; 3
 68a:	28 f4       	brcc	.+10     	; 0x696 <vfprintf+0xee>
 68c:	0c 5f       	subi	r16, 0xFC	; 252
 68e:	1f 4f       	sbci	r17, 0xFF	; 255
 690:	ff e3       	ldi	r31, 0x3F	; 63
 692:	f9 83       	std	Y+1, r31	; 0x01
 694:	0d c0       	rjmp	.+26     	; 0x6b0 <vfprintf+0x108>
 696:	83 36       	cpi	r24, 0x63	; 99
 698:	31 f0       	breq	.+12     	; 0x6a6 <vfprintf+0xfe>
 69a:	83 37       	cpi	r24, 0x73	; 115
 69c:	71 f0       	breq	.+28     	; 0x6ba <vfprintf+0x112>
 69e:	83 35       	cpi	r24, 0x53	; 83
 6a0:	09 f0       	breq	.+2      	; 0x6a4 <vfprintf+0xfc>
 6a2:	5b c0       	rjmp	.+182    	; 0x75a <vfprintf+0x1b2>
 6a4:	22 c0       	rjmp	.+68     	; 0x6ea <vfprintf+0x142>
 6a6:	f8 01       	movw	r30, r16
 6a8:	80 81       	ld	r24, Z
 6aa:	89 83       	std	Y+1, r24	; 0x01
 6ac:	0e 5f       	subi	r16, 0xFE	; 254
 6ae:	1f 4f       	sbci	r17, 0xFF	; 255
 6b0:	44 24       	eor	r4, r4
 6b2:	43 94       	inc	r4
 6b4:	51 2c       	mov	r5, r1
 6b6:	54 01       	movw	r10, r8
 6b8:	15 c0       	rjmp	.+42     	; 0x6e4 <vfprintf+0x13c>
 6ba:	38 01       	movw	r6, r16
 6bc:	f2 e0       	ldi	r31, 0x02	; 2
 6be:	6f 0e       	add	r6, r31
 6c0:	71 1c       	adc	r7, r1
 6c2:	f8 01       	movw	r30, r16
 6c4:	a0 80       	ld	r10, Z
 6c6:	b1 80       	ldd	r11, Z+1	; 0x01
 6c8:	26 ff       	sbrs	r18, 6
 6ca:	03 c0       	rjmp	.+6      	; 0x6d2 <vfprintf+0x12a>
 6cc:	65 2d       	mov	r22, r5
 6ce:	70 e0       	ldi	r23, 0x00	; 0
 6d0:	02 c0       	rjmp	.+4      	; 0x6d6 <vfprintf+0x12e>
 6d2:	6f ef       	ldi	r22, 0xFF	; 255
 6d4:	7f ef       	ldi	r23, 0xFF	; 255
 6d6:	c5 01       	movw	r24, r10
 6d8:	2c 87       	std	Y+12, r18	; 0x0c
 6da:	0e 94 b1 04 	call	0x962	; 0x962 <strnlen>
 6de:	2c 01       	movw	r4, r24
 6e0:	83 01       	movw	r16, r6
 6e2:	2c 85       	ldd	r18, Y+12	; 0x0c
 6e4:	2f 77       	andi	r18, 0x7F	; 127
 6e6:	22 2e       	mov	r2, r18
 6e8:	17 c0       	rjmp	.+46     	; 0x718 <vfprintf+0x170>
 6ea:	38 01       	movw	r6, r16
 6ec:	f2 e0       	ldi	r31, 0x02	; 2
 6ee:	6f 0e       	add	r6, r31
 6f0:	71 1c       	adc	r7, r1
 6f2:	f8 01       	movw	r30, r16
 6f4:	a0 80       	ld	r10, Z
 6f6:	b1 80       	ldd	r11, Z+1	; 0x01
 6f8:	26 ff       	sbrs	r18, 6
 6fa:	03 c0       	rjmp	.+6      	; 0x702 <vfprintf+0x15a>
 6fc:	65 2d       	mov	r22, r5
 6fe:	70 e0       	ldi	r23, 0x00	; 0
 700:	02 c0       	rjmp	.+4      	; 0x706 <vfprintf+0x15e>
 702:	6f ef       	ldi	r22, 0xFF	; 255
 704:	7f ef       	ldi	r23, 0xFF	; 255
 706:	c5 01       	movw	r24, r10
 708:	2c 87       	std	Y+12, r18	; 0x0c
 70a:	0e 94 a6 04 	call	0x94c	; 0x94c <strnlen_P>
 70e:	2c 01       	movw	r4, r24
 710:	2c 85       	ldd	r18, Y+12	; 0x0c
 712:	20 68       	ori	r18, 0x80	; 128
 714:	22 2e       	mov	r2, r18
 716:	83 01       	movw	r16, r6
 718:	23 fc       	sbrc	r2, 3
 71a:	1b c0       	rjmp	.+54     	; 0x752 <vfprintf+0x1aa>
 71c:	83 2d       	mov	r24, r3
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	48 16       	cp	r4, r24
 722:	59 06       	cpc	r5, r25
 724:	b0 f4       	brcc	.+44     	; 0x752 <vfprintf+0x1aa>
 726:	b7 01       	movw	r22, r14
 728:	80 e2       	ldi	r24, 0x20	; 32
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	0e 94 bc 04 	call	0x978	; 0x978 <fputc>
 730:	3a 94       	dec	r3
 732:	f4 cf       	rjmp	.-24     	; 0x71c <vfprintf+0x174>
 734:	f5 01       	movw	r30, r10
 736:	27 fc       	sbrc	r2, 7
 738:	85 91       	lpm	r24, Z+
 73a:	27 fe       	sbrs	r2, 7
 73c:	81 91       	ld	r24, Z+
 73e:	5f 01       	movw	r10, r30
 740:	b7 01       	movw	r22, r14
 742:	90 e0       	ldi	r25, 0x00	; 0
 744:	0e 94 bc 04 	call	0x978	; 0x978 <fputc>
 748:	31 10       	cpse	r3, r1
 74a:	3a 94       	dec	r3
 74c:	f1 e0       	ldi	r31, 0x01	; 1
 74e:	4f 1a       	sub	r4, r31
 750:	51 08       	sbc	r5, r1
 752:	41 14       	cp	r4, r1
 754:	51 04       	cpc	r5, r1
 756:	71 f7       	brne	.-36     	; 0x734 <vfprintf+0x18c>
 758:	e5 c0       	rjmp	.+458    	; 0x924 <__stack+0x25>
 75a:	84 36       	cpi	r24, 0x64	; 100
 75c:	11 f0       	breq	.+4      	; 0x762 <vfprintf+0x1ba>
 75e:	89 36       	cpi	r24, 0x69	; 105
 760:	39 f5       	brne	.+78     	; 0x7b0 <vfprintf+0x208>
 762:	f8 01       	movw	r30, r16
 764:	27 ff       	sbrs	r18, 7
 766:	07 c0       	rjmp	.+14     	; 0x776 <vfprintf+0x1ce>
 768:	60 81       	ld	r22, Z
 76a:	71 81       	ldd	r23, Z+1	; 0x01
 76c:	82 81       	ldd	r24, Z+2	; 0x02
 76e:	93 81       	ldd	r25, Z+3	; 0x03
 770:	0c 5f       	subi	r16, 0xFC	; 252
 772:	1f 4f       	sbci	r17, 0xFF	; 255
 774:	08 c0       	rjmp	.+16     	; 0x786 <vfprintf+0x1de>
 776:	60 81       	ld	r22, Z
 778:	71 81       	ldd	r23, Z+1	; 0x01
 77a:	07 2e       	mov	r0, r23
 77c:	00 0c       	add	r0, r0
 77e:	88 0b       	sbc	r24, r24
 780:	99 0b       	sbc	r25, r25
 782:	0e 5f       	subi	r16, 0xFE	; 254
 784:	1f 4f       	sbci	r17, 0xFF	; 255
 786:	2f 76       	andi	r18, 0x6F	; 111
 788:	72 2e       	mov	r7, r18
 78a:	97 ff       	sbrs	r25, 7
 78c:	09 c0       	rjmp	.+18     	; 0x7a0 <vfprintf+0x1f8>
 78e:	90 95       	com	r25
 790:	80 95       	com	r24
 792:	70 95       	com	r23
 794:	61 95       	neg	r22
 796:	7f 4f       	sbci	r23, 0xFF	; 255
 798:	8f 4f       	sbci	r24, 0xFF	; 255
 79a:	9f 4f       	sbci	r25, 0xFF	; 255
 79c:	20 68       	ori	r18, 0x80	; 128
 79e:	72 2e       	mov	r7, r18
 7a0:	2a e0       	ldi	r18, 0x0A	; 10
 7a2:	30 e0       	ldi	r19, 0x00	; 0
 7a4:	a4 01       	movw	r20, r8
 7a6:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <__ultoa_invert>
 7aa:	a8 2e       	mov	r10, r24
 7ac:	a8 18       	sub	r10, r8
 7ae:	44 c0       	rjmp	.+136    	; 0x838 <vfprintf+0x290>
 7b0:	85 37       	cpi	r24, 0x75	; 117
 7b2:	29 f4       	brne	.+10     	; 0x7be <vfprintf+0x216>
 7b4:	2f 7e       	andi	r18, 0xEF	; 239
 7b6:	b2 2e       	mov	r11, r18
 7b8:	2a e0       	ldi	r18, 0x0A	; 10
 7ba:	30 e0       	ldi	r19, 0x00	; 0
 7bc:	25 c0       	rjmp	.+74     	; 0x808 <vfprintf+0x260>
 7be:	f2 2f       	mov	r31, r18
 7c0:	f9 7f       	andi	r31, 0xF9	; 249
 7c2:	bf 2e       	mov	r11, r31
 7c4:	8f 36       	cpi	r24, 0x6F	; 111
 7c6:	c1 f0       	breq	.+48     	; 0x7f8 <vfprintf+0x250>
 7c8:	18 f4       	brcc	.+6      	; 0x7d0 <vfprintf+0x228>
 7ca:	88 35       	cpi	r24, 0x58	; 88
 7cc:	79 f0       	breq	.+30     	; 0x7ec <vfprintf+0x244>
 7ce:	b4 c0       	rjmp	.+360    	; 0x938 <__stack+0x39>
 7d0:	80 37       	cpi	r24, 0x70	; 112
 7d2:	19 f0       	breq	.+6      	; 0x7da <vfprintf+0x232>
 7d4:	88 37       	cpi	r24, 0x78	; 120
 7d6:	21 f0       	breq	.+8      	; 0x7e0 <vfprintf+0x238>
 7d8:	af c0       	rjmp	.+350    	; 0x938 <__stack+0x39>
 7da:	2f 2f       	mov	r18, r31
 7dc:	20 61       	ori	r18, 0x10	; 16
 7de:	b2 2e       	mov	r11, r18
 7e0:	b4 fe       	sbrs	r11, 4
 7e2:	0d c0       	rjmp	.+26     	; 0x7fe <vfprintf+0x256>
 7e4:	8b 2d       	mov	r24, r11
 7e6:	84 60       	ori	r24, 0x04	; 4
 7e8:	b8 2e       	mov	r11, r24
 7ea:	09 c0       	rjmp	.+18     	; 0x7fe <vfprintf+0x256>
 7ec:	24 ff       	sbrs	r18, 4
 7ee:	0a c0       	rjmp	.+20     	; 0x804 <vfprintf+0x25c>
 7f0:	9f 2f       	mov	r25, r31
 7f2:	96 60       	ori	r25, 0x06	; 6
 7f4:	b9 2e       	mov	r11, r25
 7f6:	06 c0       	rjmp	.+12     	; 0x804 <vfprintf+0x25c>
 7f8:	28 e0       	ldi	r18, 0x08	; 8
 7fa:	30 e0       	ldi	r19, 0x00	; 0
 7fc:	05 c0       	rjmp	.+10     	; 0x808 <vfprintf+0x260>
 7fe:	20 e1       	ldi	r18, 0x10	; 16
 800:	30 e0       	ldi	r19, 0x00	; 0
 802:	02 c0       	rjmp	.+4      	; 0x808 <vfprintf+0x260>
 804:	20 e1       	ldi	r18, 0x10	; 16
 806:	32 e0       	ldi	r19, 0x02	; 2
 808:	f8 01       	movw	r30, r16
 80a:	b7 fe       	sbrs	r11, 7
 80c:	07 c0       	rjmp	.+14     	; 0x81c <vfprintf+0x274>
 80e:	60 81       	ld	r22, Z
 810:	71 81       	ldd	r23, Z+1	; 0x01
 812:	82 81       	ldd	r24, Z+2	; 0x02
 814:	93 81       	ldd	r25, Z+3	; 0x03
 816:	0c 5f       	subi	r16, 0xFC	; 252
 818:	1f 4f       	sbci	r17, 0xFF	; 255
 81a:	06 c0       	rjmp	.+12     	; 0x828 <vfprintf+0x280>
 81c:	60 81       	ld	r22, Z
 81e:	71 81       	ldd	r23, Z+1	; 0x01
 820:	80 e0       	ldi	r24, 0x00	; 0
 822:	90 e0       	ldi	r25, 0x00	; 0
 824:	0e 5f       	subi	r16, 0xFE	; 254
 826:	1f 4f       	sbci	r17, 0xFF	; 255
 828:	a4 01       	movw	r20, r8
 82a:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <__ultoa_invert>
 82e:	a8 2e       	mov	r10, r24
 830:	a8 18       	sub	r10, r8
 832:	fb 2d       	mov	r31, r11
 834:	ff 77       	andi	r31, 0x7F	; 127
 836:	7f 2e       	mov	r7, r31
 838:	76 fe       	sbrs	r7, 6
 83a:	0b c0       	rjmp	.+22     	; 0x852 <vfprintf+0x2aa>
 83c:	37 2d       	mov	r19, r7
 83e:	3e 7f       	andi	r19, 0xFE	; 254
 840:	a5 14       	cp	r10, r5
 842:	50 f4       	brcc	.+20     	; 0x858 <vfprintf+0x2b0>
 844:	74 fe       	sbrs	r7, 4
 846:	0a c0       	rjmp	.+20     	; 0x85c <vfprintf+0x2b4>
 848:	72 fc       	sbrc	r7, 2
 84a:	08 c0       	rjmp	.+16     	; 0x85c <vfprintf+0x2b4>
 84c:	37 2d       	mov	r19, r7
 84e:	3e 7e       	andi	r19, 0xEE	; 238
 850:	05 c0       	rjmp	.+10     	; 0x85c <vfprintf+0x2b4>
 852:	ba 2c       	mov	r11, r10
 854:	37 2d       	mov	r19, r7
 856:	03 c0       	rjmp	.+6      	; 0x85e <vfprintf+0x2b6>
 858:	ba 2c       	mov	r11, r10
 85a:	01 c0       	rjmp	.+2      	; 0x85e <vfprintf+0x2b6>
 85c:	b5 2c       	mov	r11, r5
 85e:	34 ff       	sbrs	r19, 4
 860:	0d c0       	rjmp	.+26     	; 0x87c <vfprintf+0x2d4>
 862:	fe 01       	movw	r30, r28
 864:	ea 0d       	add	r30, r10
 866:	f1 1d       	adc	r31, r1
 868:	80 81       	ld	r24, Z
 86a:	80 33       	cpi	r24, 0x30	; 48
 86c:	11 f4       	brne	.+4      	; 0x872 <vfprintf+0x2ca>
 86e:	39 7e       	andi	r19, 0xE9	; 233
 870:	09 c0       	rjmp	.+18     	; 0x884 <vfprintf+0x2dc>
 872:	32 ff       	sbrs	r19, 2
 874:	06 c0       	rjmp	.+12     	; 0x882 <vfprintf+0x2da>
 876:	b3 94       	inc	r11
 878:	b3 94       	inc	r11
 87a:	04 c0       	rjmp	.+8      	; 0x884 <vfprintf+0x2dc>
 87c:	83 2f       	mov	r24, r19
 87e:	86 78       	andi	r24, 0x86	; 134
 880:	09 f0       	breq	.+2      	; 0x884 <vfprintf+0x2dc>
 882:	b3 94       	inc	r11
 884:	33 fd       	sbrc	r19, 3
 886:	13 c0       	rjmp	.+38     	; 0x8ae <vfprintf+0x306>
 888:	30 ff       	sbrs	r19, 0
 88a:	06 c0       	rjmp	.+12     	; 0x898 <vfprintf+0x2f0>
 88c:	5a 2c       	mov	r5, r10
 88e:	b3 14       	cp	r11, r3
 890:	18 f4       	brcc	.+6      	; 0x898 <vfprintf+0x2f0>
 892:	53 0c       	add	r5, r3
 894:	5b 18       	sub	r5, r11
 896:	b3 2c       	mov	r11, r3
 898:	b3 14       	cp	r11, r3
 89a:	68 f4       	brcc	.+26     	; 0x8b6 <vfprintf+0x30e>
 89c:	b7 01       	movw	r22, r14
 89e:	80 e2       	ldi	r24, 0x20	; 32
 8a0:	90 e0       	ldi	r25, 0x00	; 0
 8a2:	3c 87       	std	Y+12, r19	; 0x0c
 8a4:	0e 94 bc 04 	call	0x978	; 0x978 <fputc>
 8a8:	b3 94       	inc	r11
 8aa:	3c 85       	ldd	r19, Y+12	; 0x0c
 8ac:	f5 cf       	rjmp	.-22     	; 0x898 <vfprintf+0x2f0>
 8ae:	b3 14       	cp	r11, r3
 8b0:	10 f4       	brcc	.+4      	; 0x8b6 <vfprintf+0x30e>
 8b2:	3b 18       	sub	r3, r11
 8b4:	01 c0       	rjmp	.+2      	; 0x8b8 <vfprintf+0x310>
 8b6:	31 2c       	mov	r3, r1
 8b8:	34 ff       	sbrs	r19, 4
 8ba:	12 c0       	rjmp	.+36     	; 0x8e0 <vfprintf+0x338>
 8bc:	b7 01       	movw	r22, r14
 8be:	80 e3       	ldi	r24, 0x30	; 48
 8c0:	90 e0       	ldi	r25, 0x00	; 0
 8c2:	3c 87       	std	Y+12, r19	; 0x0c
 8c4:	0e 94 bc 04 	call	0x978	; 0x978 <fputc>
 8c8:	3c 85       	ldd	r19, Y+12	; 0x0c
 8ca:	32 ff       	sbrs	r19, 2
 8cc:	17 c0       	rjmp	.+46     	; 0x8fc <vfprintf+0x354>
 8ce:	31 fd       	sbrc	r19, 1
 8d0:	03 c0       	rjmp	.+6      	; 0x8d8 <vfprintf+0x330>
 8d2:	88 e7       	ldi	r24, 0x78	; 120
 8d4:	90 e0       	ldi	r25, 0x00	; 0
 8d6:	02 c0       	rjmp	.+4      	; 0x8dc <vfprintf+0x334>
 8d8:	88 e5       	ldi	r24, 0x58	; 88
 8da:	90 e0       	ldi	r25, 0x00	; 0
 8dc:	b7 01       	movw	r22, r14
 8de:	0c c0       	rjmp	.+24     	; 0x8f8 <vfprintf+0x350>
 8e0:	83 2f       	mov	r24, r19
 8e2:	86 78       	andi	r24, 0x86	; 134
 8e4:	59 f0       	breq	.+22     	; 0x8fc <vfprintf+0x354>
 8e6:	31 ff       	sbrs	r19, 1
 8e8:	02 c0       	rjmp	.+4      	; 0x8ee <vfprintf+0x346>
 8ea:	8b e2       	ldi	r24, 0x2B	; 43
 8ec:	01 c0       	rjmp	.+2      	; 0x8f0 <vfprintf+0x348>
 8ee:	80 e2       	ldi	r24, 0x20	; 32
 8f0:	37 fd       	sbrc	r19, 7
 8f2:	8d e2       	ldi	r24, 0x2D	; 45
 8f4:	b7 01       	movw	r22, r14
 8f6:	90 e0       	ldi	r25, 0x00	; 0
 8f8:	0e 94 bc 04 	call	0x978	; 0x978 <fputc>
 8fc:	a5 14       	cp	r10, r5
 8fe:	38 f4       	brcc	.+14     	; 0x90e <__stack+0xf>
 900:	b7 01       	movw	r22, r14
 902:	80 e3       	ldi	r24, 0x30	; 48
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	0e 94 bc 04 	call	0x978	; 0x978 <fputc>
 90a:	5a 94       	dec	r5
 90c:	f7 cf       	rjmp	.-18     	; 0x8fc <vfprintf+0x354>
 90e:	aa 94       	dec	r10
 910:	f4 01       	movw	r30, r8
 912:	ea 0d       	add	r30, r10
 914:	f1 1d       	adc	r31, r1
 916:	80 81       	ld	r24, Z
 918:	b7 01       	movw	r22, r14
 91a:	90 e0       	ldi	r25, 0x00	; 0
 91c:	0e 94 bc 04 	call	0x978	; 0x978 <fputc>
 920:	a1 10       	cpse	r10, r1
 922:	f5 cf       	rjmp	.-22     	; 0x90e <__stack+0xf>
 924:	33 20       	and	r3, r3
 926:	09 f4       	brne	.+2      	; 0x92a <__stack+0x2b>
 928:	51 ce       	rjmp	.-862    	; 0x5cc <vfprintf+0x24>
 92a:	b7 01       	movw	r22, r14
 92c:	80 e2       	ldi	r24, 0x20	; 32
 92e:	90 e0       	ldi	r25, 0x00	; 0
 930:	0e 94 bc 04 	call	0x978	; 0x978 <fputc>
 934:	3a 94       	dec	r3
 936:	f6 cf       	rjmp	.-20     	; 0x924 <__stack+0x25>
 938:	f7 01       	movw	r30, r14
 93a:	86 81       	ldd	r24, Z+6	; 0x06
 93c:	97 81       	ldd	r25, Z+7	; 0x07
 93e:	02 c0       	rjmp	.+4      	; 0x944 <__stack+0x45>
 940:	8f ef       	ldi	r24, 0xFF	; 255
 942:	9f ef       	ldi	r25, 0xFF	; 255
 944:	2c 96       	adiw	r28, 0x0c	; 12
 946:	e2 e1       	ldi	r30, 0x12	; 18
 948:	0c 94 6e 05 	jmp	0xadc	; 0xadc <__epilogue_restores__>

0000094c <strnlen_P>:
 94c:	fc 01       	movw	r30, r24
 94e:	05 90       	lpm	r0, Z+
 950:	61 50       	subi	r22, 0x01	; 1
 952:	70 40       	sbci	r23, 0x00	; 0
 954:	01 10       	cpse	r0, r1
 956:	d8 f7       	brcc	.-10     	; 0x94e <strnlen_P+0x2>
 958:	80 95       	com	r24
 95a:	90 95       	com	r25
 95c:	8e 0f       	add	r24, r30
 95e:	9f 1f       	adc	r25, r31
 960:	08 95       	ret

00000962 <strnlen>:
 962:	fc 01       	movw	r30, r24
 964:	61 50       	subi	r22, 0x01	; 1
 966:	70 40       	sbci	r23, 0x00	; 0
 968:	01 90       	ld	r0, Z+
 96a:	01 10       	cpse	r0, r1
 96c:	d8 f7       	brcc	.-10     	; 0x964 <strnlen+0x2>
 96e:	80 95       	com	r24
 970:	90 95       	com	r25
 972:	8e 0f       	add	r24, r30
 974:	9f 1f       	adc	r25, r31
 976:	08 95       	ret

00000978 <fputc>:
 978:	0f 93       	push	r16
 97a:	1f 93       	push	r17
 97c:	cf 93       	push	r28
 97e:	df 93       	push	r29
 980:	fb 01       	movw	r30, r22
 982:	23 81       	ldd	r18, Z+3	; 0x03
 984:	21 fd       	sbrc	r18, 1
 986:	03 c0       	rjmp	.+6      	; 0x98e <fputc+0x16>
 988:	8f ef       	ldi	r24, 0xFF	; 255
 98a:	9f ef       	ldi	r25, 0xFF	; 255
 98c:	28 c0       	rjmp	.+80     	; 0x9de <fputc+0x66>
 98e:	22 ff       	sbrs	r18, 2
 990:	16 c0       	rjmp	.+44     	; 0x9be <fputc+0x46>
 992:	46 81       	ldd	r20, Z+6	; 0x06
 994:	57 81       	ldd	r21, Z+7	; 0x07
 996:	24 81       	ldd	r18, Z+4	; 0x04
 998:	35 81       	ldd	r19, Z+5	; 0x05
 99a:	42 17       	cp	r20, r18
 99c:	53 07       	cpc	r21, r19
 99e:	44 f4       	brge	.+16     	; 0x9b0 <fputc+0x38>
 9a0:	a0 81       	ld	r26, Z
 9a2:	b1 81       	ldd	r27, Z+1	; 0x01
 9a4:	9d 01       	movw	r18, r26
 9a6:	2f 5f       	subi	r18, 0xFF	; 255
 9a8:	3f 4f       	sbci	r19, 0xFF	; 255
 9aa:	31 83       	std	Z+1, r19	; 0x01
 9ac:	20 83       	st	Z, r18
 9ae:	8c 93       	st	X, r24
 9b0:	26 81       	ldd	r18, Z+6	; 0x06
 9b2:	37 81       	ldd	r19, Z+7	; 0x07
 9b4:	2f 5f       	subi	r18, 0xFF	; 255
 9b6:	3f 4f       	sbci	r19, 0xFF	; 255
 9b8:	37 83       	std	Z+7, r19	; 0x07
 9ba:	26 83       	std	Z+6, r18	; 0x06
 9bc:	10 c0       	rjmp	.+32     	; 0x9de <fputc+0x66>
 9be:	eb 01       	movw	r28, r22
 9c0:	09 2f       	mov	r16, r25
 9c2:	18 2f       	mov	r17, r24
 9c4:	00 84       	ldd	r0, Z+8	; 0x08
 9c6:	f1 85       	ldd	r31, Z+9	; 0x09
 9c8:	e0 2d       	mov	r30, r0
 9ca:	09 95       	icall
 9cc:	89 2b       	or	r24, r25
 9ce:	e1 f6       	brne	.-72     	; 0x988 <fputc+0x10>
 9d0:	8e 81       	ldd	r24, Y+6	; 0x06
 9d2:	9f 81       	ldd	r25, Y+7	; 0x07
 9d4:	01 96       	adiw	r24, 0x01	; 1
 9d6:	9f 83       	std	Y+7, r25	; 0x07
 9d8:	8e 83       	std	Y+6, r24	; 0x06
 9da:	81 2f       	mov	r24, r17
 9dc:	90 2f       	mov	r25, r16
 9de:	df 91       	pop	r29
 9e0:	cf 91       	pop	r28
 9e2:	1f 91       	pop	r17
 9e4:	0f 91       	pop	r16
 9e6:	08 95       	ret

000009e8 <__ultoa_invert>:
 9e8:	fa 01       	movw	r30, r20
 9ea:	aa 27       	eor	r26, r26
 9ec:	28 30       	cpi	r18, 0x08	; 8
 9ee:	51 f1       	breq	.+84     	; 0xa44 <__ultoa_invert+0x5c>
 9f0:	20 31       	cpi	r18, 0x10	; 16
 9f2:	81 f1       	breq	.+96     	; 0xa54 <__ultoa_invert+0x6c>
 9f4:	e8 94       	clt
 9f6:	6f 93       	push	r22
 9f8:	6e 7f       	andi	r22, 0xFE	; 254
 9fa:	6e 5f       	subi	r22, 0xFE	; 254
 9fc:	7f 4f       	sbci	r23, 0xFF	; 255
 9fe:	8f 4f       	sbci	r24, 0xFF	; 255
 a00:	9f 4f       	sbci	r25, 0xFF	; 255
 a02:	af 4f       	sbci	r26, 0xFF	; 255
 a04:	b1 e0       	ldi	r27, 0x01	; 1
 a06:	3e d0       	rcall	.+124    	; 0xa84 <__ultoa_invert+0x9c>
 a08:	b4 e0       	ldi	r27, 0x04	; 4
 a0a:	3c d0       	rcall	.+120    	; 0xa84 <__ultoa_invert+0x9c>
 a0c:	67 0f       	add	r22, r23
 a0e:	78 1f       	adc	r23, r24
 a10:	89 1f       	adc	r24, r25
 a12:	9a 1f       	adc	r25, r26
 a14:	a1 1d       	adc	r26, r1
 a16:	68 0f       	add	r22, r24
 a18:	79 1f       	adc	r23, r25
 a1a:	8a 1f       	adc	r24, r26
 a1c:	91 1d       	adc	r25, r1
 a1e:	a1 1d       	adc	r26, r1
 a20:	6a 0f       	add	r22, r26
 a22:	71 1d       	adc	r23, r1
 a24:	81 1d       	adc	r24, r1
 a26:	91 1d       	adc	r25, r1
 a28:	a1 1d       	adc	r26, r1
 a2a:	20 d0       	rcall	.+64     	; 0xa6c <__ultoa_invert+0x84>
 a2c:	09 f4       	brne	.+2      	; 0xa30 <__ultoa_invert+0x48>
 a2e:	68 94       	set
 a30:	3f 91       	pop	r19
 a32:	2a e0       	ldi	r18, 0x0A	; 10
 a34:	26 9f       	mul	r18, r22
 a36:	11 24       	eor	r1, r1
 a38:	30 19       	sub	r19, r0
 a3a:	30 5d       	subi	r19, 0xD0	; 208
 a3c:	31 93       	st	Z+, r19
 a3e:	de f6       	brtc	.-74     	; 0x9f6 <__ultoa_invert+0xe>
 a40:	cf 01       	movw	r24, r30
 a42:	08 95       	ret
 a44:	46 2f       	mov	r20, r22
 a46:	47 70       	andi	r20, 0x07	; 7
 a48:	40 5d       	subi	r20, 0xD0	; 208
 a4a:	41 93       	st	Z+, r20
 a4c:	b3 e0       	ldi	r27, 0x03	; 3
 a4e:	0f d0       	rcall	.+30     	; 0xa6e <__ultoa_invert+0x86>
 a50:	c9 f7       	brne	.-14     	; 0xa44 <__ultoa_invert+0x5c>
 a52:	f6 cf       	rjmp	.-20     	; 0xa40 <__ultoa_invert+0x58>
 a54:	46 2f       	mov	r20, r22
 a56:	4f 70       	andi	r20, 0x0F	; 15
 a58:	40 5d       	subi	r20, 0xD0	; 208
 a5a:	4a 33       	cpi	r20, 0x3A	; 58
 a5c:	18 f0       	brcs	.+6      	; 0xa64 <__ultoa_invert+0x7c>
 a5e:	49 5d       	subi	r20, 0xD9	; 217
 a60:	31 fd       	sbrc	r19, 1
 a62:	40 52       	subi	r20, 0x20	; 32
 a64:	41 93       	st	Z+, r20
 a66:	02 d0       	rcall	.+4      	; 0xa6c <__ultoa_invert+0x84>
 a68:	a9 f7       	brne	.-22     	; 0xa54 <__ultoa_invert+0x6c>
 a6a:	ea cf       	rjmp	.-44     	; 0xa40 <__ultoa_invert+0x58>
 a6c:	b4 e0       	ldi	r27, 0x04	; 4
 a6e:	a6 95       	lsr	r26
 a70:	97 95       	ror	r25
 a72:	87 95       	ror	r24
 a74:	77 95       	ror	r23
 a76:	67 95       	ror	r22
 a78:	ba 95       	dec	r27
 a7a:	c9 f7       	brne	.-14     	; 0xa6e <__ultoa_invert+0x86>
 a7c:	00 97       	sbiw	r24, 0x00	; 0
 a7e:	61 05       	cpc	r22, r1
 a80:	71 05       	cpc	r23, r1
 a82:	08 95       	ret
 a84:	9b 01       	movw	r18, r22
 a86:	ac 01       	movw	r20, r24
 a88:	0a 2e       	mov	r0, r26
 a8a:	06 94       	lsr	r0
 a8c:	57 95       	ror	r21
 a8e:	47 95       	ror	r20
 a90:	37 95       	ror	r19
 a92:	27 95       	ror	r18
 a94:	ba 95       	dec	r27
 a96:	c9 f7       	brne	.-14     	; 0xa8a <__ultoa_invert+0xa2>
 a98:	62 0f       	add	r22, r18
 a9a:	73 1f       	adc	r23, r19
 a9c:	84 1f       	adc	r24, r20
 a9e:	95 1f       	adc	r25, r21
 aa0:	a0 1d       	adc	r26, r0
 aa2:	08 95       	ret

00000aa4 <__prologue_saves__>:
 aa4:	2f 92       	push	r2
 aa6:	3f 92       	push	r3
 aa8:	4f 92       	push	r4
 aaa:	5f 92       	push	r5
 aac:	6f 92       	push	r6
 aae:	7f 92       	push	r7
 ab0:	8f 92       	push	r8
 ab2:	9f 92       	push	r9
 ab4:	af 92       	push	r10
 ab6:	bf 92       	push	r11
 ab8:	cf 92       	push	r12
 aba:	df 92       	push	r13
 abc:	ef 92       	push	r14
 abe:	ff 92       	push	r15
 ac0:	0f 93       	push	r16
 ac2:	1f 93       	push	r17
 ac4:	cf 93       	push	r28
 ac6:	df 93       	push	r29
 ac8:	cd b7       	in	r28, 0x3d	; 61
 aca:	de b7       	in	r29, 0x3e	; 62
 acc:	ca 1b       	sub	r28, r26
 ace:	db 0b       	sbc	r29, r27
 ad0:	0f b6       	in	r0, 0x3f	; 63
 ad2:	f8 94       	cli
 ad4:	de bf       	out	0x3e, r29	; 62
 ad6:	0f be       	out	0x3f, r0	; 63
 ad8:	cd bf       	out	0x3d, r28	; 61
 ada:	09 94       	ijmp

00000adc <__epilogue_restores__>:
 adc:	2a 88       	ldd	r2, Y+18	; 0x12
 ade:	39 88       	ldd	r3, Y+17	; 0x11
 ae0:	48 88       	ldd	r4, Y+16	; 0x10
 ae2:	5f 84       	ldd	r5, Y+15	; 0x0f
 ae4:	6e 84       	ldd	r6, Y+14	; 0x0e
 ae6:	7d 84       	ldd	r7, Y+13	; 0x0d
 ae8:	8c 84       	ldd	r8, Y+12	; 0x0c
 aea:	9b 84       	ldd	r9, Y+11	; 0x0b
 aec:	aa 84       	ldd	r10, Y+10	; 0x0a
 aee:	b9 84       	ldd	r11, Y+9	; 0x09
 af0:	c8 84       	ldd	r12, Y+8	; 0x08
 af2:	df 80       	ldd	r13, Y+7	; 0x07
 af4:	ee 80       	ldd	r14, Y+6	; 0x06
 af6:	fd 80       	ldd	r15, Y+5	; 0x05
 af8:	0c 81       	ldd	r16, Y+4	; 0x04
 afa:	1b 81       	ldd	r17, Y+3	; 0x03
 afc:	aa 81       	ldd	r26, Y+2	; 0x02
 afe:	b9 81       	ldd	r27, Y+1	; 0x01
 b00:	ce 0f       	add	r28, r30
 b02:	d1 1d       	adc	r29, r1
 b04:	0f b6       	in	r0, 0x3f	; 63
 b06:	f8 94       	cli
 b08:	de bf       	out	0x3e, r29	; 62
 b0a:	0f be       	out	0x3f, r0	; 63
 b0c:	cd bf       	out	0x3d, r28	; 61
 b0e:	ed 01       	movw	r28, r26
 b10:	08 95       	ret

00000b12 <_exit>:
 b12:	f8 94       	cli

00000b14 <__stop_program>:
 b14:	ff cf       	rjmp	.-2      	; 0xb14 <__stop_program>
