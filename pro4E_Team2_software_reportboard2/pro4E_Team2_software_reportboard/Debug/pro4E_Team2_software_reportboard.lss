
pro4E_Team2_software_reportboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000174  00800100  00000cec  00000d80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800274  00800274  00000ef4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000ef4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f50  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00000f90  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017ba  00000000  00000000  000010f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000856  00000000  00000000  000028aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007c2  00000000  00000000  00003100  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000354  00000000  00000000  000038c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004e3  00000000  00000000  00003c18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008e9  00000000  00000000  000040fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  000049e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 94 00 	jmp	0x128	; 0x128 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ee       	ldi	r30, 0xEC	; 236
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 37       	cpi	r26, 0x74	; 116
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a4 e7       	ldi	r26, 0x74	; 116
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 38       	cpi	r26, 0x87	; 135
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <main>
  9e:	0c 94 74 06 	jmp	0xce8	; 0xce8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_encoder>:
volatile int button;


void init_encoder()
{
	EncDDR |= (1<<EncPIN_LED_BT)|(1<<EncPIN_LED3)|(1<<EncPIN_LED2)|(1<<EncPIN_LED1);   //intput 0, output 1
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	8f 60       	ori	r24, 0x0F	; 15
  aa:	8a b9       	out	0x0a, r24	; 10
	EncPort = (1<<EncPIN_A)|(1<<EncPIN_B)|(1<<EncPIN_LED_BT); //enable pull ups
  ac:	81 e6       	ldi	r24, 0x61	; 97
  ae:	8b b9       	out	0x0b, r24	; 11
  b0:	08 95       	ret

000000b2 <check_button>:

void check_button(void)										//entpreller
{
	static char old_button;
	//static int autorepeat;
	char current_button = ~Encpins;							//liest invertierte PINS ein, weil Pull-Up
  b2:	89 b1       	in	r24, 0x09	; 9
	button |= ~old_button & current_button & BUTTON;		//falls zustand gewechselt: button == 1 	
  b4:	20 91 79 02 	lds	r18, 0x0279
  b8:	30 91 7a 02 	lds	r19, 0x027A

void check_button(void)										//entpreller
{
	static char old_button;
	//static int autorepeat;
	char current_button = ~Encpins;							//liest invertierte PINS ein, weil Pull-Up
  bc:	80 95       	com	r24
	button |= ~old_button & current_button & BUTTON;		//falls zustand gewechselt: button == 1 	
  be:	80 71       	andi	r24, 0x10	; 16
  c0:	a9 01       	movw	r20, r18
  c2:	48 2b       	or	r20, r24
  c4:	ca 01       	movw	r24, r20
  c6:	90 93 7a 02 	sts	0x027A, r25
  ca:	80 93 79 02 	sts	0x0279, r24
  ce:	08 95       	ret

000000d0 <erz_enc_delta>:

void erz_enc_delta(){
		int new, diff;
		
		new = 0;
		if( PHASE_A )
  d0:	4e 9b       	sbis	0x09, 6	; 9
  d2:	03 c0       	rjmp	.+6      	; 0xda <erz_enc_delta+0xa>
		new = 3;
  d4:	23 e0       	ldi	r18, 0x03	; 3
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	02 c0       	rjmp	.+4      	; 0xde <erz_enc_delta+0xe>
}

void erz_enc_delta(){
		int new, diff;
		
		new = 0;
  da:	20 e0       	ldi	r18, 0x00	; 0
  dc:	30 e0       	ldi	r19, 0x00	; 0
		if( PHASE_A )
		new = 3;
		if( PHASE_B )
  de:	4d 9b       	sbis	0x09, 5	; 9
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <erz_enc_delta+0x16>
		new ^= 1;                   // convert gray to binary
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	28 27       	eor	r18, r24
		diff = last - new;                // difference last - new
  e6:	80 91 74 02 	lds	r24, 0x0274
  ea:	90 91 75 02 	lds	r25, 0x0275
  ee:	82 1b       	sub	r24, r18
  f0:	93 0b       	sbc	r25, r19
		if( diff & 1 ){               // bit 0 = value (1)
  f2:	80 ff       	sbrs	r24, 0
  f4:	11 c0       	rjmp	.+34     	; 0x118 <erz_enc_delta+0x48>
			last = new;                 // store new as next last
  f6:	30 93 75 02 	sts	0x0275, r19
  fa:	20 93 74 02 	sts	0x0274, r18
			enc_delta += (diff & 2) - 1;        // bit 1 = direction (+/-)
  fe:	20 91 7b 02 	lds	r18, 0x027B
 102:	30 91 7c 02 	lds	r19, 0x027C
 106:	82 70       	andi	r24, 0x02	; 2
 108:	99 27       	eor	r25, r25
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	82 0f       	add	r24, r18
 10e:	93 1f       	adc	r25, r19
 110:	90 93 7c 02 	sts	0x027C, r25
 114:	80 93 7b 02 	sts	0x027B, r24
 118:	08 95       	ret

0000011a <init_ISR>:
}

void init_ISR()
{
	//Initialisierung timer interrupt
	TCCR0B = 0b101;					// Prescaler: (Bits|Prescaler) ; (001|0) ; (010|8) ; (011|64) ; (100|256) ; (101|1024)
 11a:	85 e0       	ldi	r24, 0x05	; 5
 11c:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1 << TOIE0);			//enable timer interrupt
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	80 93 6e 00 	sts	0x006E, r24
	sei();
 124:	78 94       	sei
 126:	08 95       	ret

00000128 <__vector_16>:
}

ISR( TIMER0_OVF_vect )				// 1ms for manual movement
{
 128:	1f 92       	push	r1
 12a:	0f 92       	push	r0
 12c:	0f b6       	in	r0, 0x3f	; 63
 12e:	0f 92       	push	r0
 130:	11 24       	eor	r1, r1
 132:	2f 93       	push	r18
 134:	3f 93       	push	r19
 136:	4f 93       	push	r20
 138:	5f 93       	push	r21
 13a:	6f 93       	push	r22
 13c:	7f 93       	push	r23
 13e:	8f 93       	push	r24
 140:	9f 93       	push	r25
 142:	af 93       	push	r26
 144:	bf 93       	push	r27
 146:	ef 93       	push	r30
 148:	ff 93       	push	r31
	erz_enc_delta();
 14a:	0e 94 68 00 	call	0xd0	; 0xd0 <erz_enc_delta>
	check_button();					//schaut ob button gedrückt
 14e:	0e 94 59 00 	call	0xb2	; 0xb2 <check_button>
	//timercounter++;
 152:	ff 91       	pop	r31
 154:	ef 91       	pop	r30
 156:	bf 91       	pop	r27
 158:	af 91       	pop	r26
 15a:	9f 91       	pop	r25
 15c:	8f 91       	pop	r24
 15e:	7f 91       	pop	r23
 160:	6f 91       	pop	r22
 162:	5f 91       	pop	r21
 164:	4f 91       	pop	r20
 166:	3f 91       	pop	r19
 168:	2f 91       	pop	r18
 16a:	0f 90       	pop	r0
 16c:	0f be       	out	0x3f, r0	; 63
 16e:	0f 90       	pop	r0
 170:	1f 90       	pop	r1
 172:	18 95       	reti

00000174 <pushNibble>:
}

//push a nibble of data through the the LCD's DB4~7 pins, clocking with the Enable pin.
static void pushNibble(int value){
  int val_nibble= value & 0x0F;  //clean the value.  (unnecessary)
  digitalWrite(DB0_PORT, DB0_BIT,val_nibble & 1);
 174:	80 ff       	sbrs	r24, 0
 176:	02 c0       	rjmp	.+4      	; 0x17c <pushNibble+0x8>
 178:	42 9a       	sbi	0x08, 2	; 8
 17a:	01 c0       	rjmp	.+2      	; 0x17e <pushNibble+0xa>
 17c:	42 98       	cbi	0x08, 2	; 8
  digitalWrite(DB1_PORT, DB1_BIT,val_nibble>>1 & 1);
 17e:	81 ff       	sbrs	r24, 1
 180:	02 c0       	rjmp	.+4      	; 0x186 <pushNibble+0x12>
 182:	43 9a       	sbi	0x08, 3	; 8
 184:	01 c0       	rjmp	.+2      	; 0x188 <pushNibble+0x14>
 186:	43 98       	cbi	0x08, 3	; 8
  digitalWrite(DB2_PORT, DB2_BIT,val_nibble>>2 & 1);
 188:	82 ff       	sbrs	r24, 2
 18a:	02 c0       	rjmp	.+4      	; 0x190 <pushNibble+0x1c>
 18c:	44 9a       	sbi	0x08, 4	; 8
 18e:	01 c0       	rjmp	.+2      	; 0x192 <pushNibble+0x1e>
 190:	44 98       	cbi	0x08, 4	; 8
  digitalWrite(DB3_PORT, DB3_BIT,val_nibble>>3 & 1);
 192:	83 ff       	sbrs	r24, 3
 194:	02 c0       	rjmp	.+4      	; 0x19a <pushNibble+0x26>
 196:	45 9a       	sbi	0x08, 5	; 8
 198:	01 c0       	rjmp	.+2      	; 0x19c <pushNibble+0x28>
 19a:	45 98       	cbi	0x08, 5	; 8

/************ Main Program Code **********************************************************/

//pulse the Enable pin high (for a microsecond).
static void pulseEnablePin(){
  digitalWrite(EN_PORT, EN_BIT, 1);
 19c:	41 9a       	sbi	0x08, 1	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19e:	85 e0       	ldi	r24, 0x05	; 5
 1a0:	8a 95       	dec	r24
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <pushNibble+0x2c>
 1a4:	00 00       	nop
  _delay_us(1);
  digitalWrite(EN_PORT, EN_BIT, 0);
 1a6:	41 98       	cbi	0x08, 1	; 8
 1a8:	08 95       	ret

000001aa <pushByte>:
  digitalWrite(DB3_PORT, DB3_BIT,val_nibble>>3 & 1);
  pulseEnablePin();
}

//push a byte of data through the LCD's DB4~7 pins, in two steps, clocking each with the enable pin.
static void pushByte(int value){
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
 1ae:	ec 01       	movw	r28, r24
  int val_lower = value & 0x0F;
  int val_upper = value >> 4;
  pushNibble(val_upper);
 1b0:	95 95       	asr	r25
 1b2:	87 95       	ror	r24
 1b4:	95 95       	asr	r25
 1b6:	87 95       	ror	r24
 1b8:	95 95       	asr	r25
 1ba:	87 95       	ror	r24
 1bc:	95 95       	asr	r25
 1be:	87 95       	ror	r24
 1c0:	0e 94 ba 00 	call	0x174	; 0x174 <pushNibble>
  pushNibble(val_lower);
 1c4:	ce 01       	movw	r24, r28
 1c6:	8f 70       	andi	r24, 0x0F	; 15
 1c8:	99 27       	eor	r25, r25
 1ca:	0e 94 ba 00 	call	0x174	; 0x174 <pushNibble>
 1ce:	80 e9       	ldi	r24, 0x90	; 144
 1d0:	8a 95       	dec	r24
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <pushByte+0x26>
 1d4:	80 e9       	ldi	r24, 0x90	; 144
 1d6:	8a 95       	dec	r24
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <pushByte+0x2c>
  _delay_us(27);
  _delay_us(27);
}
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	08 95       	ret

000001e0 <commandWrite>:
  pushNibble(nibble);
  _delay_us(27);
}

static void commandWrite(int value) {
  digitalWrite(RS_PORT, RS_BIT, 0);
 1e0:	40 98       	cbi	0x08, 0	; 8
#if USING_RW != 0
  if (USING_RW) { digitalWrite(RW_PORT, RW_BIT, 0); }
#endif
  pushByte(value);
 1e2:	0e 94 d5 00 	call	0x1aa	; 0x1aa <pushByte>
 1e6:	08 95       	ret

000001e8 <commandWriteNibble>:
  _delay_us(27);
  _delay_us(27);
}

static void commandWriteNibble(int nibble) {
  digitalWrite(RS_PORT, RS_BIT, 0);
 1e8:	40 98       	cbi	0x08, 0	; 8
#if USING_RW != 0
  if (USING_RW) { digitalWrite(RW_PORT, RW_BIT, 0); }
#endif
  pushNibble(nibble);
 1ea:	0e 94 ba 00 	call	0x174	; 0x174 <pushNibble>
 1ee:	80 e9       	ldi	r24, 0x90	; 144
 1f0:	8a 95       	dec	r24
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <commandWriteNibble+0x8>
 1f4:	08 95       	ret

000001f6 <lcd_cursor_addr>:
  //Remark: some commands needs additional delay!
}


extern void lcd_cursor_addr(int pos){
  commandWrite(CMD_DDADDR(pos));
 1f6:	8f 77       	andi	r24, 0x7F	; 127
 1f8:	99 27       	eor	r25, r25
 1fa:	80 68       	ori	r24, 0x80	; 128
 1fc:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <commandWrite>
 200:	8f e9       	ldi	r24, 0x9F	; 159
 202:	9f e0       	ldi	r25, 0x0F	; 15
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	f1 f7       	brne	.-4      	; 0x204 <lcd_cursor_addr+0xe>
 208:	00 c0       	rjmp	.+0      	; 0x20a <lcd_cursor_addr+0x14>
 20a:	00 00       	nop
 20c:	08 95       	ret

0000020e <lcd_putchar>:
 * Sends a character to the LCD display.
 * '\n' clears the display after the *next* character
 * '\r' sets the cursor address to begin of 2nd line
 */
int lcd_putchar(char c, FILE *unused)
{
 20e:	cf 93       	push	r28
 210:	c8 2f       	mov	r28, r24
  static char nl_seen;
  if (nl_seen && c != '\n') {
 212:	80 91 76 02 	lds	r24, 0x0276
 216:	88 23       	and	r24, r24
 218:	79 f0       	breq	.+30     	; 0x238 <lcd_putchar+0x2a>
 21a:	ca 30       	cpi	r28, 0x0A	; 10
 21c:	79 f0       	breq	.+30     	; 0x23c <lcd_putchar+0x2e>
  pushByte(value);
}

//send the clear screen command to the LCD
static void clear(){
  commandWrite(lcd_Clear);
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <commandWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 226:	8f e3       	ldi	r24, 0x3F	; 63
 228:	9c e9       	ldi	r25, 0x9C	; 156
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <lcd_putchar+0x1c>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <lcd_putchar+0x22>
 230:	00 00       	nop
{
  static char nl_seen;
  if (nl_seen && c != '\n') {
      // first character after newline, clear display and home cursor.
      clear();
      nl_seen = 0;
 232:	10 92 76 02 	sts	0x0276, r1
 236:	06 c0       	rjmp	.+12     	; 0x244 <lcd_putchar+0x36>
  }
  if (c == '\n') {
 238:	ca 30       	cpi	r28, 0x0A	; 10
 23a:	21 f4       	brne	.+8      	; 0x244 <lcd_putchar+0x36>
      nl_seen = 1;
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	80 93 76 02 	sts	0x0276, r24
 242:	0c c0       	rjmp	.+24     	; 0x25c <lcd_putchar+0x4e>
  }
  else if (c != '\r') {
 244:	cd 30       	cpi	r28, 0x0D	; 13
 246:	31 f0       	breq	.+12     	; 0x254 <lcd_putchar+0x46>
  _delay_us(1000);
}


static void dataWrite(int value) {
  digitalWrite(RS_PORT, RS_BIT, 1);
 248:	40 9a       	sbi	0x08, 0	; 8
#if USING_RW != 0
  if (USING_RW) { digitalWrite(RW_PORT, RW_BIT, 0); }
#endif
  pushByte(value);
 24a:	8c 2f       	mov	r24, r28
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	0e 94 d5 00 	call	0x1aa	; 0x1aa <pushByte>
 252:	04 c0       	rjmp	.+8      	; 0x25c <lcd_putchar+0x4e>
      nl_seen = 1;
  }
  else if (c != '\r') {
      dataWrite(c);
  } else {	
      commandWrite(CMD_DDADDR(64));
 254:	80 ec       	ldi	r24, 0xC0	; 192
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <commandWrite>
  }
  return 0;
}
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	cf 91       	pop	r28
 262:	08 95       	ret

00000264 <init_lcd>:
 264:	2f ef       	ldi	r18, 0xFF	; 255
 266:	81 ee       	ldi	r24, 0xE1	; 225
 268:	94 e0       	ldi	r25, 0x04	; 4
 26a:	21 50       	subi	r18, 0x01	; 1
 26c:	80 40       	sbci	r24, 0x00	; 0
 26e:	90 40       	sbci	r25, 0x00	; 0
 270:	e1 f7       	brne	.-8      	; 0x26a <init_lcd+0x6>
 272:	00 c0       	rjmp	.+0      	; 0x274 <init_lcd+0x10>
 274:	00 00       	nop
// initiatize lcd - cursor and blink settings could be overriden after initializing
void init_lcd() {
//Power-up delay
	_delay_ms(100);
	
  pinMode(EN_PORT, EN_BIT, OUTPUT);
 276:	39 9a       	sbi	0x07, 1	; 7
  pinMode(RS_PORT, RS_BIT, OUTPUT);
 278:	38 9a       	sbi	0x07, 0	; 7
#if USING_RW != 0
  if (USING_RW) { pinMode(RW_PORT, RW_BIT, OUTPUT); }
#endif
  pinMode(DB0_PORT, DB0_BIT,OUTPUT);
 27a:	3a 9a       	sbi	0x07, 2	; 7
  pinMode(DB1_PORT, DB1_BIT,OUTPUT);
 27c:	3b 9a       	sbi	0x07, 3	; 7
  pinMode(DB2_PORT, DB2_BIT,OUTPUT);
 27e:	3c 9a       	sbi	0x07, 4	; 7
  pinMode(DB3_PORT, DB3_BIT,OUTPUT);
 280:	3d 9a       	sbi	0x07, 5	; 7
  digitalWrite(EN_PORT, EN_BIT, 1);
 282:	41 9a       	sbi	0x08, 1	; 8
	
  commandWriteNibble(lcd_FunctionReset);	// first part of reset sequence
 284:	80 e3       	ldi	r24, 0x30	; 48
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <commandWriteNibble>
 28c:	8f e3       	ldi	r24, 0x3F	; 63
 28e:	9c e9       	ldi	r25, 0x9C	; 156
 290:	01 97       	sbiw	r24, 0x01	; 1
 292:	f1 f7       	brne	.-4      	; 0x290 <init_lcd+0x2c>
 294:	00 c0       	rjmp	.+0      	; 0x296 <init_lcd+0x32>
 296:	00 00       	nop
  _delay_ms(10);
  commandWriteNibble(lcd_FunctionReset);	// second part of reset sequence
 298:	80 e3       	ldi	r24, 0x30	; 48
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <commandWriteNibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2a0:	8f e1       	ldi	r24, 0x1F	; 31
 2a2:	93 e0       	ldi	r25, 0x03	; 3
 2a4:	01 97       	sbiw	r24, 0x01	; 1
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <init_lcd+0x40>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <init_lcd+0x46>
 2aa:	00 00       	nop
  _delay_us(200);
  commandWriteNibble(lcd_FunctionReset);	// third part of reset sequence
 2ac:	80 e3       	ldi	r24, 0x30	; 48
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <commandWriteNibble>
 2b4:	8f e1       	ldi	r24, 0x1F	; 31
 2b6:	93 e0       	ldi	r25, 0x03	; 3
 2b8:	01 97       	sbiw	r24, 0x01	; 1
 2ba:	f1 f7       	brne	.-4      	; 0x2b8 <init_lcd+0x54>
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <init_lcd+0x5a>
 2be:	00 00       	nop
  _delay_us(200);							// this delay is omitted in the data sheet
	
	commandWriteNibble(lcd_Home);
 2c0:	82 e0       	ldi	r24, 0x02	; 2
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <commandWriteNibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2c8:	8f e9       	ldi	r24, 0x9F	; 159
 2ca:	9f e0       	ldi	r25, 0x0F	; 15
 2cc:	01 97       	sbiw	r24, 0x01	; 1
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <init_lcd+0x68>
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <init_lcd+0x6e>
 2d2:	00 00       	nop
	_delay_ms(1);
	commandWriteNibble(lcd_Home);
 2d4:	82 e0       	ldi	r24, 0x02	; 2
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <commandWriteNibble>
 2dc:	8f e9       	ldi	r24, 0x9F	; 159
 2de:	9f e0       	ldi	r25, 0x0F	; 15
 2e0:	01 97       	sbiw	r24, 0x01	; 1
 2e2:	f1 f7       	brne	.-4      	; 0x2e0 <init_lcd+0x7c>
 2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <init_lcd+0x82>
 2e6:	00 00       	nop
	_delay_ms(1);
	commandWriteNibble(lcd_DisplayOn);
 2e8:	8c e0       	ldi	r24, 0x0C	; 12
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <commandWriteNibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2f0:	8f e3       	ldi	r24, 0x3F	; 63
 2f2:	91 e0       	ldi	r25, 0x01	; 1
 2f4:	01 97       	sbiw	r24, 0x01	; 1
 2f6:	f1 f7       	brne	.-4      	; 0x2f4 <init_lcd+0x90>
 2f8:	00 c0       	rjmp	.+0      	; 0x2fa <init_lcd+0x96>
 2fa:	00 00       	nop
	_delay_us(80);
	commandWriteNibble(lcd_DisplayOff);
 2fc:	88 e0       	ldi	r24, 0x08	; 8
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <commandWriteNibble>
 304:	8f e3       	ldi	r24, 0x3F	; 63
 306:	91 e0       	ldi	r25, 0x01	; 1
 308:	01 97       	sbiw	r24, 0x01	; 1
 30a:	f1 f7       	brne	.-4      	; 0x308 <init_lcd+0xa4>
 30c:	00 c0       	rjmp	.+0      	; 0x30e <init_lcd+0xaa>
 30e:	00 00       	nop
	_delay_us(80);
	commandWriteNibble(0x00);
 310:	80 e0       	ldi	r24, 0x00	; 0
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <commandWriteNibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 318:	8f e9       	ldi	r24, 0x9F	; 159
 31a:	9f e0       	ldi	r25, 0x0F	; 15
 31c:	01 97       	sbiw	r24, 0x01	; 1
 31e:	f1 f7       	brne	.-4      	; 0x31c <init_lcd+0xb8>
 320:	00 c0       	rjmp	.+0      	; 0x322 <init_lcd+0xbe>
 322:	00 00       	nop
	_delay_ms(1);
	commandWriteNibble(lcd_Clear);
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <commandWriteNibble>
 32c:	8f e7       	ldi	r24, 0x7F	; 127
 32e:	9e e3       	ldi	r25, 0x3E	; 62
 330:	01 97       	sbiw	r24, 0x01	; 1
 332:	f1 f7       	brne	.-4      	; 0x330 <init_lcd+0xcc>
 334:	00 c0       	rjmp	.+0      	; 0x336 <init_lcd+0xd2>
 336:	00 00       	nop
	_delay_ms(4);
	commandWriteNibble(0x00);
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <commandWriteNibble>
 340:	8f e9       	ldi	r24, 0x9F	; 159
 342:	9f e0       	ldi	r25, 0x0F	; 15
 344:	01 97       	sbiw	r24, 0x01	; 1
 346:	f1 f7       	brne	.-4      	; 0x344 <init_lcd+0xe0>
 348:	00 c0       	rjmp	.+0      	; 0x34a <init_lcd+0xe6>
 34a:	00 00       	nop
	_delay_ms(1);
	commandWriteNibble(lcd_EntryMode);
 34c:	86 e0       	ldi	r24, 0x06	; 6
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <commandWriteNibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 354:	8f e3       	ldi	r24, 0x3F	; 63
 356:	91 e0       	ldi	r25, 0x01	; 1
 358:	01 97       	sbiw	r24, 0x01	; 1
 35a:	f1 f7       	brne	.-4      	; 0x358 <init_lcd+0xf4>
 35c:	00 c0       	rjmp	.+0      	; 0x35e <init_lcd+0xfa>
 35e:	00 00       	nop
	_delay_us(80);

  // needed by the LCDs controller
  //this being 2 sets up 4-bit mode.
  commandWriteNibble(lcd_Home);
 360:	82 e0       	ldi	r24, 0x02	; 2
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <commandWriteNibble>
  commandWriteNibble(lcd_Home);
 368:	82 e0       	ldi	r24, 0x02	; 2
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <commandWriteNibble>
  //X=don't care

  int num_lines_ptn = (g_num_lines - 1) << 3;
  int dot_format_ptn = 0x00;      //5x7 dots.  0x04 is 5x10

  commandWrite(num_lines_ptn | dot_format_ptn | 0x20);
 370:	88 e2       	ldi	r24, 0x28	; 40
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <commandWrite>
 378:	8f ee       	ldi	r24, 0xEF	; 239
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	01 97       	sbiw	r24, 0x01	; 1
 37e:	f1 f7       	brne	.-4      	; 0x37c <init_lcd+0x118>
 380:	00 c0       	rjmp	.+0      	; 0x382 <init_lcd+0x11e>
 382:	00 00       	nop
  //The rest of the init is not specific to 4-bit mode.
  //NOTE: we're writing full bytes now, not nibbles.

  // display control:
  // turn display on, cursor off, no blinking
  commandWrite(lcd_DisplayOn);
 384:	8c e0       	ldi	r24, 0x0C	; 12
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <commandWrite>
 38c:	8f ee       	ldi	r24, 0xEF	; 239
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	01 97       	sbiw	r24, 0x01	; 1
 392:	f1 f7       	brne	.-4      	; 0x390 <init_lcd+0x12c>
 394:	00 c0       	rjmp	.+0      	; 0x396 <init_lcd+0x132>
 396:	00 00       	nop
  _delay_us(60);

  //clear display
  commandWrite(lcd_Clear);
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <commandWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3a0:	8f ed       	ldi	r24, 0xDF	; 223
 3a2:	9e e2       	ldi	r25, 0x2E	; 46
 3a4:	01 97       	sbiw	r24, 0x01	; 1
 3a6:	f1 f7       	brne	.-4      	; 0x3a4 <init_lcd+0x140>
 3a8:	00 c0       	rjmp	.+0      	; 0x3aa <init_lcd+0x146>
 3aa:	00 00       	nop
  _delay_ms(3);

  // entry mode set: 06
  // increment automatically, display shift, entire shift off
  commandWrite(lcd_EntryMode);
 3ac:	86 e0       	ldi	r24, 0x06	; 6
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <commandWrite>
 3b4:	8f e9       	ldi	r24, 0x9F	; 159
 3b6:	9f e0       	ldi	r25, 0x0F	; 15
 3b8:	01 97       	sbiw	r24, 0x01	; 1
 3ba:	f1 f7       	brne	.-4      	; 0x3b8 <init_lcd+0x154>
 3bc:	00 c0       	rjmp	.+0      	; 0x3be <init_lcd+0x15a>
 3be:	00 00       	nop
 3c0:	08 95       	ret

000003c2 <main>:
 3c2:	2f ef       	ldi	r18, 0xFF	; 255
 3c4:	89 e6       	ldi	r24, 0x69	; 105
 3c6:	98 e1       	ldi	r25, 0x18	; 24
 3c8:	21 50       	subi	r18, 0x01	; 1
 3ca:	80 40       	sbci	r24, 0x00	; 0
 3cc:	90 40       	sbci	r25, 0x00	; 0
 3ce:	e1 f7       	brne	.-8      	; 0x3c8 <main+0x6>
 3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <main+0x10>
 3d2:	00 00       	nop
	// Ladezeit für das Aufstarten der Spannungsversorguung
	_delay_ms(500);

	// Einstellung für Bildschirm
	static FILE fd_lcd = FDEV_SETUP_STREAM(lcd_putchar, NULL, _FDEV_SETUP_WRITE);
	stdout = &fd_lcd;
 3d4:	80 e0       	ldi	r24, 0x00	; 0
 3d6:	91 e0       	ldi	r25, 0x01	; 1
 3d8:	90 93 84 02 	sts	0x0284, r25
 3dc:	80 93 83 02 	sts	0x0283, r24
	
	// Peripheriegeräte und Funktionen laden
	init_lcd();
 3e0:	0e 94 32 01 	call	0x264	; 0x264 <init_lcd>
	init_encoder();
 3e4:	0e 94 53 00 	call	0xa6	; 0xa6 <init_encoder>
	init_ISR();
 3e8:	0e 94 8d 00 	call	0x11a	; 0x11a <init_ISR>
	
	// Lädt das Hauptmenu
	//while (!read_buttons());
	LoadMenu(MainMenu);
 3ec:	64 e0       	ldi	r22, 0x04	; 4
 3ee:	70 e0       	ldi	r23, 0x00	; 0
 3f0:	83 e3       	ldi	r24, 0x33	; 51
 3f2:	91 e0       	ldi	r25, 0x01	; 1
 3f4:	0e 94 3f 03 	call	0x67e	; 0x67e <_LoadMenu>
 3f8:	2f ef       	ldi	r18, 0xFF	; 255
 3fa:	81 ee       	ldi	r24, 0xE1	; 225
 3fc:	94 e0       	ldi	r25, 0x04	; 4
 3fe:	21 50       	subi	r18, 0x01	; 1
 400:	80 40       	sbci	r24, 0x00	; 0
 402:	90 40       	sbci	r25, 0x00	; 0
 404:	e1 f7       	brne	.-8      	; 0x3fe <main+0x3c>
 406:	00 c0       	rjmp	.+0      	; 0x408 <main+0x46>
 408:	00 00       	nop
	{
		//enc_delta = encode_read2();
		//controlLED();
		
		lcd_cursor_addr(LINE1);
		printf("enc_delta = %d", enc_delta);
 40a:	09 e4       	ldi	r16, 0x49	; 73
 40c:	11 e0       	ldi	r17, 0x01	; 1
		lcd_cursor_addr(LINE2);
		printf("button is %s\n", (button&BUTTON)? "set":"reset"); // falls button gedrückt schreibe set sonst reset.
 40e:	0f 2e       	mov	r0, r31
 410:	f5 e4       	ldi	r31, 0x45	; 69
 412:	cf 2e       	mov	r12, r31
 414:	f1 e0       	ldi	r31, 0x01	; 1
 416:	df 2e       	mov	r13, r31
 418:	f0 2d       	mov	r31, r0
 41a:	0f 2e       	mov	r0, r31
 41c:	f3 e4       	ldi	r31, 0x43	; 67
 41e:	ef 2e       	mov	r14, r31
 420:	f1 e0       	ldi	r31, 0x01	; 1
 422:	ff 2e       	mov	r15, r31
 424:	f0 2d       	mov	r31, r0
 426:	c8 e5       	ldi	r28, 0x58	; 88
 428:	d1 e0       	ldi	r29, 0x01	; 1
	while(1)
	{
		//enc_delta = encode_read2();
		//controlLED();
		
		lcd_cursor_addr(LINE1);
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_cursor_addr>
		printf("enc_delta = %d", enc_delta);
 432:	80 91 7b 02 	lds	r24, 0x027B
 436:	90 91 7c 02 	lds	r25, 0x027C
 43a:	9f 93       	push	r25
 43c:	8f 93       	push	r24
 43e:	1f 93       	push	r17
 440:	0f 93       	push	r16
 442:	0e 94 a9 03 	call	0x752	; 0x752 <printf>
		lcd_cursor_addr(LINE2);
 446:	80 e4       	ldi	r24, 0x40	; 64
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_cursor_addr>
		printf("button is %s\n", (button&BUTTON)? "set":"reset"); // falls button gedrückt schreibe set sonst reset.
 44e:	80 91 79 02 	lds	r24, 0x0279
 452:	90 91 7a 02 	lds	r25, 0x027A
 456:	0f 90       	pop	r0
 458:	0f 90       	pop	r0
 45a:	0f 90       	pop	r0
 45c:	0f 90       	pop	r0
 45e:	84 fd       	sbrc	r24, 4
 460:	03 c0       	rjmp	.+6      	; 0x468 <main+0xa6>
 462:	8e 2d       	mov	r24, r14
 464:	9f 2d       	mov	r25, r15
 466:	02 c0       	rjmp	.+4      	; 0x46c <main+0xaa>
 468:	8c 2d       	mov	r24, r12
 46a:	9d 2d       	mov	r25, r13
 46c:	9f 93       	push	r25
 46e:	8f 93       	push	r24
 470:	df 93       	push	r29
 472:	cf 93       	push	r28
 474:	0e 94 a9 03 	call	0x752	; 0x752 <printf>
		
		EncPort = EncPort & (~BUTTON|button);
 478:	9b b1       	in	r25, 0x0b	; 11
 47a:	20 91 79 02 	lds	r18, 0x0279
 47e:	30 91 7a 02 	lds	r19, 0x027A
 482:	82 2f       	mov	r24, r18
 484:	8f 6e       	ori	r24, 0xEF	; 239
 486:	89 23       	and	r24, r25
 488:	8b b9       	out	0x0b, r24	; 11
		EncPort = (EncPort & ~((0b111)<<EncPIN_LED1)) | (enc_delta & 0b111)<<EncPIN_LED1;
 48a:	2b b1       	in	r18, 0x0b	; 11
 48c:	80 91 7b 02 	lds	r24, 0x027B
 490:	90 91 7c 02 	lds	r25, 0x027C
 494:	87 70       	andi	r24, 0x07	; 7
 496:	99 27       	eor	r25, r25
 498:	88 0f       	add	r24, r24
 49a:	99 1f       	adc	r25, r25
 49c:	92 2f       	mov	r25, r18
 49e:	91 7f       	andi	r25, 0xF1	; 241
 4a0:	89 2b       	or	r24, r25
 4a2:	8b b9       	out	0x0b, r24	; 11
 4a4:	9f ef       	ldi	r25, 0xFF	; 255
 4a6:	23 ec       	ldi	r18, 0xC3	; 195
 4a8:	89 e0       	ldi	r24, 0x09	; 9
 4aa:	91 50       	subi	r25, 0x01	; 1
 4ac:	20 40       	sbci	r18, 0x00	; 0
 4ae:	80 40       	sbci	r24, 0x00	; 0
 4b0:	e1 f7       	brne	.-8      	; 0x4aa <main+0xe8>
 4b2:	00 c0       	rjmp	.+0      	; 0x4b4 <main+0xf2>
 4b4:	00 00       	nop
 4b6:	0f 90       	pop	r0
 4b8:	0f 90       	pop	r0
 4ba:	0f 90       	pop	r0
 4bc:	0f 90       	pop	r0
 4be:	b5 cf       	rjmp	.-150    	; 0x42a <main+0x68>

000004c0 <ProcessMenu>:

/**
  * ProcessMenu() - change to next or execute current menu item, then display menu text
 */
void ProcessMenu(char button)
{
 4c0:	cf 93       	push	r28
 4c2:	df 93       	push	r29
	switch (button){
 4c4:	80 31       	cpi	r24, 0x10	; 16
 4c6:	21 f0       	breq	.+8      	; 0x4d0 <ProcessMenu+0x10>
 4c8:	80 32       	cpi	r24, 0x20	; 32
 4ca:	09 f4       	brne	.+2      	; 0x4ce <ProcessMenu+0xe>
 4cc:	4c c0       	rjmp	.+152    	; 0x566 <ProcessMenu+0xa6>
 4ce:	5f c0       	rjmp	.+190    	; 0x58e <ProcessMenu+0xce>
		
	case ENC_MENU:
		if (enc_delta < 0)
 4d0:	80 91 7b 02 	lds	r24, 0x027B
 4d4:	90 91 7c 02 	lds	r25, 0x027C
 4d8:	99 23       	and	r25, r25
 4da:	f4 f4       	brge	.+60     	; 0x518 <ProcessMenu+0x58>
		{
			if (-enc_delta > activeMenuItem)
 4dc:	80 91 7b 02 	lds	r24, 0x027B
 4e0:	90 91 7c 02 	lds	r25, 0x027C
 4e4:	20 91 7d 02 	lds	r18, 0x027D
 4e8:	30 91 7e 02 	lds	r19, 0x027E
 4ec:	91 95       	neg	r25
 4ee:	81 95       	neg	r24
 4f0:	91 09       	sbc	r25, r1
 4f2:	28 17       	cp	r18, r24
 4f4:	39 07       	cpc	r19, r25
 4f6:	2c f4       	brge	.+10     	; 0x502 <ProcessMenu+0x42>
			{
				activeMenuItem = 0;
 4f8:	10 92 7e 02 	sts	0x027E, r1
 4fc:	10 92 7d 02 	sts	0x027D, r1
 500:	46 c0       	rjmp	.+140    	; 0x58e <ProcessMenu+0xce>
			}else activeMenuItem +=enc_delta;
 502:	80 91 7b 02 	lds	r24, 0x027B
 506:	90 91 7c 02 	lds	r25, 0x027C
 50a:	28 0f       	add	r18, r24
 50c:	39 1f       	adc	r19, r25
 50e:	30 93 7e 02 	sts	0x027E, r19
 512:	20 93 7d 02 	sts	0x027D, r18
 516:	3b c0       	rjmp	.+118    	; 0x58e <ProcessMenu+0xce>
		}
		else{
			if (enc_delta >(menu_Max-activeMenuItem))
 518:	80 91 0e 01 	lds	r24, 0x010E
 51c:	20 91 7d 02 	lds	r18, 0x027D
 520:	30 91 7e 02 	lds	r19, 0x027E
 524:	40 91 7b 02 	lds	r20, 0x027B
 528:	50 91 7c 02 	lds	r21, 0x027C
 52c:	08 2e       	mov	r0, r24
 52e:	00 0c       	add	r0, r0
 530:	99 0b       	sbc	r25, r25
 532:	82 1b       	sub	r24, r18
 534:	93 0b       	sbc	r25, r19
 536:	84 17       	cp	r24, r20
 538:	95 07       	cpc	r25, r21
 53a:	54 f4       	brge	.+20     	; 0x550 <ProcessMenu+0x90>
			{activeMenuItem = menu_Max;
 53c:	80 91 0e 01 	lds	r24, 0x010E
 540:	08 2e       	mov	r0, r24
 542:	00 0c       	add	r0, r0
 544:	99 0b       	sbc	r25, r25
 546:	90 93 7e 02 	sts	0x027E, r25
 54a:	80 93 7d 02 	sts	0x027D, r24
 54e:	1f c0       	rjmp	.+62     	; 0x58e <ProcessMenu+0xce>
			}
			 else activeMenuItem +=enc_delta;
 550:	80 91 7b 02 	lds	r24, 0x027B
 554:	90 91 7c 02 	lds	r25, 0x027C
 558:	28 0f       	add	r18, r24
 55a:	39 1f       	adc	r19, r25
 55c:	30 93 7e 02 	sts	0x027E, r19
 560:	20 93 7d 02 	sts	0x027D, r18
 564:	14 c0       	rjmp	.+40     	; 0x58e <ProcessMenu+0xce>
		}
		//activeMenuItem = (activeMenuItem + 1) % nrMenuItems;	//proceed to next menu item
		break;

	case BUTTON_EXECUTE:
		if (activeMenu[activeMenuItem].func!=NULL)  
 566:	e0 91 7d 02 	lds	r30, 0x027D
 56a:	f0 91 7e 02 	lds	r31, 0x027E
 56e:	ee 0f       	add	r30, r30
 570:	ff 1f       	adc	r31, r31
 572:	ee 0f       	add	r30, r30
 574:	ff 1f       	adc	r31, r31
 576:	80 91 7f 02 	lds	r24, 0x027F
 57a:	90 91 80 02 	lds	r25, 0x0280
 57e:	e8 0f       	add	r30, r24
 580:	f9 1f       	adc	r31, r25
 582:	02 80       	ldd	r0, Z+2	; 0x02
 584:	f3 81       	ldd	r31, Z+3	; 0x03
 586:	e0 2d       	mov	r30, r0
 588:	30 97       	sbiw	r30, 0x00	; 0
 58a:	09 f0       	breq	.+2      	; 0x58e <ProcessMenu+0xce>
			activeMenu[activeMenuItem].func();					//execute the selected menufunction
 58c:	09 95       	icall
	}
	lcd_cursor_addr(LINE1);
 58e:	80 e0       	ldi	r24, 0x00	; 0
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_cursor_addr>
	printf("%s",activeMenu[activeMenuItem].text);				//display current selected menu text
 596:	e0 91 7d 02 	lds	r30, 0x027D
 59a:	f0 91 7e 02 	lds	r31, 0x027E
 59e:	ee 0f       	add	r30, r30
 5a0:	ff 1f       	adc	r31, r31
 5a2:	ee 0f       	add	r30, r30
 5a4:	ff 1f       	adc	r31, r31
 5a6:	80 91 7f 02 	lds	r24, 0x027F
 5aa:	90 91 80 02 	lds	r25, 0x0280
 5ae:	e8 0f       	add	r30, r24
 5b0:	f9 1f       	adc	r31, r25
 5b2:	81 81       	ldd	r24, Z+1	; 0x01
 5b4:	8f 93       	push	r24
 5b6:	80 81       	ld	r24, Z
 5b8:	8f 93       	push	r24
 5ba:	c6 e6       	ldi	r28, 0x66	; 102
 5bc:	d1 e0       	ldi	r29, 0x01	; 1
 5be:	df 93       	push	r29
 5c0:	cf 93       	push	r28
 5c2:	0e 94 a9 03 	call	0x752	; 0x752 <printf>
	lcd_cursor_addr(LINE2);
 5c6:	80 e4       	ldi	r24, 0x40	; 64
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_cursor_addr>
	printf("%s",activeMenu[activeMenuItem+1].text);	
 5ce:	e0 91 7d 02 	lds	r30, 0x027D
 5d2:	f0 91 7e 02 	lds	r31, 0x027E
 5d6:	31 96       	adiw	r30, 0x01	; 1
 5d8:	ee 0f       	add	r30, r30
 5da:	ff 1f       	adc	r31, r31
 5dc:	ee 0f       	add	r30, r30
 5de:	ff 1f       	adc	r31, r31
 5e0:	80 91 7f 02 	lds	r24, 0x027F
 5e4:	90 91 80 02 	lds	r25, 0x0280
 5e8:	e8 0f       	add	r30, r24
 5ea:	f9 1f       	adc	r31, r25
 5ec:	81 81       	ldd	r24, Z+1	; 0x01
 5ee:	8f 93       	push	r24
 5f0:	80 81       	ld	r24, Z
 5f2:	8f 93       	push	r24
 5f4:	df 93       	push	r29
 5f6:	cf 93       	push	r28
 5f8:	0e 94 a9 03 	call	0x752	; 0x752 <printf>
	lcd_cursor_addr(LINE3);
 5fc:	84 e1       	ldi	r24, 0x14	; 20
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_cursor_addr>
	printf("%s",activeMenu[activeMenuItem+2].text);	
 604:	e0 91 7d 02 	lds	r30, 0x027D
 608:	f0 91 7e 02 	lds	r31, 0x027E
 60c:	32 96       	adiw	r30, 0x02	; 2
 60e:	ee 0f       	add	r30, r30
 610:	ff 1f       	adc	r31, r31
 612:	ee 0f       	add	r30, r30
 614:	ff 1f       	adc	r31, r31
 616:	80 91 7f 02 	lds	r24, 0x027F
 61a:	90 91 80 02 	lds	r25, 0x0280
 61e:	e8 0f       	add	r30, r24
 620:	f9 1f       	adc	r31, r25
 622:	81 81       	ldd	r24, Z+1	; 0x01
 624:	8f 93       	push	r24
 626:	80 81       	ld	r24, Z
 628:	8f 93       	push	r24
 62a:	df 93       	push	r29
 62c:	cf 93       	push	r28
 62e:	0e 94 a9 03 	call	0x752	; 0x752 <printf>
	lcd_cursor_addr(LINE4);
 632:	84 e5       	ldi	r24, 0x54	; 84
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_cursor_addr>
	printf("%s",activeMenu[activeMenuItem+3].text);	
 63a:	e0 91 7d 02 	lds	r30, 0x027D
 63e:	f0 91 7e 02 	lds	r31, 0x027E
 642:	33 96       	adiw	r30, 0x03	; 3
 644:	ee 0f       	add	r30, r30
 646:	ff 1f       	adc	r31, r31
 648:	ee 0f       	add	r30, r30
 64a:	ff 1f       	adc	r31, r31
 64c:	80 91 7f 02 	lds	r24, 0x027F
 650:	90 91 80 02 	lds	r25, 0x0280
 654:	e8 0f       	add	r30, r24
 656:	f9 1f       	adc	r31, r25
 658:	81 81       	ldd	r24, Z+1	; 0x01
 65a:	8f 93       	push	r24
 65c:	80 81       	ld	r24, Z
 65e:	8f 93       	push	r24
 660:	df 93       	push	r29
 662:	cf 93       	push	r28
 664:	0e 94 a9 03 	call	0x752	; 0x752 <printf>
 668:	8d b7       	in	r24, 0x3d	; 61
 66a:	9e b7       	in	r25, 0x3e	; 62
 66c:	40 96       	adiw	r24, 0x10	; 16
 66e:	0f b6       	in	r0, 0x3f	; 63
 670:	f8 94       	cli
 672:	9e bf       	out	0x3e, r25	; 62
 674:	0f be       	out	0x3f, r0	; 63
 676:	8d bf       	out	0x3d, r24	; 61
}
 678:	df 91       	pop	r29
 67a:	cf 91       	pop	r28
 67c:	08 95       	ret

0000067e <_LoadMenu>:
/**
  * _LoadMenu() - load another menu tree (main- or submenu)
 */
void _LoadMenu(struct MenuItem_T menu[], int nrItems)
{
		activeMenu = menu;
 67e:	90 93 80 02 	sts	0x0280, r25
 682:	80 93 7f 02 	sts	0x027F, r24
		nrMenuItems = nrItems;
 686:	70 93 78 02 	sts	0x0278, r23
 68a:	60 93 77 02 	sts	0x0277, r22
		activeMenuItem = 0;
 68e:	10 92 7e 02 	sts	0x027E, r1
 692:	10 92 7d 02 	sts	0x027D, r1
		ProcessMenu(0);											// Display first menuitem (on first display line)
 696:	80 e0       	ldi	r24, 0x00	; 0
 698:	0e 94 60 02 	call	0x4c0	; 0x4c0 <ProcessMenu>
 69c:	08 95       	ret

0000069e <notesSys>:
	printf("power of the plant :");
}
	
// Shows last notifications
void notesSys(void)
{}
 69e:	08 95       	ret

000006a0 <nameFunc>:
//Rem: in a real application, implement this and function prototypes in different module(s)

// Menu for naming power plant
void nameFunc(void)
{
	LoadMenu(SubMenuName);
 6a0:	62 e0       	ldi	r22, 0x02	; 2
 6a2:	70 e0       	ldi	r23, 0x00	; 0
 6a4:	8b e2       	ldi	r24, 0x2B	; 43
 6a6:	91 e0       	ldi	r25, 0x01	; 1
 6a8:	0e 94 3f 03 	call	0x67e	; 0x67e <_LoadMenu>
 6ac:	08 95       	ret

000006ae <numberModules>:
}

// Edit number of modules
void numberModules(void)
{
	LoadMenu(SubMenuNumber);
 6ae:	62 e0       	ldi	r22, 0x02	; 2
 6b0:	70 e0       	ldi	r23, 0x00	; 0
 6b2:	83 e2       	ldi	r24, 0x23	; 35
 6b4:	91 e0       	ldi	r25, 0x01	; 1
 6b6:	0e 94 3f 03 	call	0x67e	; 0x67e <_LoadMenu>
 6ba:	08 95       	ret

000006bc <statusFunc>:
} 

// Watch status about specifications
void statusFunc(void)
{
	LoadMenu(SubMenuStatus);
 6bc:	64 e0       	ldi	r22, 0x04	; 4
 6be:	70 e0       	ldi	r23, 0x00	; 0
 6c0:	83 e1       	ldi	r24, 0x13	; 19
 6c2:	91 e0       	ldi	r25, 0x01	; 1
 6c4:	0e 94 3f 03 	call	0x67e	; 0x67e <_LoadMenu>
 6c8:	08 95       	ret

000006ca <aboutFunc>:
}
	
// Infos about product
void aboutFunc(void)
{
	LoadMenu(SubMenuAbout);
 6ca:	61 e0       	ldi	r22, 0x01	; 1
 6cc:	70 e0       	ldi	r23, 0x00	; 0
 6ce:	8f e0       	ldi	r24, 0x0F	; 15
 6d0:	91 e0       	ldi	r25, 0x01	; 1
 6d2:	0e 94 3f 03 	call	0x67e	; 0x67e <_LoadMenu>
 6d6:	08 95       	ret

000006d8 <backMain>:
{}

// Return to main menu
void backMain(void)
{
	LoadMenu(MainMenu);
 6d8:	64 e0       	ldi	r22, 0x04	; 4
 6da:	70 e0       	ldi	r23, 0x00	; 0
 6dc:	83 e3       	ldi	r24, 0x33	; 51
 6de:	91 e0       	ldi	r25, 0x01	; 1
 6e0:	0e 94 3f 03 	call	0x67e	; 0x67e <_LoadMenu>
 6e4:	08 95       	ret

000006e6 <editName>:
}

// Edit name of power plant
void editName(void)
{
	lcd_cursor_addr(LINE1);
 6e6:	80 e0       	ldi	r24, 0x00	; 0
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_cursor_addr>
	printf("Edit the name");
 6ee:	89 e6       	ldi	r24, 0x69	; 105
 6f0:	91 e0       	ldi	r25, 0x01	; 1
 6f2:	9f 93       	push	r25
 6f4:	8f 93       	push	r24
 6f6:	0e 94 a9 03 	call	0x752	; 0x752 <printf>
	lcd_cursor_addr(LINE2);
 6fa:	80 e4       	ldi	r24, 0x40	; 64
 6fc:	90 e0       	ldi	r25, 0x00	; 0
 6fe:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_cursor_addr>
	// printf("Tool zum eingeben des Namens"); - durch drücken weiter zum nächsten Buchstaben, 8 Zeichen - nach 8x drücken bei "Save and back to mainmenu"
	lcd_cursor_addr(LINE4);
 702:	84 e5       	ldi	r24, 0x54	; 84
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_cursor_addr>
	LoadMenu(MainMenu);
 70a:	64 e0       	ldi	r22, 0x04	; 4
 70c:	70 e0       	ldi	r23, 0x00	; 0
 70e:	83 e3       	ldi	r24, 0x33	; 51
 710:	91 e0       	ldi	r25, 0x01	; 1
 712:	0e 94 3f 03 	call	0x67e	; 0x67e <_LoadMenu>
 716:	0f 90       	pop	r0
 718:	0f 90       	pop	r0
 71a:	08 95       	ret

0000071c <editModule>:
}

// Changes numbers of modules
void editModule(void)
{
	printf("Number of Modules : ");
 71c:	87 e7       	ldi	r24, 0x77	; 119
 71e:	91 e0       	ldi	r25, 0x01	; 1
 720:	9f 93       	push	r25
 722:	8f 93       	push	r24
 724:	0e 94 a9 03 	call	0x752	; 0x752 <printf>
 728:	0f 90       	pop	r0
 72a:	0f 90       	pop	r0
 72c:	08 95       	ret

0000072e <voltageSys>:

// Shows average voltage of power plant
void voltageSys(void)

{
	printf("Voltage of the system :");
 72e:	8c e8       	ldi	r24, 0x8C	; 140
 730:	91 e0       	ldi	r25, 0x01	; 1
 732:	9f 93       	push	r25
 734:	8f 93       	push	r24
 736:	0e 94 a9 03 	call	0x752	; 0x752 <printf>
 73a:	0f 90       	pop	r0
 73c:	0f 90       	pop	r0
 73e:	08 95       	ret

00000740 <powerSys>:

// Shows average power of power plant
void powerSys(void)

{
	printf("power of the plant :");
 740:	84 ea       	ldi	r24, 0xA4	; 164
 742:	91 e0       	ldi	r25, 0x01	; 1
 744:	9f 93       	push	r25
 746:	8f 93       	push	r24
 748:	0e 94 a9 03 	call	0x752	; 0x752 <printf>
 74c:	0f 90       	pop	r0
 74e:	0f 90       	pop	r0
 750:	08 95       	ret

00000752 <printf>:
 752:	a0 e0       	ldi	r26, 0x00	; 0
 754:	b0 e0       	ldi	r27, 0x00	; 0
 756:	ef ea       	ldi	r30, 0xAF	; 175
 758:	f3 e0       	ldi	r31, 0x03	; 3
 75a:	0c 94 4d 06 	jmp	0xc9a	; 0xc9a <__prologue_saves__+0x20>
 75e:	ae 01       	movw	r20, r28
 760:	4b 5f       	subi	r20, 0xFB	; 251
 762:	5f 4f       	sbci	r21, 0xFF	; 255
 764:	fa 01       	movw	r30, r20
 766:	61 91       	ld	r22, Z+
 768:	71 91       	ld	r23, Z+
 76a:	af 01       	movw	r20, r30
 76c:	80 91 83 02 	lds	r24, 0x0283
 770:	90 91 84 02 	lds	r25, 0x0284
 774:	0e 94 bf 03 	call	0x77e	; 0x77e <vfprintf>
 778:	e2 e0       	ldi	r30, 0x02	; 2
 77a:	0c 94 69 06 	jmp	0xcd2	; 0xcd2 <__epilogue_restores__+0x20>

0000077e <vfprintf>:
 77e:	ac e0       	ldi	r26, 0x0C	; 12
 780:	b0 e0       	ldi	r27, 0x00	; 0
 782:	e5 ec       	ldi	r30, 0xC5	; 197
 784:	f3 e0       	ldi	r31, 0x03	; 3
 786:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__prologue_saves__>
 78a:	7c 01       	movw	r14, r24
 78c:	6b 01       	movw	r12, r22
 78e:	8a 01       	movw	r16, r20
 790:	fc 01       	movw	r30, r24
 792:	17 82       	std	Z+7, r1	; 0x07
 794:	16 82       	std	Z+6, r1	; 0x06
 796:	83 81       	ldd	r24, Z+3	; 0x03
 798:	81 ff       	sbrs	r24, 1
 79a:	bd c1       	rjmp	.+890    	; 0xb16 <__stack+0x217>
 79c:	ce 01       	movw	r24, r28
 79e:	01 96       	adiw	r24, 0x01	; 1
 7a0:	4c 01       	movw	r8, r24
 7a2:	f7 01       	movw	r30, r14
 7a4:	93 81       	ldd	r25, Z+3	; 0x03
 7a6:	f6 01       	movw	r30, r12
 7a8:	93 fd       	sbrc	r25, 3
 7aa:	85 91       	lpm	r24, Z+
 7ac:	93 ff       	sbrs	r25, 3
 7ae:	81 91       	ld	r24, Z+
 7b0:	6f 01       	movw	r12, r30
 7b2:	88 23       	and	r24, r24
 7b4:	09 f4       	brne	.+2      	; 0x7b8 <vfprintf+0x3a>
 7b6:	ab c1       	rjmp	.+854    	; 0xb0e <__stack+0x20f>
 7b8:	85 32       	cpi	r24, 0x25	; 37
 7ba:	39 f4       	brne	.+14     	; 0x7ca <vfprintf+0x4c>
 7bc:	93 fd       	sbrc	r25, 3
 7be:	85 91       	lpm	r24, Z+
 7c0:	93 ff       	sbrs	r25, 3
 7c2:	81 91       	ld	r24, Z+
 7c4:	6f 01       	movw	r12, r30
 7c6:	85 32       	cpi	r24, 0x25	; 37
 7c8:	29 f4       	brne	.+10     	; 0x7d4 <vfprintf+0x56>
 7ca:	b7 01       	movw	r22, r14
 7cc:	90 e0       	ldi	r25, 0x00	; 0
 7ce:	0e 94 a7 05 	call	0xb4e	; 0xb4e <fputc>
 7d2:	e7 cf       	rjmp	.-50     	; 0x7a2 <vfprintf+0x24>
 7d4:	51 2c       	mov	r5, r1
 7d6:	31 2c       	mov	r3, r1
 7d8:	20 e0       	ldi	r18, 0x00	; 0
 7da:	20 32       	cpi	r18, 0x20	; 32
 7dc:	a0 f4       	brcc	.+40     	; 0x806 <vfprintf+0x88>
 7de:	8b 32       	cpi	r24, 0x2B	; 43
 7e0:	69 f0       	breq	.+26     	; 0x7fc <vfprintf+0x7e>
 7e2:	30 f4       	brcc	.+12     	; 0x7f0 <vfprintf+0x72>
 7e4:	80 32       	cpi	r24, 0x20	; 32
 7e6:	59 f0       	breq	.+22     	; 0x7fe <vfprintf+0x80>
 7e8:	83 32       	cpi	r24, 0x23	; 35
 7ea:	69 f4       	brne	.+26     	; 0x806 <vfprintf+0x88>
 7ec:	20 61       	ori	r18, 0x10	; 16
 7ee:	2c c0       	rjmp	.+88     	; 0x848 <vfprintf+0xca>
 7f0:	8d 32       	cpi	r24, 0x2D	; 45
 7f2:	39 f0       	breq	.+14     	; 0x802 <vfprintf+0x84>
 7f4:	80 33       	cpi	r24, 0x30	; 48
 7f6:	39 f4       	brne	.+14     	; 0x806 <vfprintf+0x88>
 7f8:	21 60       	ori	r18, 0x01	; 1
 7fa:	26 c0       	rjmp	.+76     	; 0x848 <vfprintf+0xca>
 7fc:	22 60       	ori	r18, 0x02	; 2
 7fe:	24 60       	ori	r18, 0x04	; 4
 800:	23 c0       	rjmp	.+70     	; 0x848 <vfprintf+0xca>
 802:	28 60       	ori	r18, 0x08	; 8
 804:	21 c0       	rjmp	.+66     	; 0x848 <vfprintf+0xca>
 806:	27 fd       	sbrc	r18, 7
 808:	27 c0       	rjmp	.+78     	; 0x858 <vfprintf+0xda>
 80a:	30 ed       	ldi	r19, 0xD0	; 208
 80c:	38 0f       	add	r19, r24
 80e:	3a 30       	cpi	r19, 0x0A	; 10
 810:	78 f4       	brcc	.+30     	; 0x830 <vfprintf+0xb2>
 812:	26 ff       	sbrs	r18, 6
 814:	06 c0       	rjmp	.+12     	; 0x822 <vfprintf+0xa4>
 816:	fa e0       	ldi	r31, 0x0A	; 10
 818:	5f 9e       	mul	r5, r31
 81a:	30 0d       	add	r19, r0
 81c:	11 24       	eor	r1, r1
 81e:	53 2e       	mov	r5, r19
 820:	13 c0       	rjmp	.+38     	; 0x848 <vfprintf+0xca>
 822:	8a e0       	ldi	r24, 0x0A	; 10
 824:	38 9e       	mul	r3, r24
 826:	30 0d       	add	r19, r0
 828:	11 24       	eor	r1, r1
 82a:	33 2e       	mov	r3, r19
 82c:	20 62       	ori	r18, 0x20	; 32
 82e:	0c c0       	rjmp	.+24     	; 0x848 <vfprintf+0xca>
 830:	8e 32       	cpi	r24, 0x2E	; 46
 832:	21 f4       	brne	.+8      	; 0x83c <vfprintf+0xbe>
 834:	26 fd       	sbrc	r18, 6
 836:	6b c1       	rjmp	.+726    	; 0xb0e <__stack+0x20f>
 838:	20 64       	ori	r18, 0x40	; 64
 83a:	06 c0       	rjmp	.+12     	; 0x848 <vfprintf+0xca>
 83c:	8c 36       	cpi	r24, 0x6C	; 108
 83e:	11 f4       	brne	.+4      	; 0x844 <vfprintf+0xc6>
 840:	20 68       	ori	r18, 0x80	; 128
 842:	02 c0       	rjmp	.+4      	; 0x848 <vfprintf+0xca>
 844:	88 36       	cpi	r24, 0x68	; 104
 846:	41 f4       	brne	.+16     	; 0x858 <vfprintf+0xda>
 848:	f6 01       	movw	r30, r12
 84a:	93 fd       	sbrc	r25, 3
 84c:	85 91       	lpm	r24, Z+
 84e:	93 ff       	sbrs	r25, 3
 850:	81 91       	ld	r24, Z+
 852:	6f 01       	movw	r12, r30
 854:	81 11       	cpse	r24, r1
 856:	c1 cf       	rjmp	.-126    	; 0x7da <vfprintf+0x5c>
 858:	98 2f       	mov	r25, r24
 85a:	9f 7d       	andi	r25, 0xDF	; 223
 85c:	95 54       	subi	r25, 0x45	; 69
 85e:	93 30       	cpi	r25, 0x03	; 3
 860:	28 f4       	brcc	.+10     	; 0x86c <vfprintf+0xee>
 862:	0c 5f       	subi	r16, 0xFC	; 252
 864:	1f 4f       	sbci	r17, 0xFF	; 255
 866:	ff e3       	ldi	r31, 0x3F	; 63
 868:	f9 83       	std	Y+1, r31	; 0x01
 86a:	0d c0       	rjmp	.+26     	; 0x886 <vfprintf+0x108>
 86c:	83 36       	cpi	r24, 0x63	; 99
 86e:	31 f0       	breq	.+12     	; 0x87c <vfprintf+0xfe>
 870:	83 37       	cpi	r24, 0x73	; 115
 872:	71 f0       	breq	.+28     	; 0x890 <vfprintf+0x112>
 874:	83 35       	cpi	r24, 0x53	; 83
 876:	09 f0       	breq	.+2      	; 0x87a <vfprintf+0xfc>
 878:	5b c0       	rjmp	.+182    	; 0x930 <__stack+0x31>
 87a:	22 c0       	rjmp	.+68     	; 0x8c0 <vfprintf+0x142>
 87c:	f8 01       	movw	r30, r16
 87e:	80 81       	ld	r24, Z
 880:	89 83       	std	Y+1, r24	; 0x01
 882:	0e 5f       	subi	r16, 0xFE	; 254
 884:	1f 4f       	sbci	r17, 0xFF	; 255
 886:	44 24       	eor	r4, r4
 888:	43 94       	inc	r4
 88a:	51 2c       	mov	r5, r1
 88c:	54 01       	movw	r10, r8
 88e:	15 c0       	rjmp	.+42     	; 0x8ba <vfprintf+0x13c>
 890:	38 01       	movw	r6, r16
 892:	f2 e0       	ldi	r31, 0x02	; 2
 894:	6f 0e       	add	r6, r31
 896:	71 1c       	adc	r7, r1
 898:	f8 01       	movw	r30, r16
 89a:	a0 80       	ld	r10, Z
 89c:	b1 80       	ldd	r11, Z+1	; 0x01
 89e:	26 ff       	sbrs	r18, 6
 8a0:	03 c0       	rjmp	.+6      	; 0x8a8 <vfprintf+0x12a>
 8a2:	65 2d       	mov	r22, r5
 8a4:	70 e0       	ldi	r23, 0x00	; 0
 8a6:	02 c0       	rjmp	.+4      	; 0x8ac <vfprintf+0x12e>
 8a8:	6f ef       	ldi	r22, 0xFF	; 255
 8aa:	7f ef       	ldi	r23, 0xFF	; 255
 8ac:	c5 01       	movw	r24, r10
 8ae:	2c 87       	std	Y+12, r18	; 0x0c
 8b0:	0e 94 9c 05 	call	0xb38	; 0xb38 <strnlen>
 8b4:	2c 01       	movw	r4, r24
 8b6:	83 01       	movw	r16, r6
 8b8:	2c 85       	ldd	r18, Y+12	; 0x0c
 8ba:	2f 77       	andi	r18, 0x7F	; 127
 8bc:	22 2e       	mov	r2, r18
 8be:	17 c0       	rjmp	.+46     	; 0x8ee <vfprintf+0x170>
 8c0:	38 01       	movw	r6, r16
 8c2:	f2 e0       	ldi	r31, 0x02	; 2
 8c4:	6f 0e       	add	r6, r31
 8c6:	71 1c       	adc	r7, r1
 8c8:	f8 01       	movw	r30, r16
 8ca:	a0 80       	ld	r10, Z
 8cc:	b1 80       	ldd	r11, Z+1	; 0x01
 8ce:	26 ff       	sbrs	r18, 6
 8d0:	03 c0       	rjmp	.+6      	; 0x8d8 <vfprintf+0x15a>
 8d2:	65 2d       	mov	r22, r5
 8d4:	70 e0       	ldi	r23, 0x00	; 0
 8d6:	02 c0       	rjmp	.+4      	; 0x8dc <vfprintf+0x15e>
 8d8:	6f ef       	ldi	r22, 0xFF	; 255
 8da:	7f ef       	ldi	r23, 0xFF	; 255
 8dc:	c5 01       	movw	r24, r10
 8de:	2c 87       	std	Y+12, r18	; 0x0c
 8e0:	0e 94 91 05 	call	0xb22	; 0xb22 <strnlen_P>
 8e4:	2c 01       	movw	r4, r24
 8e6:	2c 85       	ldd	r18, Y+12	; 0x0c
 8e8:	20 68       	ori	r18, 0x80	; 128
 8ea:	22 2e       	mov	r2, r18
 8ec:	83 01       	movw	r16, r6
 8ee:	23 fc       	sbrc	r2, 3
 8f0:	1b c0       	rjmp	.+54     	; 0x928 <__stack+0x29>
 8f2:	83 2d       	mov	r24, r3
 8f4:	90 e0       	ldi	r25, 0x00	; 0
 8f6:	48 16       	cp	r4, r24
 8f8:	59 06       	cpc	r5, r25
 8fa:	b0 f4       	brcc	.+44     	; 0x928 <__stack+0x29>
 8fc:	b7 01       	movw	r22, r14
 8fe:	80 e2       	ldi	r24, 0x20	; 32
 900:	90 e0       	ldi	r25, 0x00	; 0
 902:	0e 94 a7 05 	call	0xb4e	; 0xb4e <fputc>
 906:	3a 94       	dec	r3
 908:	f4 cf       	rjmp	.-24     	; 0x8f2 <vfprintf+0x174>
 90a:	f5 01       	movw	r30, r10
 90c:	27 fc       	sbrc	r2, 7
 90e:	85 91       	lpm	r24, Z+
 910:	27 fe       	sbrs	r2, 7
 912:	81 91       	ld	r24, Z+
 914:	5f 01       	movw	r10, r30
 916:	b7 01       	movw	r22, r14
 918:	90 e0       	ldi	r25, 0x00	; 0
 91a:	0e 94 a7 05 	call	0xb4e	; 0xb4e <fputc>
 91e:	31 10       	cpse	r3, r1
 920:	3a 94       	dec	r3
 922:	f1 e0       	ldi	r31, 0x01	; 1
 924:	4f 1a       	sub	r4, r31
 926:	51 08       	sbc	r5, r1
 928:	41 14       	cp	r4, r1
 92a:	51 04       	cpc	r5, r1
 92c:	71 f7       	brne	.-36     	; 0x90a <__stack+0xb>
 92e:	e5 c0       	rjmp	.+458    	; 0xafa <__stack+0x1fb>
 930:	84 36       	cpi	r24, 0x64	; 100
 932:	11 f0       	breq	.+4      	; 0x938 <__stack+0x39>
 934:	89 36       	cpi	r24, 0x69	; 105
 936:	39 f5       	brne	.+78     	; 0x986 <__stack+0x87>
 938:	f8 01       	movw	r30, r16
 93a:	27 ff       	sbrs	r18, 7
 93c:	07 c0       	rjmp	.+14     	; 0x94c <__stack+0x4d>
 93e:	60 81       	ld	r22, Z
 940:	71 81       	ldd	r23, Z+1	; 0x01
 942:	82 81       	ldd	r24, Z+2	; 0x02
 944:	93 81       	ldd	r25, Z+3	; 0x03
 946:	0c 5f       	subi	r16, 0xFC	; 252
 948:	1f 4f       	sbci	r17, 0xFF	; 255
 94a:	08 c0       	rjmp	.+16     	; 0x95c <__stack+0x5d>
 94c:	60 81       	ld	r22, Z
 94e:	71 81       	ldd	r23, Z+1	; 0x01
 950:	07 2e       	mov	r0, r23
 952:	00 0c       	add	r0, r0
 954:	88 0b       	sbc	r24, r24
 956:	99 0b       	sbc	r25, r25
 958:	0e 5f       	subi	r16, 0xFE	; 254
 95a:	1f 4f       	sbci	r17, 0xFF	; 255
 95c:	2f 76       	andi	r18, 0x6F	; 111
 95e:	72 2e       	mov	r7, r18
 960:	97 ff       	sbrs	r25, 7
 962:	09 c0       	rjmp	.+18     	; 0x976 <__stack+0x77>
 964:	90 95       	com	r25
 966:	80 95       	com	r24
 968:	70 95       	com	r23
 96a:	61 95       	neg	r22
 96c:	7f 4f       	sbci	r23, 0xFF	; 255
 96e:	8f 4f       	sbci	r24, 0xFF	; 255
 970:	9f 4f       	sbci	r25, 0xFF	; 255
 972:	20 68       	ori	r18, 0x80	; 128
 974:	72 2e       	mov	r7, r18
 976:	2a e0       	ldi	r18, 0x0A	; 10
 978:	30 e0       	ldi	r19, 0x00	; 0
 97a:	a4 01       	movw	r20, r8
 97c:	0e 94 df 05 	call	0xbbe	; 0xbbe <__ultoa_invert>
 980:	a8 2e       	mov	r10, r24
 982:	a8 18       	sub	r10, r8
 984:	44 c0       	rjmp	.+136    	; 0xa0e <__stack+0x10f>
 986:	85 37       	cpi	r24, 0x75	; 117
 988:	29 f4       	brne	.+10     	; 0x994 <__stack+0x95>
 98a:	2f 7e       	andi	r18, 0xEF	; 239
 98c:	b2 2e       	mov	r11, r18
 98e:	2a e0       	ldi	r18, 0x0A	; 10
 990:	30 e0       	ldi	r19, 0x00	; 0
 992:	25 c0       	rjmp	.+74     	; 0x9de <__stack+0xdf>
 994:	f2 2f       	mov	r31, r18
 996:	f9 7f       	andi	r31, 0xF9	; 249
 998:	bf 2e       	mov	r11, r31
 99a:	8f 36       	cpi	r24, 0x6F	; 111
 99c:	c1 f0       	breq	.+48     	; 0x9ce <__stack+0xcf>
 99e:	18 f4       	brcc	.+6      	; 0x9a6 <__stack+0xa7>
 9a0:	88 35       	cpi	r24, 0x58	; 88
 9a2:	79 f0       	breq	.+30     	; 0x9c2 <__stack+0xc3>
 9a4:	b4 c0       	rjmp	.+360    	; 0xb0e <__stack+0x20f>
 9a6:	80 37       	cpi	r24, 0x70	; 112
 9a8:	19 f0       	breq	.+6      	; 0x9b0 <__stack+0xb1>
 9aa:	88 37       	cpi	r24, 0x78	; 120
 9ac:	21 f0       	breq	.+8      	; 0x9b6 <__stack+0xb7>
 9ae:	af c0       	rjmp	.+350    	; 0xb0e <__stack+0x20f>
 9b0:	2f 2f       	mov	r18, r31
 9b2:	20 61       	ori	r18, 0x10	; 16
 9b4:	b2 2e       	mov	r11, r18
 9b6:	b4 fe       	sbrs	r11, 4
 9b8:	0d c0       	rjmp	.+26     	; 0x9d4 <__stack+0xd5>
 9ba:	8b 2d       	mov	r24, r11
 9bc:	84 60       	ori	r24, 0x04	; 4
 9be:	b8 2e       	mov	r11, r24
 9c0:	09 c0       	rjmp	.+18     	; 0x9d4 <__stack+0xd5>
 9c2:	24 ff       	sbrs	r18, 4
 9c4:	0a c0       	rjmp	.+20     	; 0x9da <__stack+0xdb>
 9c6:	9f 2f       	mov	r25, r31
 9c8:	96 60       	ori	r25, 0x06	; 6
 9ca:	b9 2e       	mov	r11, r25
 9cc:	06 c0       	rjmp	.+12     	; 0x9da <__stack+0xdb>
 9ce:	28 e0       	ldi	r18, 0x08	; 8
 9d0:	30 e0       	ldi	r19, 0x00	; 0
 9d2:	05 c0       	rjmp	.+10     	; 0x9de <__stack+0xdf>
 9d4:	20 e1       	ldi	r18, 0x10	; 16
 9d6:	30 e0       	ldi	r19, 0x00	; 0
 9d8:	02 c0       	rjmp	.+4      	; 0x9de <__stack+0xdf>
 9da:	20 e1       	ldi	r18, 0x10	; 16
 9dc:	32 e0       	ldi	r19, 0x02	; 2
 9de:	f8 01       	movw	r30, r16
 9e0:	b7 fe       	sbrs	r11, 7
 9e2:	07 c0       	rjmp	.+14     	; 0x9f2 <__stack+0xf3>
 9e4:	60 81       	ld	r22, Z
 9e6:	71 81       	ldd	r23, Z+1	; 0x01
 9e8:	82 81       	ldd	r24, Z+2	; 0x02
 9ea:	93 81       	ldd	r25, Z+3	; 0x03
 9ec:	0c 5f       	subi	r16, 0xFC	; 252
 9ee:	1f 4f       	sbci	r17, 0xFF	; 255
 9f0:	06 c0       	rjmp	.+12     	; 0x9fe <__stack+0xff>
 9f2:	60 81       	ld	r22, Z
 9f4:	71 81       	ldd	r23, Z+1	; 0x01
 9f6:	80 e0       	ldi	r24, 0x00	; 0
 9f8:	90 e0       	ldi	r25, 0x00	; 0
 9fa:	0e 5f       	subi	r16, 0xFE	; 254
 9fc:	1f 4f       	sbci	r17, 0xFF	; 255
 9fe:	a4 01       	movw	r20, r8
 a00:	0e 94 df 05 	call	0xbbe	; 0xbbe <__ultoa_invert>
 a04:	a8 2e       	mov	r10, r24
 a06:	a8 18       	sub	r10, r8
 a08:	fb 2d       	mov	r31, r11
 a0a:	ff 77       	andi	r31, 0x7F	; 127
 a0c:	7f 2e       	mov	r7, r31
 a0e:	76 fe       	sbrs	r7, 6
 a10:	0b c0       	rjmp	.+22     	; 0xa28 <__stack+0x129>
 a12:	37 2d       	mov	r19, r7
 a14:	3e 7f       	andi	r19, 0xFE	; 254
 a16:	a5 14       	cp	r10, r5
 a18:	50 f4       	brcc	.+20     	; 0xa2e <__stack+0x12f>
 a1a:	74 fe       	sbrs	r7, 4
 a1c:	0a c0       	rjmp	.+20     	; 0xa32 <__stack+0x133>
 a1e:	72 fc       	sbrc	r7, 2
 a20:	08 c0       	rjmp	.+16     	; 0xa32 <__stack+0x133>
 a22:	37 2d       	mov	r19, r7
 a24:	3e 7e       	andi	r19, 0xEE	; 238
 a26:	05 c0       	rjmp	.+10     	; 0xa32 <__stack+0x133>
 a28:	ba 2c       	mov	r11, r10
 a2a:	37 2d       	mov	r19, r7
 a2c:	03 c0       	rjmp	.+6      	; 0xa34 <__stack+0x135>
 a2e:	ba 2c       	mov	r11, r10
 a30:	01 c0       	rjmp	.+2      	; 0xa34 <__stack+0x135>
 a32:	b5 2c       	mov	r11, r5
 a34:	34 ff       	sbrs	r19, 4
 a36:	0d c0       	rjmp	.+26     	; 0xa52 <__stack+0x153>
 a38:	fe 01       	movw	r30, r28
 a3a:	ea 0d       	add	r30, r10
 a3c:	f1 1d       	adc	r31, r1
 a3e:	80 81       	ld	r24, Z
 a40:	80 33       	cpi	r24, 0x30	; 48
 a42:	11 f4       	brne	.+4      	; 0xa48 <__stack+0x149>
 a44:	39 7e       	andi	r19, 0xE9	; 233
 a46:	09 c0       	rjmp	.+18     	; 0xa5a <__stack+0x15b>
 a48:	32 ff       	sbrs	r19, 2
 a4a:	06 c0       	rjmp	.+12     	; 0xa58 <__stack+0x159>
 a4c:	b3 94       	inc	r11
 a4e:	b3 94       	inc	r11
 a50:	04 c0       	rjmp	.+8      	; 0xa5a <__stack+0x15b>
 a52:	83 2f       	mov	r24, r19
 a54:	86 78       	andi	r24, 0x86	; 134
 a56:	09 f0       	breq	.+2      	; 0xa5a <__stack+0x15b>
 a58:	b3 94       	inc	r11
 a5a:	33 fd       	sbrc	r19, 3
 a5c:	13 c0       	rjmp	.+38     	; 0xa84 <__stack+0x185>
 a5e:	30 ff       	sbrs	r19, 0
 a60:	06 c0       	rjmp	.+12     	; 0xa6e <__stack+0x16f>
 a62:	5a 2c       	mov	r5, r10
 a64:	b3 14       	cp	r11, r3
 a66:	18 f4       	brcc	.+6      	; 0xa6e <__stack+0x16f>
 a68:	53 0c       	add	r5, r3
 a6a:	5b 18       	sub	r5, r11
 a6c:	b3 2c       	mov	r11, r3
 a6e:	b3 14       	cp	r11, r3
 a70:	68 f4       	brcc	.+26     	; 0xa8c <__stack+0x18d>
 a72:	b7 01       	movw	r22, r14
 a74:	80 e2       	ldi	r24, 0x20	; 32
 a76:	90 e0       	ldi	r25, 0x00	; 0
 a78:	3c 87       	std	Y+12, r19	; 0x0c
 a7a:	0e 94 a7 05 	call	0xb4e	; 0xb4e <fputc>
 a7e:	b3 94       	inc	r11
 a80:	3c 85       	ldd	r19, Y+12	; 0x0c
 a82:	f5 cf       	rjmp	.-22     	; 0xa6e <__stack+0x16f>
 a84:	b3 14       	cp	r11, r3
 a86:	10 f4       	brcc	.+4      	; 0xa8c <__stack+0x18d>
 a88:	3b 18       	sub	r3, r11
 a8a:	01 c0       	rjmp	.+2      	; 0xa8e <__stack+0x18f>
 a8c:	31 2c       	mov	r3, r1
 a8e:	34 ff       	sbrs	r19, 4
 a90:	12 c0       	rjmp	.+36     	; 0xab6 <__stack+0x1b7>
 a92:	b7 01       	movw	r22, r14
 a94:	80 e3       	ldi	r24, 0x30	; 48
 a96:	90 e0       	ldi	r25, 0x00	; 0
 a98:	3c 87       	std	Y+12, r19	; 0x0c
 a9a:	0e 94 a7 05 	call	0xb4e	; 0xb4e <fputc>
 a9e:	3c 85       	ldd	r19, Y+12	; 0x0c
 aa0:	32 ff       	sbrs	r19, 2
 aa2:	17 c0       	rjmp	.+46     	; 0xad2 <__stack+0x1d3>
 aa4:	31 fd       	sbrc	r19, 1
 aa6:	03 c0       	rjmp	.+6      	; 0xaae <__stack+0x1af>
 aa8:	88 e7       	ldi	r24, 0x78	; 120
 aaa:	90 e0       	ldi	r25, 0x00	; 0
 aac:	02 c0       	rjmp	.+4      	; 0xab2 <__stack+0x1b3>
 aae:	88 e5       	ldi	r24, 0x58	; 88
 ab0:	90 e0       	ldi	r25, 0x00	; 0
 ab2:	b7 01       	movw	r22, r14
 ab4:	0c c0       	rjmp	.+24     	; 0xace <__stack+0x1cf>
 ab6:	83 2f       	mov	r24, r19
 ab8:	86 78       	andi	r24, 0x86	; 134
 aba:	59 f0       	breq	.+22     	; 0xad2 <__stack+0x1d3>
 abc:	31 ff       	sbrs	r19, 1
 abe:	02 c0       	rjmp	.+4      	; 0xac4 <__stack+0x1c5>
 ac0:	8b e2       	ldi	r24, 0x2B	; 43
 ac2:	01 c0       	rjmp	.+2      	; 0xac6 <__stack+0x1c7>
 ac4:	80 e2       	ldi	r24, 0x20	; 32
 ac6:	37 fd       	sbrc	r19, 7
 ac8:	8d e2       	ldi	r24, 0x2D	; 45
 aca:	b7 01       	movw	r22, r14
 acc:	90 e0       	ldi	r25, 0x00	; 0
 ace:	0e 94 a7 05 	call	0xb4e	; 0xb4e <fputc>
 ad2:	a5 14       	cp	r10, r5
 ad4:	38 f4       	brcc	.+14     	; 0xae4 <__stack+0x1e5>
 ad6:	b7 01       	movw	r22, r14
 ad8:	80 e3       	ldi	r24, 0x30	; 48
 ada:	90 e0       	ldi	r25, 0x00	; 0
 adc:	0e 94 a7 05 	call	0xb4e	; 0xb4e <fputc>
 ae0:	5a 94       	dec	r5
 ae2:	f7 cf       	rjmp	.-18     	; 0xad2 <__stack+0x1d3>
 ae4:	aa 94       	dec	r10
 ae6:	f4 01       	movw	r30, r8
 ae8:	ea 0d       	add	r30, r10
 aea:	f1 1d       	adc	r31, r1
 aec:	80 81       	ld	r24, Z
 aee:	b7 01       	movw	r22, r14
 af0:	90 e0       	ldi	r25, 0x00	; 0
 af2:	0e 94 a7 05 	call	0xb4e	; 0xb4e <fputc>
 af6:	a1 10       	cpse	r10, r1
 af8:	f5 cf       	rjmp	.-22     	; 0xae4 <__stack+0x1e5>
 afa:	33 20       	and	r3, r3
 afc:	09 f4       	brne	.+2      	; 0xb00 <__stack+0x201>
 afe:	51 ce       	rjmp	.-862    	; 0x7a2 <vfprintf+0x24>
 b00:	b7 01       	movw	r22, r14
 b02:	80 e2       	ldi	r24, 0x20	; 32
 b04:	90 e0       	ldi	r25, 0x00	; 0
 b06:	0e 94 a7 05 	call	0xb4e	; 0xb4e <fputc>
 b0a:	3a 94       	dec	r3
 b0c:	f6 cf       	rjmp	.-20     	; 0xafa <__stack+0x1fb>
 b0e:	f7 01       	movw	r30, r14
 b10:	86 81       	ldd	r24, Z+6	; 0x06
 b12:	97 81       	ldd	r25, Z+7	; 0x07
 b14:	02 c0       	rjmp	.+4      	; 0xb1a <__stack+0x21b>
 b16:	8f ef       	ldi	r24, 0xFF	; 255
 b18:	9f ef       	ldi	r25, 0xFF	; 255
 b1a:	2c 96       	adiw	r28, 0x0c	; 12
 b1c:	e2 e1       	ldi	r30, 0x12	; 18
 b1e:	0c 94 59 06 	jmp	0xcb2	; 0xcb2 <__epilogue_restores__>

00000b22 <strnlen_P>:
 b22:	fc 01       	movw	r30, r24
 b24:	05 90       	lpm	r0, Z+
 b26:	61 50       	subi	r22, 0x01	; 1
 b28:	70 40       	sbci	r23, 0x00	; 0
 b2a:	01 10       	cpse	r0, r1
 b2c:	d8 f7       	brcc	.-10     	; 0xb24 <strnlen_P+0x2>
 b2e:	80 95       	com	r24
 b30:	90 95       	com	r25
 b32:	8e 0f       	add	r24, r30
 b34:	9f 1f       	adc	r25, r31
 b36:	08 95       	ret

00000b38 <strnlen>:
 b38:	fc 01       	movw	r30, r24
 b3a:	61 50       	subi	r22, 0x01	; 1
 b3c:	70 40       	sbci	r23, 0x00	; 0
 b3e:	01 90       	ld	r0, Z+
 b40:	01 10       	cpse	r0, r1
 b42:	d8 f7       	brcc	.-10     	; 0xb3a <strnlen+0x2>
 b44:	80 95       	com	r24
 b46:	90 95       	com	r25
 b48:	8e 0f       	add	r24, r30
 b4a:	9f 1f       	adc	r25, r31
 b4c:	08 95       	ret

00000b4e <fputc>:
 b4e:	0f 93       	push	r16
 b50:	1f 93       	push	r17
 b52:	cf 93       	push	r28
 b54:	df 93       	push	r29
 b56:	fb 01       	movw	r30, r22
 b58:	23 81       	ldd	r18, Z+3	; 0x03
 b5a:	21 fd       	sbrc	r18, 1
 b5c:	03 c0       	rjmp	.+6      	; 0xb64 <fputc+0x16>
 b5e:	8f ef       	ldi	r24, 0xFF	; 255
 b60:	9f ef       	ldi	r25, 0xFF	; 255
 b62:	28 c0       	rjmp	.+80     	; 0xbb4 <fputc+0x66>
 b64:	22 ff       	sbrs	r18, 2
 b66:	16 c0       	rjmp	.+44     	; 0xb94 <fputc+0x46>
 b68:	46 81       	ldd	r20, Z+6	; 0x06
 b6a:	57 81       	ldd	r21, Z+7	; 0x07
 b6c:	24 81       	ldd	r18, Z+4	; 0x04
 b6e:	35 81       	ldd	r19, Z+5	; 0x05
 b70:	42 17       	cp	r20, r18
 b72:	53 07       	cpc	r21, r19
 b74:	44 f4       	brge	.+16     	; 0xb86 <fputc+0x38>
 b76:	a0 81       	ld	r26, Z
 b78:	b1 81       	ldd	r27, Z+1	; 0x01
 b7a:	9d 01       	movw	r18, r26
 b7c:	2f 5f       	subi	r18, 0xFF	; 255
 b7e:	3f 4f       	sbci	r19, 0xFF	; 255
 b80:	31 83       	std	Z+1, r19	; 0x01
 b82:	20 83       	st	Z, r18
 b84:	8c 93       	st	X, r24
 b86:	26 81       	ldd	r18, Z+6	; 0x06
 b88:	37 81       	ldd	r19, Z+7	; 0x07
 b8a:	2f 5f       	subi	r18, 0xFF	; 255
 b8c:	3f 4f       	sbci	r19, 0xFF	; 255
 b8e:	37 83       	std	Z+7, r19	; 0x07
 b90:	26 83       	std	Z+6, r18	; 0x06
 b92:	10 c0       	rjmp	.+32     	; 0xbb4 <fputc+0x66>
 b94:	eb 01       	movw	r28, r22
 b96:	09 2f       	mov	r16, r25
 b98:	18 2f       	mov	r17, r24
 b9a:	00 84       	ldd	r0, Z+8	; 0x08
 b9c:	f1 85       	ldd	r31, Z+9	; 0x09
 b9e:	e0 2d       	mov	r30, r0
 ba0:	09 95       	icall
 ba2:	89 2b       	or	r24, r25
 ba4:	e1 f6       	brne	.-72     	; 0xb5e <fputc+0x10>
 ba6:	8e 81       	ldd	r24, Y+6	; 0x06
 ba8:	9f 81       	ldd	r25, Y+7	; 0x07
 baa:	01 96       	adiw	r24, 0x01	; 1
 bac:	9f 83       	std	Y+7, r25	; 0x07
 bae:	8e 83       	std	Y+6, r24	; 0x06
 bb0:	81 2f       	mov	r24, r17
 bb2:	90 2f       	mov	r25, r16
 bb4:	df 91       	pop	r29
 bb6:	cf 91       	pop	r28
 bb8:	1f 91       	pop	r17
 bba:	0f 91       	pop	r16
 bbc:	08 95       	ret

00000bbe <__ultoa_invert>:
 bbe:	fa 01       	movw	r30, r20
 bc0:	aa 27       	eor	r26, r26
 bc2:	28 30       	cpi	r18, 0x08	; 8
 bc4:	51 f1       	breq	.+84     	; 0xc1a <__ultoa_invert+0x5c>
 bc6:	20 31       	cpi	r18, 0x10	; 16
 bc8:	81 f1       	breq	.+96     	; 0xc2a <__ultoa_invert+0x6c>
 bca:	e8 94       	clt
 bcc:	6f 93       	push	r22
 bce:	6e 7f       	andi	r22, 0xFE	; 254
 bd0:	6e 5f       	subi	r22, 0xFE	; 254
 bd2:	7f 4f       	sbci	r23, 0xFF	; 255
 bd4:	8f 4f       	sbci	r24, 0xFF	; 255
 bd6:	9f 4f       	sbci	r25, 0xFF	; 255
 bd8:	af 4f       	sbci	r26, 0xFF	; 255
 bda:	b1 e0       	ldi	r27, 0x01	; 1
 bdc:	3e d0       	rcall	.+124    	; 0xc5a <__ultoa_invert+0x9c>
 bde:	b4 e0       	ldi	r27, 0x04	; 4
 be0:	3c d0       	rcall	.+120    	; 0xc5a <__ultoa_invert+0x9c>
 be2:	67 0f       	add	r22, r23
 be4:	78 1f       	adc	r23, r24
 be6:	89 1f       	adc	r24, r25
 be8:	9a 1f       	adc	r25, r26
 bea:	a1 1d       	adc	r26, r1
 bec:	68 0f       	add	r22, r24
 bee:	79 1f       	adc	r23, r25
 bf0:	8a 1f       	adc	r24, r26
 bf2:	91 1d       	adc	r25, r1
 bf4:	a1 1d       	adc	r26, r1
 bf6:	6a 0f       	add	r22, r26
 bf8:	71 1d       	adc	r23, r1
 bfa:	81 1d       	adc	r24, r1
 bfc:	91 1d       	adc	r25, r1
 bfe:	a1 1d       	adc	r26, r1
 c00:	20 d0       	rcall	.+64     	; 0xc42 <__ultoa_invert+0x84>
 c02:	09 f4       	brne	.+2      	; 0xc06 <__ultoa_invert+0x48>
 c04:	68 94       	set
 c06:	3f 91       	pop	r19
 c08:	2a e0       	ldi	r18, 0x0A	; 10
 c0a:	26 9f       	mul	r18, r22
 c0c:	11 24       	eor	r1, r1
 c0e:	30 19       	sub	r19, r0
 c10:	30 5d       	subi	r19, 0xD0	; 208
 c12:	31 93       	st	Z+, r19
 c14:	de f6       	brtc	.-74     	; 0xbcc <__ultoa_invert+0xe>
 c16:	cf 01       	movw	r24, r30
 c18:	08 95       	ret
 c1a:	46 2f       	mov	r20, r22
 c1c:	47 70       	andi	r20, 0x07	; 7
 c1e:	40 5d       	subi	r20, 0xD0	; 208
 c20:	41 93       	st	Z+, r20
 c22:	b3 e0       	ldi	r27, 0x03	; 3
 c24:	0f d0       	rcall	.+30     	; 0xc44 <__ultoa_invert+0x86>
 c26:	c9 f7       	brne	.-14     	; 0xc1a <__ultoa_invert+0x5c>
 c28:	f6 cf       	rjmp	.-20     	; 0xc16 <__ultoa_invert+0x58>
 c2a:	46 2f       	mov	r20, r22
 c2c:	4f 70       	andi	r20, 0x0F	; 15
 c2e:	40 5d       	subi	r20, 0xD0	; 208
 c30:	4a 33       	cpi	r20, 0x3A	; 58
 c32:	18 f0       	brcs	.+6      	; 0xc3a <__ultoa_invert+0x7c>
 c34:	49 5d       	subi	r20, 0xD9	; 217
 c36:	31 fd       	sbrc	r19, 1
 c38:	40 52       	subi	r20, 0x20	; 32
 c3a:	41 93       	st	Z+, r20
 c3c:	02 d0       	rcall	.+4      	; 0xc42 <__ultoa_invert+0x84>
 c3e:	a9 f7       	brne	.-22     	; 0xc2a <__ultoa_invert+0x6c>
 c40:	ea cf       	rjmp	.-44     	; 0xc16 <__ultoa_invert+0x58>
 c42:	b4 e0       	ldi	r27, 0x04	; 4
 c44:	a6 95       	lsr	r26
 c46:	97 95       	ror	r25
 c48:	87 95       	ror	r24
 c4a:	77 95       	ror	r23
 c4c:	67 95       	ror	r22
 c4e:	ba 95       	dec	r27
 c50:	c9 f7       	brne	.-14     	; 0xc44 <__ultoa_invert+0x86>
 c52:	00 97       	sbiw	r24, 0x00	; 0
 c54:	61 05       	cpc	r22, r1
 c56:	71 05       	cpc	r23, r1
 c58:	08 95       	ret
 c5a:	9b 01       	movw	r18, r22
 c5c:	ac 01       	movw	r20, r24
 c5e:	0a 2e       	mov	r0, r26
 c60:	06 94       	lsr	r0
 c62:	57 95       	ror	r21
 c64:	47 95       	ror	r20
 c66:	37 95       	ror	r19
 c68:	27 95       	ror	r18
 c6a:	ba 95       	dec	r27
 c6c:	c9 f7       	brne	.-14     	; 0xc60 <__ultoa_invert+0xa2>
 c6e:	62 0f       	add	r22, r18
 c70:	73 1f       	adc	r23, r19
 c72:	84 1f       	adc	r24, r20
 c74:	95 1f       	adc	r25, r21
 c76:	a0 1d       	adc	r26, r0
 c78:	08 95       	ret

00000c7a <__prologue_saves__>:
 c7a:	2f 92       	push	r2
 c7c:	3f 92       	push	r3
 c7e:	4f 92       	push	r4
 c80:	5f 92       	push	r5
 c82:	6f 92       	push	r6
 c84:	7f 92       	push	r7
 c86:	8f 92       	push	r8
 c88:	9f 92       	push	r9
 c8a:	af 92       	push	r10
 c8c:	bf 92       	push	r11
 c8e:	cf 92       	push	r12
 c90:	df 92       	push	r13
 c92:	ef 92       	push	r14
 c94:	ff 92       	push	r15
 c96:	0f 93       	push	r16
 c98:	1f 93       	push	r17
 c9a:	cf 93       	push	r28
 c9c:	df 93       	push	r29
 c9e:	cd b7       	in	r28, 0x3d	; 61
 ca0:	de b7       	in	r29, 0x3e	; 62
 ca2:	ca 1b       	sub	r28, r26
 ca4:	db 0b       	sbc	r29, r27
 ca6:	0f b6       	in	r0, 0x3f	; 63
 ca8:	f8 94       	cli
 caa:	de bf       	out	0x3e, r29	; 62
 cac:	0f be       	out	0x3f, r0	; 63
 cae:	cd bf       	out	0x3d, r28	; 61
 cb0:	09 94       	ijmp

00000cb2 <__epilogue_restores__>:
 cb2:	2a 88       	ldd	r2, Y+18	; 0x12
 cb4:	39 88       	ldd	r3, Y+17	; 0x11
 cb6:	48 88       	ldd	r4, Y+16	; 0x10
 cb8:	5f 84       	ldd	r5, Y+15	; 0x0f
 cba:	6e 84       	ldd	r6, Y+14	; 0x0e
 cbc:	7d 84       	ldd	r7, Y+13	; 0x0d
 cbe:	8c 84       	ldd	r8, Y+12	; 0x0c
 cc0:	9b 84       	ldd	r9, Y+11	; 0x0b
 cc2:	aa 84       	ldd	r10, Y+10	; 0x0a
 cc4:	b9 84       	ldd	r11, Y+9	; 0x09
 cc6:	c8 84       	ldd	r12, Y+8	; 0x08
 cc8:	df 80       	ldd	r13, Y+7	; 0x07
 cca:	ee 80       	ldd	r14, Y+6	; 0x06
 ccc:	fd 80       	ldd	r15, Y+5	; 0x05
 cce:	0c 81       	ldd	r16, Y+4	; 0x04
 cd0:	1b 81       	ldd	r17, Y+3	; 0x03
 cd2:	aa 81       	ldd	r26, Y+2	; 0x02
 cd4:	b9 81       	ldd	r27, Y+1	; 0x01
 cd6:	ce 0f       	add	r28, r30
 cd8:	d1 1d       	adc	r29, r1
 cda:	0f b6       	in	r0, 0x3f	; 63
 cdc:	f8 94       	cli
 cde:	de bf       	out	0x3e, r29	; 62
 ce0:	0f be       	out	0x3f, r0	; 63
 ce2:	cd bf       	out	0x3d, r28	; 61
 ce4:	ed 01       	movw	r28, r26
 ce6:	08 95       	ret

00000ce8 <_exit>:
 ce8:	f8 94       	cli

00000cea <__stop_program>:
 cea:	ff cf       	rjmp	.-2      	; 0xcea <__stop_program>
