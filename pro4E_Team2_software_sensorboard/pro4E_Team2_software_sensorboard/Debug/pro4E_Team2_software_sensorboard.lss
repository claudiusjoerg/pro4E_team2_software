
pro4E_Team2_software_sensorboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000126  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000126  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000140  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000f6  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000014d  00000000  00000000  000003f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000544  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001dc  00000000  00000000  00000578  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00000754  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4c 00 	call	0x98	; 0x98 <main>
  78:	0c 94 67 00 	jmp	0xce	; 0xce <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <init>:

void init(void)
{
	//Output (low): DDxn 1, Portxn 0
	//LED1 = PIND6;LED2 = PINB1;LED3 = PINB2;LED4 = PINB4;LED5 = PIND7;LED6 = PIND5;
	PORTB = 0b00000000;
  80:	15 b8       	out	0x05, r1	; 5
	DDRB |= (0<<7)|(0<<6)|(0<<5)|(1<<4)|(0<<3)|(1<<2)|(1<<1)|(0<<0);
  82:	84 b1       	in	r24, 0x04	; 4
  84:	86 61       	ori	r24, 0x16	; 22
  86:	84 b9       	out	0x04, r24	; 4
	PORTC = 0b00000000;
  88:	18 b8       	out	0x08, r1	; 8
	DDRC |= (0<<7)|(0<<6)|(0<<5)|(0<<4)|(0<<3)|(0<<2)|(0<<1)|(0<<0);
  8a:	87 b1       	in	r24, 0x07	; 7
  8c:	87 b9       	out	0x07, r24	; 7
	PORTD = 0b00000000;
  8e:	1b b8       	out	0x0b, r1	; 11
	DDRD |= (1<<7)|(1<<6)|(0<<5)|(0<<4)|(0<<3)|(1<<2)|(0<<1)|(0<<0);
  90:	8a b1       	in	r24, 0x0a	; 10
  92:	84 6c       	ori	r24, 0xC4	; 196
  94:	8a b9       	out	0x0a, r24	; 10
  96:	08 95       	ret

00000098 <main>:
	
int main(void)
{
	//init_adc();
	//SPI_MasterInit();
	init();
  98:	0e 94 40 00 	call	0x80	; 0x80 <init>
		PORTB |= (value & 0x2<<LED2);
		PORTB |= (value & 0x4<<LED3);
		PORTB |= (value & 0x8<<LED4);
		PORTD |= (value & 0x10<<LED5);
		PORTD |= (value & 0x20<<LED6);
		ChipSelect = OFF;
  9c:	91 e0       	ldi	r25, 0x01	; 1
	
	int value;
	
	while(1)
	{
		ChipSelect = ON;
  9e:	1b b8       	out	0x0b, r1	; 11
		value = ADCwert;
		PORTD |= (value & 0x1<<LED1);
  a0:	8b b1       	in	r24, 0x0b	; 11
  a2:	8b b9       	out	0x0b, r24	; 11
		PORTB |= (value & 0x2<<LED2);
  a4:	85 b1       	in	r24, 0x05	; 5
  a6:	85 b9       	out	0x05, r24	; 5
		PORTB |= (value & 0x4<<LED3);
  a8:	85 b1       	in	r24, 0x05	; 5
  aa:	85 b9       	out	0x05, r24	; 5
		PORTB |= (value & 0x8<<LED4);
  ac:	85 b1       	in	r24, 0x05	; 5
  ae:	85 b9       	out	0x05, r24	; 5
		PORTD |= (value & 0x10<<LED5);
  b0:	8b b1       	in	r24, 0x0b	; 11
  b2:	8b b9       	out	0x0b, r24	; 11
		PORTD |= (value & 0x20<<LED6);
  b4:	8b b1       	in	r24, 0x0b	; 11
  b6:	8b b9       	out	0x0b, r24	; 11
		ChipSelect = OFF;
  b8:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	2f ef       	ldi	r18, 0xFF	; 255
  bc:	30 e7       	ldi	r19, 0x70	; 112
  be:	82 e0       	ldi	r24, 0x02	; 2
  c0:	21 50       	subi	r18, 0x01	; 1
  c2:	30 40       	sbci	r19, 0x00	; 0
  c4:	80 40       	sbci	r24, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <main+0x28>
  c8:	00 c0       	rjmp	.+0      	; 0xca <main+0x32>
  ca:	00 00       	nop
  cc:	e8 cf       	rjmp	.-48     	; 0x9e <main+0x6>

000000ce <_exit>:
  ce:	f8 94       	cli

000000d0 <__stop_program>:
  d0:	ff cf       	rjmp	.-2      	; 0xd0 <__stop_program>
