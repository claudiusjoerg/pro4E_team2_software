
pro4E_Team2_software_sensorboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000132  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000de  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000132  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000164  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000190  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000110  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000151  00000000  00000000  0000047c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000005d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001f7  00000000  00000000  00000624  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000018  00000000  00000000  0000081b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00000833  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5c 00 	call	0xb8	; 0xb8 <main>
  78:	0c 94 6d 00 	jmp	0xda	; 0xda <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <init>:
void init_adc(void); 
int read_adc(void);

void init(void)
{
	PORTB = 0b00000000;
  80:	15 b8       	out	0x05, r1	; 5
	DDRB = 0b00111111;
  82:	8f e3       	ldi	r24, 0x3F	; 63
  84:	84 b9       	out	0x04, r24	; 4
	PORTC = 0b00000000;
  86:	18 b8       	out	0x08, r1	; 8
	DDRC = 0b00000000;
  88:	17 b8       	out	0x07, r1	; 7
  8a:	08 95       	ret

0000008c <init_adc>:
	return 0;
}

void init_adc(void)
{
	ADMUX = 01000101; //AVCC with external capacitor at AREF pin, Pin ADC0
  8c:	81 e4       	ldi	r24, 0x41	; 65
  8e:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADEN)|(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2); //Binary: 0b10000111, ADC is enabled, division factor is 128
  92:	ea e7       	ldi	r30, 0x7A	; 122
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	80 81       	ld	r24, Z
  98:	87 68       	ori	r24, 0x87	; 135
  9a:	80 83       	st	Z, r24
  9c:	08 95       	ret

0000009e <read_adc>:
}

int read_adc(void)
{
	ADCSRA = ADCSRA | (1<<6);
  9e:	ea e7       	ldi	r30, 0x7A	; 122
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	80 64       	ori	r24, 0x40	; 64
  a6:	80 83       	st	Z, r24
	while(ADCSRA & (1<<6))
  a8:	80 81       	ld	r24, Z
  aa:	86 fd       	sbrc	r24, 6
  ac:	fd cf       	rjmp	.-6      	; 0xa8 <read_adc+0xa>
	{

	}
	return ADC;
  ae:	80 91 78 00 	lds	r24, 0x0078
  b2:	90 91 79 00 	lds	r25, 0x0079
  b6:	08 95       	ret

000000b8 <main>:
	DDRC = 0b00000000;
}
	
int main(void)
{
	init_adc();
  b8:	0e 94 46 00 	call	0x8c	; 0x8c <init_adc>
	init();
  bc:	0e 94 40 00 	call	0x80	; 0x80 <init>
	int value;
	//int value_mv;
	
	while(1)
	{
		value = read_adc();
  c0:	0e 94 4f 00 	call	0x9e	; 0x9e <read_adc>
		//value_mv = (double)value;
		PORTB = value;
  c4:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	2f ef       	ldi	r18, 0xFF	; 255
  c8:	81 ee       	ldi	r24, 0xE1	; 225
  ca:	94 e0       	ldi	r25, 0x04	; 4
  cc:	21 50       	subi	r18, 0x01	; 1
  ce:	80 40       	sbci	r24, 0x00	; 0
  d0:	90 40       	sbci	r25, 0x00	; 0
  d2:	e1 f7       	brne	.-8      	; 0xcc <main+0x14>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <main+0x1e>
  d6:	00 00       	nop
  d8:	f3 cf       	rjmp	.-26     	; 0xc0 <main+0x8>

000000da <_exit>:
  da:	f8 94       	cli

000000dc <__stop_program>:
  dc:	ff cf       	rjmp	.-2      	; 0xdc <__stop_program>
