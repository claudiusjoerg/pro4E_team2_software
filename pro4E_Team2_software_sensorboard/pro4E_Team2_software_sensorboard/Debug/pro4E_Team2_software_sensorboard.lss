
pro4E_Team2_software_sensorboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000014c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000017c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001a4  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000136  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000017e  00000000  00000000  000004ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  0000064c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000204  00000000  00000000  000006a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000021  00000000  00000000  000008a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000008c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 57 00 	call	0xae	; 0xae <main>
  78:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <init>:

void init(void)
{
	//Output (low): DDxn 1, Portxn 0
	//LED1 = PIND6;LED2 = PINB1;LED3 = PINB2;LED4 = PINB4;LED5 = PIND7;LED6 = PIND5;
	PORTB = 0b00000000;
  80:	15 b8       	out	0x05, r1	; 5
	DDRB |= (0<<7)|(0<<6)|(0<<5)|(1<<4)|(0<<3)|(1<<2)|(1<<1)|(0<<0);
  82:	84 b1       	in	r24, 0x04	; 4
  84:	86 61       	ori	r24, 0x16	; 22
  86:	84 b9       	out	0x04, r24	; 4
	PORTC = 0b00000000;
  88:	18 b8       	out	0x08, r1	; 8
	DDRC |= (0<<7)|(0<<6)|(0<<5)|(0<<4)|(0<<3)|(0<<2)|(0<<1)|(0<<0);
  8a:	87 b1       	in	r24, 0x07	; 7
  8c:	87 b9       	out	0x07, r24	; 7
	PORTD = 0b00000100;
  8e:	84 e0       	ldi	r24, 0x04	; 4
  90:	8b b9       	out	0x0b, r24	; 11
	DDRD |= (1<<7)|(1<<6)|(0<<5)|(0<<4)|(0<<3)|(1<<2)|(0<<1)|(0<<0);
  92:	8a b1       	in	r24, 0x0a	; 10
  94:	84 6c       	ori	r24, 0xC4	; 196
  96:	8a b9       	out	0x0a, r24	; 10
  98:	08 95       	ret

0000009a <SPI_MasterInit>:

// SPI Communication
void SPI_MasterInit(void)
{
	// Set MOSI and SCK output, all others input
	DDRB = (1<<DDB3)|(1<<DDB5);
  9a:	88 e2       	ldi	r24, 0x28	; 40
  9c:	84 b9       	out	0x04, r24	; 4
	// Enable SPI, Master, set clock rate f_ck/16
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
  9e:	81 e5       	ldi	r24, 0x51	; 81
  a0:	8c bd       	out	0x2c, r24	; 44
  a2:	08 95       	ret

000000a4 <SPI_MasterTransmit>:
}
void SPI_MasterTransmit(int cData)
{
	// Start transmission
	SPDR = cData;
  a4:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF))) //SPIF Transmission Flag
  a6:	0d b4       	in	r0, 0x2d	; 45
  a8:	07 fe       	sbrs	r0, 7
  aa:	fd cf       	rjmp	.-6      	; 0xa6 <SPI_MasterTransmit+0x2>
	;
}
  ac:	08 95       	ret

000000ae <main>:
//}
	
int main(void)
{
	//init_adc();
	SPI_MasterInit();
  ae:	0e 94 4d 00 	call	0x9a	; 0x9a <SPI_MasterInit>
	init();
  b2:	0e 94 40 00 	call	0x80	; 0x80 <init>
	
	while(1)
	{
		value = 0xff;
		SPI_MasterTransmit(value);
		PORTB = (1<<3); //signal the end of packet
  b6:	d8 e0       	ldi	r29, 0x08	; 8
		ChipSelect = ON;
		value = ADCwert;
		ChipSelect = OFF;
  b8:	c1 e0       	ldi	r28, 0x01	; 1
	int value;
	
	while(1)
	{
		value = 0xff;
		SPI_MasterTransmit(value);
  ba:	8f ef       	ldi	r24, 0xFF	; 255
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	0e 94 52 00 	call	0xa4	; 0xa4 <SPI_MasterTransmit>
		PORTB = (1<<3); //signal the end of packet
  c2:	d5 b9       	out	0x05, r29	; 5
		ChipSelect = ON;
  c4:	1b b8       	out	0x0b, r1	; 11
		value = ADCwert;
		ChipSelect = OFF;
  c6:	cb b9       	out	0x0b, r28	; 11
		PORTD |= (value & 0x1<<LED1);
  c8:	8b b1       	in	r24, 0x0b	; 11
  ca:	8b b9       	out	0x0b, r24	; 11
		PORTB |= (value & 0x2<<LED2);
  cc:	85 b1       	in	r24, 0x05	; 5
  ce:	85 b9       	out	0x05, r24	; 5
		PORTD |= (value & 0x4<<LED3);
  d0:	8b b1       	in	r24, 0x0b	; 11
  d2:	8b b9       	out	0x0b, r24	; 11
		PORTB |= (value & 0x8<<LED4);
  d4:	85 b1       	in	r24, 0x05	; 5
  d6:	85 b9       	out	0x05, r24	; 5
		PORTD |= (value & 0x10<<LED5);
  d8:	8b b1       	in	r24, 0x0b	; 11
  da:	8b b9       	out	0x0b, r24	; 11
		PORTD |= (value & 0x20<<LED6);
  dc:	8b b1       	in	r24, 0x0b	; 11
  de:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	2f ef       	ldi	r18, 0xFF	; 255
  e2:	80 e7       	ldi	r24, 0x70	; 112
  e4:	92 e0       	ldi	r25, 0x02	; 2
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <main+0x38>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <main+0x42>
  f0:	00 00       	nop
  f2:	e3 cf       	rjmp	.-58     	; 0xba <main+0xc>

000000f4 <_exit>:
  f4:	f8 94       	cli

000000f6 <__stop_program>:
  f6:	ff cf       	rjmp	.-2      	; 0xf6 <__stop_program>
