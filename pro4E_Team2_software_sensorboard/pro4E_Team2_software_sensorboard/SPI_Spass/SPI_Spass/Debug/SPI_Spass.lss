
SPI_Spass.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000116  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000116  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000148  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000e6  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000009b  00000000  00000000  0000029a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000d0  00000000  00000000  00000335  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00000408  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000164  00000000  00000000  0000044c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  000005b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5a 00 	call	0xb4	; 0xb4 <main>
  78:	0c 94 5f 00 	jmp	0xbe	; 0xbe <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <initSPI>:
#include <util/delay.h>
#include <stdio.h>


void initSPI(){
	DDRB = 0b0111;
  80:	87 e0       	ldi	r24, 0x07	; 7
  82:	84 b9       	out	0x04, r24	; 4
	SPCR &= ~((1<<CPOL)|(1<<DORD));
  84:	8c b5       	in	r24, 0x2c	; 44
  86:	87 7d       	andi	r24, 0xD7	; 215
  88:	8c bd       	out	0x2c, r24	; 44
	SPCR |= ((1<<SPE)|(1<<MSTR)|(1<<CPHA));
  8a:	8c b5       	in	r24, 0x2c	; 44
  8c:	84 65       	ori	r24, 0x54	; 84
  8e:	8c bd       	out	0x2c, r24	; 44
	SPCR &= ~((1<<SPR1)|(1<<SPR0));				//f_transmit = fosc/64 --> 16MHz/64
  90:	8c b5       	in	r24, 0x2c	; 44
  92:	8c 7f       	andi	r24, 0xFC	; 252
  94:	8c bd       	out	0x2c, r24	; 44
	SPSR &= ~(1<<SPI2X);
  96:	8d b5       	in	r24, 0x2d	; 45
  98:	8e 7f       	andi	r24, 0xFE	; 254
  9a:	8d bd       	out	0x2d, r24	; 45
	SPSR |= (1<<SPI2X);
  9c:	8d b5       	in	r24, 0x2d	; 45
  9e:	81 60       	ori	r24, 0x01	; 1
  a0:	8d bd       	out	0x2d, r24	; 45
  a2:	08 95       	ret

000000a4 <ADC_receive>:

short ADC_receive(){
	//transmit
	char Din= 0b1101;				//Startbit + Config die über SPI gesendet werden müssen
	
	SPDR = Din;
  a4:	8d e0       	ldi	r24, 0x0D	; 13
  a6:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
  a8:	0d b4       	in	r0, 0x2d	; 45
  aa:	07 fe       	sbrs	r0, 7
  ac:	fd cf       	rjmp	.-6      	; 0xa8 <ADC_receive+0x4>
	return 0;
}
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	08 95       	ret

000000b4 <main>:


int main(){
	
	initSPI();
  b4:	0e 94 40 00 	call	0x80	; 0x80 <initSPI>
	while(1){
		ADC_receive();
  b8:	0e 94 52 00 	call	0xa4	; 0xa4 <ADC_receive>
		
	}
  bc:	fd cf       	rjmp	.-6      	; 0xb8 <main+0x4>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>
