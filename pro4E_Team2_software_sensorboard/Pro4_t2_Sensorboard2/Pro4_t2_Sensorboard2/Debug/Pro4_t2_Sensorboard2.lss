
Pro4_t2_Sensorboard2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000398  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000324  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  00800100  00800100  00000398  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006c7  00000000  00000000  000004cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000035d  00000000  00000000  00000b93  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003a1  00000000  00000000  00000ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ac  00000000  00000000  00001294  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002ee  00000000  00000000  00001440  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000043e  00000000  00000000  0000172e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00001b6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__ctors_end>
   4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   8:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  10:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  14:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  18:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  1c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  20:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  24:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  28:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  2c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  30:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  34:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  3c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  40:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  44:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  48:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__vector_18>
  4c:	0c 94 08 01 	jmp	0x210	; 0x210 <__vector_19>
  50:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  54:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  58:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  5c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  60:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  64:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	42 75       	andi	r20, 0x52	; 82
  6a:	66 66       	ori	r22, 0x66	; 102
  6c:	65 72       	andi	r22, 0x25	; 37
  6e:	20 6f       	ori	r18, 0xF0	; 240
  70:	76 65       	ori	r23, 0x56	; 86
  72:	72 66       	ori	r23, 0x62	; 98
  74:	6c 6f       	ori	r22, 0xFC	; 252
  76:	77 20       	and	r7, r7
  78:	65 72       	andi	r22, 0x25	; 37
  7a:	72 6f       	ori	r23, 0xF2	; 242
  7c:	72 3a       	cpi	r23, 0xA2	; 162
  7e:	20 00       	.word	0x0020	; ????

00000080 <__c.2075>:
  80:	55 41 52 54 20 4f 76 65 72 72 75 6e 20 45 72 72     UART Overrun Err
  90:	6f 72 3a 20 00                                      or: .

00000095 <__c.2073>:
  95:	55 41 52 54 20 46 72 61 6d 65 20 45 72 72 6f 72     UART Frame Error
  a5:	3a 20 00                                            : .

000000a8 <__ctors_end>:
  a8:	11 24       	eor	r1, r1
  aa:	1f be       	out	0x3f, r1	; 63
  ac:	cf ef       	ldi	r28, 0xFF	; 255
  ae:	d8 e0       	ldi	r29, 0x08	; 8
  b0:	de bf       	out	0x3e, r29	; 62
  b2:	cd bf       	out	0x3d, r28	; 61

000000b4 <__do_clear_bss>:
  b4:	21 e0       	ldi	r18, 0x01	; 1
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
  bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
  be:	a5 34       	cpi	r26, 0x45	; 69
  c0:	b2 07       	cpc	r27, r18
  c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>
  c4:	0e 94 75 00 	call	0xea	; 0xea <main>
  c8:	0c 94 90 01 	jmp	0x320	; 0x320 <_exit>

000000cc <__bad_interrupt>:
  cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d0 <init>:

void init(void)
{
	//Output (low): DDxn 1, Portxn 0
	//LED1 = PIND6;LED2 = PINB1;LED3 = PINB2;LED4 = PINB4;LED5 = PIND7;LED6 = PIND5;
	PORTB = 0b00000000;
  d0:	15 b8       	out	0x05, r1	; 5
	DDRB |= (0<<7)|(0<<6)|(0<<5)|(1<<4)|(0<<3)|(1<<2)|(1<<1)|(0<<0);
  d2:	84 b1       	in	r24, 0x04	; 4
  d4:	86 61       	ori	r24, 0x16	; 22
  d6:	84 b9       	out	0x04, r24	; 4
	PORTC = 0b00000000;
  d8:	18 b8       	out	0x08, r1	; 8
	DDRC |= (0<<7)|(0<<6)|(0<<5)|(0<<4)|(0<<3)|(0<<2)|(0<<1)|(0<<0);
  da:	87 b1       	in	r24, 0x07	; 7
  dc:	87 b9       	out	0x07, r24	; 7
	PORTD = 0b00000100;
  de:	84 e0       	ldi	r24, 0x04	; 4
  e0:	8b b9       	out	0x0b, r24	; 11
	DDRD |= (1<<7)|(1<<6)|(0<<5)|(0<<4)|(0<<3)|(1<<2)|(0<<1)|(0<<0);
  e2:	8a b1       	in	r24, 0x0a	; 10
  e4:	84 6c       	ori	r24, 0xC4	; 196
  e6:	8a b9       	out	0x0a, r24	; 10
  e8:	08 95       	ret

000000ea <main>:

	
int main(void)
{

	init();	
  ea:	0e 94 68 00 	call	0xd0	; 0xd0 <init>
	initSPI();
  ee:	0e 94 81 00 	call	0x102	; 0x102 <initSPI>
	init_Tranceiver();
  f2:	0e 94 9b 00 	call	0x136	; 0x136 <init_Tranceiver>
	sei();
  f6:	78 94       	sei

	while(1)
	{
		
		ADC_receive();//SPI.h
  f8:	0e 94 8a 00 	call	0x114	; 0x114 <ADC_receive>
		
		//_delay_ms(20);
		
		uebertragung_uart();//Tranceiver.h
  fc:	0e 94 a6 00 	call	0x14c	; 0x14c <uebertragung_uart>
	}
 100:	fb cf       	rjmp	.-10     	; 0xf8 <main+0xe>

00000102 <initSPI>:

#include "SPI.h"


void initSPI(){
	DDRB = (1<<PORTB3)|(1<<PORTB5)|(1<<PORTB2);//0b011100;
 102:	8c e2       	ldi	r24, 0x2C	; 44
 104:	84 b9       	out	0x04, r24	; 4
	SPCR &= ~((1<<CPOL)|(1<<DORD));
 106:	8c b5       	in	r24, 0x2c	; 44
 108:	87 7d       	andi	r24, 0xD7	; 215
 10a:	8c bd       	out	0x2c, r24	; 44
	SPCR |= ((1<<SPE)|(1<<MSTR)|(1<<CPHA)|(1<<CPOL)|(1<<SPR0));
 10c:	8c b5       	in	r24, 0x2c	; 44
 10e:	8d 65       	ori	r24, 0x5D	; 93
 110:	8c bd       	out	0x2c, r24	; 44
 112:	08 95       	ret

00000114 <ADC_receive>:
	//SPSR &= ~(1<<SPI2X);// Doppelte Geschwindigkeit
	//SPSR |= (1<<SPI2X);
}


char ADC_receive(){
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	1f 92       	push	r1
 11a:	cd b7       	in	r28, 0x3d	; 61
 11c:	de b7       	in	r29, 0x3e	; 62
	//transmit
	volatile unsigned char Dout= 0b1101;				//Startbit + Config die über SPI gesendet werden müssen
 11e:	8d e0       	ldi	r24, 0x0D	; 13
 120:	89 83       	std	Y+1, r24	; 0x01
	
	// Start transmission (MOSI)
	SPDR = Dout;
 122:	89 81       	ldd	r24, Y+1	; 0x01
 124:	8e bd       	out	0x2e, r24	; 46
	
	while(!(SPSR & (1<<SPIF)));
 126:	0d b4       	in	r0, 0x2d	; 45
 128:	07 fe       	sbrs	r0, 7
 12a:	fd cf       	rjmp	.-6      	; 0x126 <ADC_receive+0x12>
	
	return SPDR;
 12c:	8e b5       	in	r24, 0x2e	; 46
 12e:	0f 90       	pop	r0
 130:	df 91       	pop	r29
 132:	cf 91       	pop	r28
 134:	08 95       	ret

00000136 <init_Tranceiver>:
#include "Tranceiver.h"

void init_Tranceiver(){
	//Einstellungen UART
	uart_init(2400);
 136:	80 e6       	ldi	r24, 0x60	; 96
 138:	99 e0       	ldi	r25, 0x09	; 9
 13a:	0e 94 32 01 	call	0x264	; 0x264 <uart_init>
	PORTC=(1<<PORTC4);//Choose UART
 13e:	80 e1       	ldi	r24, 0x10	; 16
 140:	88 b9       	out	0x08, r24	; 8
	
	//Transmission Mode
	//REG_DATA Hardwaremässig auf Ground
	PORTC |= (0<<PORTC6); //RxDx = 0
 142:	88 b1       	in	r24, 0x08	; 8
 144:	88 b9       	out	0x08, r24	; 8
	
	//Datenpin aktivieren
	DDRD = 0b00000010; //TxD = 1
 146:	82 e0       	ldi	r24, 0x02	; 2
 148:	8a b9       	out	0x0a, r24	; 10
 14a:	08 95       	ret

0000014c <uebertragung_uart>:
}

void uebertragung_uart() {
 14c:	ef 92       	push	r14
 14e:	ff 92       	push	r15
 150:	0f 93       	push	r16
 152:	1f 93       	push	r17
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
	//Daten Input vom ADC
	 uint8_t data = ADC_receive();
 158:	0e 94 8a 00 	call	0x114	; 0x114 <ADC_receive>
 15c:	e8 2e       	mov	r14, r24
 15e:	08 e0       	ldi	r16, 0x08	; 8
 160:	10 e0       	ldi	r17, 0x00	; 0
     *  The string is buffered by the uart library in a circular buffer
     *  and one character at a time is transmitted to the UART using interrupts.
     *  uart_puts() blocks if it can not write the whole string to the circular 
     *  buffer
     */
    uart_putc(data);
 162:	8e 2d       	mov	r24, r14
 164:	0e 94 69 01 	call	0x2d2	; 0x2d2 <uart_putc>
         * uart_getc() returns in the lower byte the received character and 
         * in the higher byte (bitmask) the last receive error
         * UART_NO_DATA is returned when no data is available.
         *
         */
		int bit = uart_getc();
 168:	0e 94 4b 01 	call	0x296	; 0x296 <uart_getc>
 16c:	f8 2e       	mov	r15, r24
 16e:	c8 2f       	mov	r28, r24
 170:	d9 2f       	mov	r29, r25
		
        if ( bit & UART_NO_DATA )
 172:	d0 fd       	sbrc	r29, 0
 174:	15 c0       	rjmp	.+42     	; 0x1a0 <uebertragung_uart+0x54>
        {
            /*
             * new data available from UART
             * check for Frame or Overrun error
             */
            if ( bit & UART_FRAME_ERROR )
 176:	d4 ff       	sbrs	r29, 4
 178:	04 c0       	rjmp	.+8      	; 0x182 <uebertragung_uart+0x36>
            {
                /* Framing Error detected, i.e no stop bit detected */
                uart_puts_P("UART Frame Error: ");
 17a:	85 e9       	ldi	r24, 0x95	; 149
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0e 94 7e 01 	call	0x2fc	; 0x2fc <uart_puts_p>
            }
            if ( bit & UART_OVERRUN_ERROR )
 182:	d3 ff       	sbrs	r29, 3
 184:	04 c0       	rjmp	.+8      	; 0x18e <uebertragung_uart+0x42>
                /* 
                 * Overrun, a character already present in the UART UDR register was 
                 * not read by the interrupt handler before the next character arrived,
                 * one or more received characters have been dropped
                 */
                uart_puts_P("UART Overrun Error: ");
 186:	80 e8       	ldi	r24, 0x80	; 128
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	0e 94 7e 01 	call	0x2fc	; 0x2fc <uart_puts_p>
            }
            if ( bit & UART_BUFFER_OVERFLOW )
 18e:	d1 ff       	sbrs	r29, 1
 190:	04 c0       	rjmp	.+8      	; 0x19a <uebertragung_uart+0x4e>
            {
                /* 
                 * We are not reading the receive buffer fast enough,
                 * one or more received character have been dropped 
                 */
                uart_puts_P("Buffer overflow error: ");
 192:	88 e6       	ldi	r24, 0x68	; 104
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 7e 01 	call	0x2fc	; 0x2fc <uart_puts_p>
            }
            /* 
             * send received character back
             */
            uart_putc( (uint8_t )bit );
 19a:	8f 2d       	mov	r24, r15
 19c:	0e 94 69 01 	call	0x2d2	; 0x2d2 <uart_putc>
 1a0:	01 50       	subi	r16, 0x01	; 1
 1a2:	11 09       	sbc	r17, r1
	//Daten Input vom ADC
	 uint8_t data = ADC_receive();
	//data = mittelwert(data);

	//char *buffer = "Not implemented";
	for (int i=0; i<8; i++)
 1a4:	f1 f6       	brne	.-68     	; 0x162 <uebertragung_uart+0x16>
             * send received character back
             */
            uart_putc( (uint8_t )bit );
		}
	}
 1a6:	df 91       	pop	r29
 1a8:	cf 91       	pop	r28
 1aa:	1f 91       	pop	r17
 1ac:	0f 91       	pop	r16
 1ae:	ff 90       	pop	r15
 1b0:	ef 90       	pop	r14
 1b2:	08 95       	ret

000001b4 <__vector_18>:
ISR (UART0_RECEIVE_INTERRUPT)	
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
 1b4:	1f 92       	push	r1
 1b6:	0f 92       	push	r0
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	0f 92       	push	r0
 1bc:	11 24       	eor	r1, r1
 1be:	2f 93       	push	r18
 1c0:	8f 93       	push	r24
 1c2:	9f 93       	push	r25
 1c4:	ef 93       	push	r30
 1c6:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */
    usr  = UART0_STATUS;
 1c8:	80 91 c0 00 	lds	r24, 0x00C0
    data = UART0_DATA;
 1cc:	20 91 c6 00 	lds	r18, 0x00C6
    
    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
#if defined(FE) && defined(DOR) && defined(UPE)
    lastRxError = usr & (_BV(FE)|_BV(DOR)|_BV(UPE) );
#elif defined(FE0) && defined(DOR0) && defined(UPE0)
    lastRxError = usr & (_BV(FE0)|_BV(DOR0)|_BV(UPE0) );
 1d0:	8c 71       	andi	r24, 0x1C	; 28
#elif defined(FE) && defined(DOR)
    lastRxError = usr & (_BV(FE)|_BV(DOR) );
#endif

    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 1d2:	e0 91 02 01 	lds	r30, 0x0102
 1d6:	ef 5f       	subi	r30, 0xFF	; 255
 1d8:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
 1da:	90 91 01 01 	lds	r25, 0x0101
 1de:	e9 17       	cp	r30, r25
 1e0:	39 f0       	breq	.+14     	; 0x1f0 <__vector_18+0x3c>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
 1e2:	e0 93 02 01 	sts	0x0102, r30
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	eb 5f       	subi	r30, 0xFB	; 251
 1ea:	fe 4f       	sbci	r31, 0xFE	; 254
 1ec:	20 83       	st	Z, r18
 1ee:	01 c0       	rjmp	.+2      	; 0x1f2 <__vector_18+0x3e>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 1f0:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;   
 1f2:	90 91 00 01 	lds	r25, 0x0100
 1f6:	89 2b       	or	r24, r25
 1f8:	80 93 00 01 	sts	0x0100, r24
}
 1fc:	ff 91       	pop	r31
 1fe:	ef 91       	pop	r30
 200:	9f 91       	pop	r25
 202:	8f 91       	pop	r24
 204:	2f 91       	pop	r18
 206:	0f 90       	pop	r0
 208:	0f be       	out	0x3f, r0	; 63
 20a:	0f 90       	pop	r0
 20c:	1f 90       	pop	r1
 20e:	18 95       	reti

00000210 <__vector_19>:
ISR (UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
 210:	1f 92       	push	r1
 212:	0f 92       	push	r0
 214:	0f b6       	in	r0, 0x3f	; 63
 216:	0f 92       	push	r0
 218:	11 24       	eor	r1, r1
 21a:	8f 93       	push	r24
 21c:	9f 93       	push	r25
 21e:	ef 93       	push	r30
 220:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
 222:	90 91 04 01 	lds	r25, 0x0104
 226:	80 91 03 01 	lds	r24, 0x0103
 22a:	98 17       	cp	r25, r24
 22c:	69 f0       	breq	.+26     	; 0x248 <__vector_19+0x38>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 22e:	e0 91 03 01 	lds	r30, 0x0103
 232:	ef 5f       	subi	r30, 0xFF	; 255
 234:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
 236:	e0 93 03 01 	sts	0x0103, r30
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	eb 5d       	subi	r30, 0xDB	; 219
 23e:	fe 4f       	sbci	r31, 0xFE	; 254
 240:	80 81       	ld	r24, Z
 242:	80 93 c6 00 	sts	0x00C6, r24
 246:	05 c0       	rjmp	.+10     	; 0x252 <__vector_19+0x42>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 248:	e1 ec       	ldi	r30, 0xC1	; 193
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	8f 7d       	andi	r24, 0xDF	; 223
 250:	80 83       	st	Z, r24
    }
}
 252:	ff 91       	pop	r31
 254:	ef 91       	pop	r30
 256:	9f 91       	pop	r25
 258:	8f 91       	pop	r24
 25a:	0f 90       	pop	r0
 25c:	0f be       	out	0x3f, r0	; 63
 25e:	0f 90       	pop	r0
 260:	1f 90       	pop	r1
 262:	18 95       	reti

00000264 <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
 264:	10 92 04 01 	sts	0x0104, r1
    UART_TxTail = 0;
 268:	10 92 03 01 	sts	0x0103, r1
    UART_RxHead = 0;
 26c:	10 92 02 01 	sts	0x0102, r1
    UART_RxTail = 0;
 270:	10 92 01 01 	sts	0x0101, r1
#endif
#endif
#endif

    /* Set baud rate */
    if ( baudrate & 0x8000 )
 274:	99 23       	and	r25, r25
 276:	1c f4       	brge	.+6      	; 0x27e <uart_init+0x1a>
    {
        #if UART0_BIT_U2X
        UART0_STATUS = (1<<UART0_BIT_U2X);  //Enable 2x speed 
 278:	22 e0       	ldi	r18, 0x02	; 2
 27a:	20 93 c0 00 	sts	0x00C0, r18
        #endif
    } 
    #if defined(UART0_UBRRH)
    UART0_UBRRH = (unsigned char)((baudrate>>8)&0x80) ;
 27e:	90 78       	andi	r25, 0x80	; 128
 280:	90 93 c5 00 	sts	0x00C5, r25
    #endif    
    UART0_UBRRL = (unsigned char) (baudrate&0x00FF);
 284:	80 93 c4 00 	sts	0x00C4, r24
      
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(UART0_BIT_RXCIE)|(1<<UART0_BIT_RXEN)|(1<<UART0_BIT_TXEN);
 288:	88 e9       	ldi	r24, 0x98	; 152
 28a:	80 93 c1 00 	sts	0x00C1, r24
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef UART0_CONTROLC
    #ifdef UART0_BIT_URSEL
    UART0_CONTROLC = (1<<UART0_BIT_URSEL)|(1<<UART0_BIT_UCSZ1)|(1<<UART0_BIT_UCSZ0);
    #else
    UART0_CONTROLC = (1<<UART0_BIT_UCSZ1)|(1<<UART0_BIT_UCSZ0);
 28e:	86 e0       	ldi	r24, 0x06	; 6
 290:	80 93 c2 00 	sts	0x00C2, r24
 294:	08 95       	ret

00000296 <uart_getc>:
    unsigned char tmptail;
    unsigned char data;
    unsigned char lastRxError;


    if ( UART_RxHead == UART_RxTail ) {
 296:	90 91 02 01 	lds	r25, 0x0102
 29a:	80 91 01 01 	lds	r24, 0x0101
 29e:	98 17       	cp	r25, r24
 2a0:	a9 f0       	breq	.+42     	; 0x2cc <uart_getc+0x36>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
 2a2:	90 91 01 01 	lds	r25, 0x0101
 2a6:	9f 5f       	subi	r25, 0xFF	; 255
 2a8:	9f 71       	andi	r25, 0x1F	; 31
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
 2aa:	e9 2f       	mov	r30, r25
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	eb 5f       	subi	r30, 0xFB	; 251
 2b0:	fe 4f       	sbci	r31, 0xFE	; 254
 2b2:	20 81       	ld	r18, Z
    lastRxError = UART_LastRxError;
 2b4:	80 91 00 01 	lds	r24, 0x0100
    
    /* store buffer index */
    UART_RxTail = tmptail; 
 2b8:	90 93 01 01 	sts	0x0101, r25
    
    UART_LastRxError = 0;
 2bc:	10 92 00 01 	sts	0x0100, r1
    return (lastRxError << 8) + data;
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	98 2f       	mov	r25, r24
 2c4:	88 27       	eor	r24, r24
 2c6:	82 0f       	add	r24, r18
 2c8:	91 1d       	adc	r25, r1
 2ca:	08 95       	ret
    unsigned char data;
    unsigned char lastRxError;


    if ( UART_RxHead == UART_RxTail ) {
        return UART_NO_DATA;   /* no data available */
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	91 e0       	ldi	r25, 0x01	; 1
    UART_RxTail = tmptail; 
    
    UART_LastRxError = 0;
    return (lastRxError << 8) + data;

}/* uart_getc */
 2d0:	08 95       	ret

000002d2 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 2d2:	20 91 04 01 	lds	r18, 0x0104
 2d6:	2f 5f       	subi	r18, 0xFF	; 255
 2d8:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
 2da:	90 91 03 01 	lds	r25, 0x0103
 2de:	29 17       	cp	r18, r25
 2e0:	e1 f3       	breq	.-8      	; 0x2da <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
 2e2:	e2 2f       	mov	r30, r18
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	eb 5d       	subi	r30, 0xDB	; 219
 2e8:	fe 4f       	sbci	r31, 0xFE	; 254
 2ea:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
 2ec:	20 93 04 01 	sts	0x0104, r18

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
 2f0:	e1 ec       	ldi	r30, 0xC1	; 193
 2f2:	f0 e0       	ldi	r31, 0x00	; 0
 2f4:	80 81       	ld	r24, Z
 2f6:	80 62       	ori	r24, 0x20	; 32
 2f8:	80 83       	st	Z, r24
 2fa:	08 95       	ret

000002fc <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
 300:	ec 01       	movw	r28, r24
 302:	21 96       	adiw	r28, 0x01	; 1
 304:	fc 01       	movw	r30, r24
 306:	84 91       	lpm	r24, Z
 308:	88 23       	and	r24, r24
 30a:	39 f0       	breq	.+14     	; 0x31a <uart_puts_p+0x1e>
      uart_putc(c);
 30c:	0e 94 69 01 	call	0x2d2	; 0x2d2 <uart_putc>
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
 310:	fe 01       	movw	r30, r28
 312:	84 91       	lpm	r24, Z
 314:	21 96       	adiw	r28, 0x01	; 1
 316:	81 11       	cpse	r24, r1
 318:	f9 cf       	rjmp	.-14     	; 0x30c <uart_puts_p+0x10>
      uart_putc(c);

}/* uart_puts_p */
 31a:	df 91       	pop	r29
 31c:	cf 91       	pop	r28
 31e:	08 95       	ret

00000320 <_exit>:
 320:	f8 94       	cli

00000322 <__stop_program>:
 322:	ff cf       	rjmp	.-2      	; 0x322 <__stop_program>
